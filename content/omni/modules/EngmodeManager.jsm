//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";var RIL_DEBUG=ChromeUtils.import("resource://gre/modules/ril_consts_debug.js");const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");const{FileUtils}=ChromeUtils.import("resource://gre/modules/FileUtils.jsm");const{setTimeout,clearTimeout}=ChromeUtils.import("resource://gre/modules/Timer.jsm");const{NetUtil}=ChromeUtils.import("resource://gre/modules/NetUtil.jsm");const{DOMRequestIpcHelper}=ChromeUtils.import("resource://gre/modules/DOMRequestHelper.jsm");const{libcutils}=ChromeUtils.import("resource://gre/modules/systemlibs.js");const TOPIC_PREF_CHANGED="nsPref:changed";const NETWORK_TYPE_MOBILE=1;const NETWORK_TYPE_MOBILE_SUPL=3;const NETWORK_TYPE_MOBILE_IMS=5;const NETWORK_TYPE_MOBILE_DUN=6;const INET_CLASS=0;const IMS_CLASS=2;const ADMN_CLASS=3;const APP_CLASS=4;let DEBUG;var debug=function(s){dump("<KAIOS_LOG> -*- EngmodeManager -*-: "+s+"\n");};function EngmodeManager(){this._updateDebugFlag();Services.prefs.addObserver(RIL_DEBUG.PREF_RIL_DEBUG_ENABLED,this);}
EngmodeManager.prototype={__proto__:DOMRequestIpcHelper.prototype,classDescription:"The engmode manager for DOM",classID:Components.ID("{5f9922e4-4d07-403d-823e-eb6423641349}"),contractID:"@kaiostech.com/engmode/manager;1",QueryInterface:ChromeUtils.generateQI([Ci.nsIEngmodeManager,Ci.nsIDOMGlobalPropertyInitializer,Ci.nsIMessageListener,Ci.nsISupportsWeakReference,Ci.nsIObserver,]),_getOemfuseCb:null,_updateDebugFlag(){try{DEBUG=RIL_DEBUG.DEBUG_RIL||Services.prefs.getBoolPref(RIL_DEBUG.PREF_RIL_DEBUG_ENABLED);}catch(e){}},_listenedMessages:["Engmode:Common:Return","Engmode:KeyEvent:Return","Engmode:HeadsetStatusChangedEvt:Return","Engmode:RunProcess:Return","Engmode:CopyFile:Return","Engmode:GetFilesLastTime:Return","Engmode:CreateDirOrFile:Return","Engmode:EngmodeTestCommand:Return","Engmode:CheckIsCommandRunnig:Return","Engmode:FileRead:Return","Engmode:FileWrite:Return","Engmode:SetDirProp:Return","Engmode:setDataProfileByType:Return","Engmode:GetFusest:Return",],init(aWindow){let perm=Services.perms.testExactPermissionFromPrincipal(aWindow.document.nodePrincipal,"engmode");if(perm!==Ci.nsIPermissionManager.ALLOW_ACTION){Cu.reportError("NO ENGMODE EXTENSION PERMISSION FOR: "+aWindow.document.nodePrincipal.origin+"\n");return;}
this._window=aWindow;this.initDOMRequestHelper(aWindow,this._listenedMessages);this._onKeyEvent=null;this._requestInfo={};this.getCustomizedConfigure();},get _currentDateTime(){let tempDate=new Date();let date_str=tempDate.toLocaleString().replace(/[\/ :]/g,"-");return date_str;},_getCmdStr(aProcessType,aStoreToDevice){let cmd_str;switch(aProcessType){case"bugreport":cmd_str="/system/bin/bugreport";break;case"qxdm":cmd_str="/system/bin/diag_mdlog_system -f /system/bin/diag.cfg";break;case"logcat":cmd_str="/system/bin/logcat -b main -b system -b radio -b events -v time";break;case"dmesg":cmd_str="/system/bin/cat /proc/kmsg";break;case"tcpdump":cmd_str="/system/bin/tcpdump -i any -p -vv -s 0 -w ";break;default:break;}
if(DEBUG){debug("_getCmdStr cmd_str: "+cmd_str);}
return cmd_str;},_getDestDirPath(aStoreToDevice,aProcessType){let directoryPath;if("qxdm"==aProcessType){directoryPath="/data/kaioslog/";}else if(aStoreToDevice==="INTERNAL_SDCARD"){directoryPath="/data/usbmsc/logmanager/"+aProcessType+"/";}else{directoryPath="/sdcard/logmanager/"+aProcessType+"/";}
return directoryPath;},_getDestFilePath(aStoreToDevice,aProcessType){let destStr=this._getDestDirPath(aStoreToDevice,aProcessType);if("tcpdump"==aProcessType){destStr+=aProcessType+"_"+this._currentDateTime+".pcap";}else{destStr+=aProcessType+"_"+this._currentDateTime+".log";}
if(DEBUG){debug("_getDestFilePath  destStr: "+destStr);}
return destStr;},_filesLastTimeMsgHdlr(aMsg){let obj=aMsg.data;let request=this.takeRequest(aMsg.requestID);let data={};for(let typeStr in obj){data[typeStr]={};if(obj[typeStr].time!==0){let tempDate=new Date(obj[typeStr].time);let timeStr=tempDate.toString();data[typeStr].timeStr=timeStr;data[typeStr].location=obj[typeStr].location;}else{data[typeStr].timeStr="";data[typeStr].location="";}}
if(request){request.resolve(JSON.stringify(data));}
delete this._requestInfo[aMsg.requestID];},_createFileMsgHdlr(aMsg){for(let requestId in this._requestInfo){if(requestId===aMsg.requestID){if(this._requestInfo[requestId].type==="check"){let request=this.takeRequest(aMsg.requestID);request.resolve(aMsg.data);delete this._requestInfo[aMsg.requestID];}else if(aMsg.data==="EXIST"||aMsg.data==="CREATE_SUCCESS"){if(this._requestInfo[requestId].type==="tombstones"){this._copyTombstones(aMsg.requestID);}else if(this._requestInfo[requestId].type==="crashlog"){this._copyCrashlog(aMsg.requestID);}else if(this._requestInfo[requestId].type==="qxdm"){this._copyDiagCfg(aMsg.requestID);}else if(this._requestInfo[requestId].type==="CREATE_SIGNAL"||this._requestInfo[requestId].type==="dmesg"){this.takePromiseResolver(aMsg.requestID).resolve("CREATE_SUCCESS");}else{this._runProcess(aMsg.requestID);}}else{let request=this.takeRequest(aMsg.requestID);let data={};data.type=this._requestInfo[aMsg.requestID].type;data.errorInfo="Directory or file not exist or create failed";request.reject(data.errorInfo);delete this._requestInfo[aMsg.requestID];}}}},_processMsgHdlr(aMessage){let aMsg=aMessage.data;if(aMsg.requestID){let aProcessState=aMsg.data.processState;for(let requestId in this._requestInfo){if(requestId===aMsg.requestID){let type=this._requestInfo[requestId].type;if(DEBUG){debug("processState:"+aProcessState+"  type: "+type);}
if(aProcessState==="process-finished"){if("qxdm"===type&&"Engmode:CopyFile:Return"===aMessage.name){this._runProcess(aMsg.requestID);}else{let aFilePathArray=[];aFilePathArray[0]=this._getDestDirPath("INTERNAL_SDCARD",type)+type+"*";aFilePathArray[1]=this._getDestDirPath("EXTERNAL_SDCARD",type)+type+"*";Services.cpmm.sendAsyncMessage("Engmode:GetFilesLastTime",{aFilePathArray,requestID:aMsg.requestID,});}}else if(aProcessState==="process-running"){if(type==="qxdm"||type==="logcat"||type==="dmesg"||type==="tcpdump"){let request=this.getRequest(aMsg.requestID);let data={};data.type=type;data.info="running";request.resolve(JSON.stringify(data));}}else{let request=this.takeRequest(aMsg.requestID);let data={};data.type=type;data.errorInfo="Run process failed";data.errorType=aMsg.data.errorType;if(DEBUG){debug("process-failed: "+JSON.stringify(data));}
request.reject(JSON.stringify(data));delete this._requestInfo[aMsg.requestID];}
return;}}}},readJson:function readJson(settingName){return this.createPromiseWithId(aResolverId=>{this.getDefRt("settings.json").then(result=>{this.takePromiseResolver(aResolverId).resolve(result[settingName]);},err=>{this.takePromiseResolver(aResolverId).reject(err);});});},defaultAllowedReadList:{System:"/system/system.ver",Boot:"/boot.ver",Data:"/data/userdata.ver",Recovery:"/data/recovery.ver",Modem:"/data/modem.ver",SBL1:"/proc/modem_sbl",TZ:"/proc/modem_tz",RPM:"/proc/modem_rpm",Cmdline:"/proc/cmdline",Secro:"/proc/secro",Study:"/data/study.ver",Custpack:"/custpack/custpack.ver",Tuning:"/proc/tuning",fumoDLPartitionFile:"/data/fumo_dfInfo",batterycapacity:"/sys/class/power_supply/battery/capacity",health:"/sys/class/power_supply/battery/health",plug:"/sys/class/power_supply/usb/online",batterycurrent_now:"/sys/class/power_supply/battery/current_now",batteryvoltage_now:"/sys/class/power_supply/battery/voltage_now",battery_present:"/sys/class/power_supply/battery/present",battery_id:"/sys/class/power_supply/battery/batt_id",inhotlink:"/storage/sdcard/hotlink/hotlink.json",exhotlink:"/storage/sdcard1/hotlink/hotlink.json",nfcInfo:"/data/nfc/test_result",test_pn547:"/data/testbox_log/test_pn547.txt",GPSif:"/data/testbox_log/gps_info.txt",SubLcdBackLight:"/sys/class/ktd20xx/ktd2026/back_light_led",FlipState:"/sys/go_flip_key/lib_value",},get allowedFileReadList(){return Object.assign({},this.defaultAllowedReadList,this.customReadList);},fileReadLE(file){return this.createPromiseWithId(aResolverId=>{if(Object.keys(this.allowedFileReadList).includes(file)){Services.cpmm.sendAsyncMessage("Engmode:FileRead",{path:this.allowedFileReadList[file],requestID:aResolverId,});}else{let data="error parameter";this.takePromiseResolver(aResolverId).reject(data);}});},fileWriteLE(str,path,parameter){return this.createPromiseWithId(aResolverId=>{var mTemp=this._isCurrentPathtoAllow(path);if(true===mTemp){Services.cpmm.sendAsyncMessage("Engmode:FileWrite",{str,path,par:parameter,requestID:aResolverId,});this._requestInfo[aResolverId]={};this._requestInfo[aResolverId].str=str;this._requestInfo[aResolverId].path=path;this._requestInfo[aResolverId].par=parameter;}});},getSysInfo(aParam){return this.createPromiseWithId(aResolverId=>{Services.cpmm.sendAsyncMessage("Engmode:Common",{type:aParam,requestID:aResolverId,});});},handlePromiseMessage:function handlePromise(aResolve,aMessage,request){let data=aMessage.data.data.data;let resolver=this.takePromiseResolver(aMessage.data.resolverId)||request;if(!resolver){return;}
if(aResolve){resolver.resolve(data);}else{resolver.reject(data.reason);}},_copyTombstones(requestId){let sourcePath="/data/tombstones";let aParam=this._requestInfo[requestId].type;let directoryPath=this._getDestDirPath(this._requestInfo[requestId].storeToDevice,this._requestInfo[requestId].type);let fileName=aParam+"_"+this._currentDateTime+".log";Services.cpmm.sendAsyncMessage("Engmode:CopyFile",{sourcePath,directoryPath,fileNewName:fileName,requestID:requestId,});},_copyCrashlog(requestId){let sourcePath="/data/b2g/mozilla/Crash Reports";let aParam=this._requestInfo[requestId].type;let directoryPath=this._getDestDirPath(this._requestInfo[requestId].storeToDevice,this._requestInfo[requestId].type);let fileName=aParam+"_"+this._currentDateTime+".log";Services.cpmm.sendAsyncMessage("Engmode:CopyFile",{sourcePath,directoryPath,fileNewName:fileName,requestID:requestId,});},_copyDiagCfg(requestId){let sourcePath="/system/bin/diag.cfg";let directoryPath=this._getDestDirPath(this._requestInfo[requestId].storeToDevice,this._requestInfo[requestId].type);let fileName=null;Services.cpmm.sendAsyncMessage("Engmode:CopyFile",{sourcePath,directoryPath,fileNewName:fileName,requestID:requestId,});},_runProcess(requestId){let type=this._requestInfo[requestId].type;let aStoreToDevice=this._requestInfo[requestId].storeToDevice;let startRunStr="start "+this._getCmdStr(type,aStoreToDevice);let dest_str=this._getDestFilePath(aStoreToDevice,type);if("qxdm"===type){startRunStr+=" -o "+dest_str;}else if("tcpdump"===type){startRunStr+=" "+dest_str;}else{startRunStr+=" >"+dest_str;}
Services.cpmm.sendAsyncMessage("Engmode:RunProcess",{command:startRunStr,requestID:requestId,});},_isValidPath(aProcessType){let isLegal=false;switch(aProcessType){case"tombstones":case"bugreport":case"qxdm":case"dmesg":case"logcat":case"crashlog":case"initlog":case"geckolog":case"tcpdump":case"settingsapnvalue":case"versioninfo":case"clearlogs":case"propvalue":isLegal=true;break;default:isLegal=false;break;}
return isLegal;},createFileLE(typestr,path){return this.createPromiseWithId(aResolverId=>{this._requestInfo[aResolverId]={};this._requestInfo[aResolverId].typestr=typestr;this._requestInfo[aResolverId].path=path;if(path.indexOf("/sdcard")!==0){Services.cpmm.sendAsyncMessage("Engmode:CreateDirOrFile",{path,typeStr:typestr,shouldCreate:true,requestID:aResolverId,});this._requestInfo[aResolverId].storeToDevice="INTERNAL_SDCARD";}else{Services.cpmm.sendAsyncMessage("Engmode:CreateDirOrFile",{path,typeStr:typestr,shouldCreate:true,requestID:aResolverId,});this._requestInfo[aResolverId].storeToDevice="EXTERNAL_SDCARD";}
if(path.indexOf("tombstones")>0){this._requestInfo[aResolverId].type="tombstones";}else if(path.indexOf("crashlog")>0){this._requestInfo[aResolverId].type="crashlog";}else if(path.indexOf("bugreport")>0){this._requestInfo[aResolverId].type="bugreport";}else if(path.indexOf("dmesg")>0){this._requestInfo[aResolverId].type="dmesg";}else{this._requestInfo[aResolverId].type="CREATE_SIGNAL";}});},run(aParam,aStoreToDevice){return this.createPromiseWithId(aResolverId=>{if(this._isValidPath(aParam)){let path=this._getDestDirPath(aStoreToDevice,aParam);Services.cpmm.sendAsyncMessage("Engmode:CreateDirOrFile",{path,typeStr:"DIRECTORY",shouldCreate:true,requestID:aResolverId,});this._requestInfo[aResolverId]={};this._requestInfo[aResolverId].type=aParam;this._requestInfo[aResolverId].storeToDevice=aStoreToDevice;}else{let data={};data.type=aParam;data.errorInfo="Store log to a wrong place";data.errorType="IllegalFilePathToStoreLog";if(DEBUG){debug("IllegalFilePathToStoreLog"+JSON.stringify(data));}
this.takePromiseResolver(aResolverId).reject(JSON.stringify(data));}});},stop(aParam){return this.createPromiseWithId(aResolverId=>{let cmdStr=this._getCmdStr(aParam);let stopRunStr="stop "+cmdStr;if(aParam==="qxdm"){stopRunStr="start /system/bin/diag_mdlog_system -k";}
Services.cpmm.sendAsyncMessage("Engmode:RunProcess",{command:stopRunStr,requestID:aResolverId,});this._requestInfo[aResolverId]={};this._requestInfo[aResolverId].type=aParam;});},startAudioLoopTest(aParam){Services.cpmm.sendAsyncMessage("Engmode:AudioLoop",{param:aParam,operation:"start",});},stopAudioLoopTest(){Services.cpmm.sendAsyncMessage("Engmode:AudioLoop",{param:"mic",operation:"stop",});},startForceInCall(){Services.cpmm.sendAsyncMessage("Engmode:ForceInCall",{operation:"start",});},stopForceInCall(){Services.cpmm.sendAsyncMessage("Engmode:ForceInCall",{operation:"stop",});},startGpsTest(){Services.cpmm.sendAsyncMessage("Engmode:GpsTest",{operation:"start",});},stopGpsTest(){Services.cpmm.sendAsyncMessage("Engmode:GpsTest",{operation:"stop",});},setChargerLed(config){Services.cpmm.sendAsyncMessage("Engmode:SetChargerLED",{config,});},setCameraLed(config){Services.cpmm.sendAsyncMessage("Engmode:SetCameraLED",{config,});},setSubLCD(config){Services.cpmm.sendAsyncMessage("Engmode:setSubLCD",{config,});},setKeypadLED(config){Services.cpmm.sendAsyncMessage("Engmode:setKeypadLED",{config,});},setChargingEnabled(config){Services.cpmm.sendAsyncMessage("Engmode:SetChargingEnabled",{config,});},setDbClickUnlock(config){Services.cpmm.sendAsyncMessage("Engmode:SetDbClickUnlock",{config,});},setDirProp(path,status){return this.createPromiseWithId(aResolverId=>{Services.cpmm.sendAsyncMessage("Engmode:SetDirProp",{path,status,requestID:aResolverId,});});},setDataProfileByType(strApnSetting,type){return this.createPromiseWithId(aResolverId=>{if(DEBUG){debug("strApnSetting= "+strApnSetting);}
let apnSetting=JSON.parse(strApnSetting);for(let i=0;apnSetting.types[i];i++){if(apnSetting.types[i]=="default"){apnSetting.profileId=INET_CLASS;apnSetting.networkType=NETWORK_TYPE_MOBILE;break;}else if(apnSetting.types[i]=="supl"){apnSetting.profileId=APP_CLASS;apnSetting.networkType=NETWORK_TYPE_MOBILE_SUPL;break;}else if(apnSetting.types[i]=="ims"){apnSetting.profileId=IMS_CLASS;apnSetting.networkType=NETWORK_TYPE_MOBILE_IMS;break;}else if(apnSetting.types[i]=="dun"){apnSetting.profileId=ADMN_CLASS;apnSetting.networkType=NETWORK_TYPE_MOBILE_DUN;break;}}
Services.cpmm.sendAsyncMessage("Engmode:setDataProfileByType",{networkType:apnSetting.networkType,profileId:apnSetting.profileId,apn:apnSetting.apn,protocol:apnSetting.protocol,roamingProtocol:apnSetting.roaming_protocol,authtype:apnSetting.authtype,user:apnSetting.user,password:apnSetting.password,type,maxConnsTime:apnSetting.maxConnsTime,maxConns:apnSetting.maxConns,waitTime:apnSetting.waitTime,enabled:apnSetting.carrier_enabled,inactivityTimer:apnSetting.inactivityTimer,requestID:aResolverId,});});},getFilesLastTime(type,aParamAarry,aLength){return this.createPromiseWithId(aResolverId=>{let aFilePathArray=[];if("default"==type){for(let i=0;i<aParamAarry.length;i++){aFilePathArray[aFilePathArray.length]=this._getDestDirPath("INTERNAL_SDCARD",aParamAarry[i])+aParamAarry[i]+"*";aFilePathArray[aFilePathArray.length]=this._getDestDirPath("EXTERNAL_SDCARD",aParamAarry[i])+aParamAarry[i]+"*";}}else{for(let i=0;i<aParamAarry.length;i++){aFilePathArray[aFilePathArray.length]=aParamAarry[i];}}
Services.cpmm.sendAsyncMessage("Engmode:GetFilesLastTime",{aFilePathArray,requestID:aResolverId,});});},checkIsFileExist(filePath){return this.createPromiseWithId(aResolverId=>{Services.cpmm.sendAsyncMessage("Engmode:CreateDirOrFile",{path:filePath,typeStr:"FILE",shouldCreate:false,requestID:aResolverId,});this._requestInfo[aResolverId]={};this._requestInfo[aResolverId].type="check";});},checkIsCommandRunning(aParam){return this.createPromiseWithId(aResolverId=>{let pattern=/(\S+)\s+([^>]*)(?:>\s*(\S+))?/;let result;let cmdStr=this._getCmdStr(aParam);if((result=pattern.exec(cmdStr))){let program=result[1];Services.cpmm.sendAsyncMessage("Engmode:CheckIsCommandRunnig",{commands:program,requestID:aResolverId,});}else{this.takePromiseResolver(aResolverId).reject();}});},set onkeyevent(keyEvtHandle){if(this._onKeyEvent===keyEvtHandle){if(DEBUG){debug("onkeyevent: redundant setting...");}}else if(this._onKeyEvent&&keyEvtHandle){if(DEBUG){debug("onkeyevent: key handler changed");}
this._onKeyEvent=keyEvtHandle;}else if(this._onKeyEvent===null){if(DEBUG){debug("onkeyevent: key handler set");}
this._onKeyEvent=keyEvtHandle;Services.cpmm.sendAsyncMessage("Engmode:HookKeyEvt",{enable:true,});}else{if(DEBUG){debug("onkeyevent: key handler unset");}
this._onKeyEvent=null;Services.cpmm.sendAsyncMessage("Engmode:HookKeyEvt",{enable:false,});}},set onHeadsetStatusChanged(headsetStatusChangedEvtHandle){if(headsetStatusChangedEvtHandle){this._onHeadsetStatusChanged=headsetStatusChangedEvtHandle;Services.cpmm.sendAsyncMessage("Engmode:HookHeadsetStatusChangedEvt",{enable:true,});}else{this._onHeadsetStatusChanged=null;Services.cpmm.sendAsyncMessage("Engmode:HookHeadsetStatusChangedEvt",{enable:false,});}},getFlipState(){return this.createPromiseWithId(aResolverId=>{this.fileReadLE("FlipState").then(value=>{if(value==0){value="open";}else if(value==1){value="close";}
this.takePromiseResolver(aResolverId).resolve(value);},err=>{this.takePromiseResolver(aResolverId).reject(err);});});},_isCurrentPathtoAllow(path){if(1<=path.length&&!path.match(/\.\.\//g)){let allow_lists=["/storage/sdcard/*","/data/kaioslog/*","/data/logmanager/*","/data/testbox_log/*","/system/system.ver","/proc/study.ver","/data/userdata.ver","/system/b2g/defaults/pref/user.js","/data/nfc_pcd.txt",];if(DEBUG){debug(" _isCurrentPathtoAllow: path = "+path);}
if(new RegExp(allow_lists.join("|")).test(path)||Object.values(this.customPath).includes(path)){return true;}}
return false;},defaultAllowPropsList:{mms_debugging:"mms.debugging.enabled",kaios_diagcfg:"persist.sys.kaiosdiagcfg.enable",kaios_initkeys:"persist.sys.initkeys.enable",settings_console:"debug.console.enabled",settings_wifidebug:"wifi.debugging.enabled",bg_service:"persist.sys.engmodeexlog.enable",calling_autoanswer:"persist.sys.tel.autoanswer.ms",calling_autoGPRS:"persist.ro.ril.data_auto_attach",relay_oprt_change:"persist.radio.relay_oprt_change",auto_enable:"persist.sys.autolog.enable",auto_size:"persist.sys.autolog.props",settings_HAC:"persist.HACSetting",settings_TTY:"persist.tty_mode",engmoded:"persist.sys.engmoded.enabled",oma_AauthData:"persist.oma.aauthdata",},get allowedPropsList(){return Object.assign({},this.defaultAllowPropsList,this.customPrefs);},setPropertyLE(propskey,value){return this.createPromiseWithId(aResolverId=>{if(Object.keys(this.allowedPropsList).includes(propskey)&&this._isValuesAllow(value)){var command="setprop "+this.allowedPropsList[propskey]+" "+value;Services.cpmm.sendAsyncMessage("Engmode:EngmodeTestCommand",{param:command,useShell:true,operation:"start",requestID:aResolverId,});}});},defaultAllowCmdList:{data_nfc_upper:"mkdir -p /data/nfc; touch /data/nfc/test_result; chmod -R 775 /data/nfc",data_kaioslog_upper:"chmod -R 755 /data/kaioslog",data_testbox_upper:"chmod -R 755 /data/testbox_log",data_pidpptt_upper:"chmod 0774 /data/misc/wifi/pid.ptt",kaiosreboot:"reboot",delete_kaioslog_file:"rm -r",wifitest_power:"/system/bin/wifitest power > /data/testbox_log/wifitext.txt",wifitest_tx_cmd:"/system/bin/wifitest tx cmd > /data/testbox_log/wifitest.txt",wifitest_tx_stop:"/system/bin/wifitest tx stop > /data/testbox_log/wifitext_stop.txt",bt_radio_run:"/system/bin/bt_radio_run > /data/testbox_log/bt_radio_run.txt",bt_radio_stop:"/system/bin/bt_radio_stop",btTx_start:"/system/bin/btTx_start > /data/testbox_log/btTx_start.txt",btTx_run:"/system/bin/btTx_run",nfc_test:"if [ -f /system/bin/pnscr ]; then \n\
        if [ -e /dev/nq-nci ]; then \n\
          /system/bin/pnscr -t 1 -d nq-nci -f /system/etc/nfc/Card_Mode.txt > /data/nfc/test_result \n\
        elif [ -e /dev/pn544 ]; then \n\
          /system/bin/pnscr -t 1 -d pn544 -f /system/etc/nfc/Card_Mode.txt > /data/nfc/test_result \n\
        fi \n\
      elif [ -f /system/bin/secnfc ]; then \n\
        /system/bin/secnfc > /data/nfc/test_result \n\
      fi",nfc_stop:"test -f /data/nfc/test_result && rm -f /data/nfc/test_result \n\
      if [ -f /system/bin/pnscr ]; then \n\
        /system/bin/pkill -9 -f pnscr \n\
      elif [ -f /system/bin/secnfc ]; then \n\
        /system/bin/pkill -9 -f secnfc \n\
      fi",bttest:"bttest",bttestdisable:"bttest disable",gps_test:"/system/bin/gps_test",gps_test_hot:"/system/bin/gps_test hot",gps_test_warm:"/system/bin/gps_test warm",gps_test_cold:"/system/bin/gps_test cold",gps_test_stop:"/system/bin/gps_test stop",gps_test_1_0:"/system/bin/gps_test 1 0",gps_test_0_1:"/system/bin/gps_test 0 1",gps_test_1_0_1:"/system/bin/gps_test 1 0 1",test_pn547_1:"/system/bin/test_pn547 1 > /data/testbox_log/nfc.txt",rmgps:"rm -r /data/testbox_log/gps_info.txt",},get commandspecifyList(){return Object.assign({},this.defaultAllowCmdList,this.customCmd);},_isValuesAllow(value){let allows=["0","1","3000","true","false","enable","disable","diag","none",];return allows.includes(value);},_isCurrentParam(aParam,length){if(">"!=aParam.match(">")&&length>aParam.length){return true;}
return false;},execCmdLE(aParam){return this.createPromiseWithId(aResolverId=>{let aParamAarry=aParam.split(",");let aLength=aParamAarry.length;var mTempCommand=aParamAarry[0];if(Object.keys(this.commandspecifyList).includes(aParamAarry[0])&&!!aParamAarry.length&&aParamAarry.length<=3){var mCurrentParam=this.commandspecifyList[mTempCommand];var command=null;if(3==aLength&&this._isCurrentParam(aParamAarry[1],256)&&this._isCurrentParam(aParamAarry[2],1024)){var isCurPathAllow=this._isCurrentPathtoAllow(aParamAarry[2]);if(true===isCurPathAllow){command=mCurrentParam+" "+aParamAarry[1]+" > "+aParamAarry[2];}}else if(2==aLength&&this._isCurrentParam(aParamAarry[1],256)){if("stop"==aParamAarry[1]&&"gps_test"==aParamAarry[0]){Services.cpmm.sendAsyncMessage("Engmode:EngmodeTestCommand",{operation:"stop",});}
command=mCurrentParam+" "+aParamAarry[1];}else if(1==aLength){command=mCurrentParam;}
if(DEBUG){debug("execCmdLE: command = "+command);}
Services.cpmm.sendAsyncMessage("Engmode:EngmodeTestCommand",{param:command,useShell:true,operation:"start",requestID:aResolverId,});}else{this.takePromiseResolver(aResolverId).reject("invaild parameter");}});},setKAIOSLogPara(keys,aParamAarry,aLength){return this.createPromiseWithId(aResolverId=>{var command=null;if(2==aLength){if(this._isValidPath(keys)){debug("setKAIOSLogPara: tempkeys1 = "+aParamAarry[0]+" tempkeys2 = "+aParamAarry[1]);var tempkeys1=aParamAarry[0];var tempkeys2=aParamAarry[1];if("enable"==tempkeys1){command="setprop persist.sys.kaios"+keys+".enable "+tempkeys2;}else if("path"==tempkeys1){command="setprop persist.sys.kaios"+keys+".path "+tempkeys2;}else if("cmd"==tempkeys1){command="setprop persist.sys.kaios"+keys+".cmd "+tempkeys2;}
if(DEBUG){debug("setKAIOSLogPara: command = "+command);}
Services.cpmm.sendAsyncMessage('Engmode:EngmodeTestCommand',{param:command,useShell:true,operation:'start',requestID:aResolverId});}else{this.takePromiseResolver(aResolverId).reject("invaild parameter keys:"+keys);}}else{this.takePromiseResolver(aResolverId).reject("invaild parameter length:"+aLength);}});},_commonMsgHdlr(aMessage){let msg=aMessage.data;let request=this.takeRequest(msg.requestID);if(request){if(msg.data.result==="OK"){if(DEBUG){debug("Success: "+JSON.stringify(msg));}
this.handlePromiseMessage(true,aMessage,request);}else if(msg.data.result==="KO"){if(DEBUG){debug("Fail: "+JSON.stringify(msg));}
let errorInfo;if(typeof msg.data.data==="object"){errorInfo=JSON.stringify(msg.data.data);}else{errorInfo=msg.data;}
if(DEBUG){debug("Send data:"+errorInfo);}
this.handlePromiseMessage(false,aMessage,request);}}else if(DEBUG){debug("Success: Can not find the request object with "+msg.requestID);}},receiveMessage(aMessage){if(DEBUG){debug("receiveMessage: "+JSON.stringify(aMessage));}
let request;let msg=aMessage.data;switch(aMessage.name){case"Engmode:Common:Return":this._commonMsgHdlr(aMessage);break;case"Engmode:RunProcess:Return":case"Engmode:CopyFile:Return":this._processMsgHdlr(aMessage);break;case"Engmode:GetFilesLastTime:Return":this._filesLastTimeMsgHdlr(msg);break;case"Engmode:CreateDirOrFile:Return":this._createFileMsgHdlr(msg);break;case"Engmode:CheckIsCommandRunnig:Return":request=this.takeRequest(msg.requestID);request.resolve(msg.status);break;case"Engmode:KeyEvent:Return":if(this._onKeyEvent!==null){let event=new this._window.Event(msg.event);this._onKeyEvent.handleEvent(event);}
break;case"Engmode:HeadsetStatusChangedEvt:Return":if(this._onHeadsetStatusChanged!==null){let event=new this._window.Event(msg.event);this._onHeadsetStatusChanged.handleEvent(event);}
break;case"Engmode:EngmodeTestCommand:Return":request=this.takeRequest(msg.requestID);if(request){if(msg.data==="process-finished"){request.resolve(msg.data);}else{request.reject(msg.data);}}else if(DEBUG){debug("Can not find the request "+msg.requestID);}
break;case"Engmode:GetFusest:Return":if(this._getOemfuseCb!=null){this._getOemfuseCb.handleEvent(msg.result);}
break;case"Engmode:FileRead:Return":case"Engmode:FileWrite:Return":case"Engmode:SetDirProp:Return":case"Engmode:setDataProfileByType:Return":request=this.requestMsgHdl(msg);break;default:if(DEBUG){debug("Error Message"+aMessage.name);}
break;}},requestMsgHdl(msg){let request=this.takeRequest(msg.requestID);if(request){if(msg.data.result==="OK"){if(DEBUG){debug("Success: "+JSON.stringify(msg));}
request.resolve(msg.data.data);}else if(msg.data.result==="KO"){if(DEBUG){debug("Fail: "+JSON.stringify(msg));}
request.reject(msg.data.data);}}else if(DEBUG){debug("Can not find the request "+msg.requestID);}
return request;}, setPropertyValue:function _SetPropertyValue(propertyName,propertyValue){return this.createPromiseWithId(aResolverId=>{debug('_SetPropertyValue name: '+propertyName+', value: '+propertyValue);Services.cpmm.sendAsyncMessage('Engmode:SetPropertyValue',{name:propertyName,value:propertyValue});let value='true';this.takePromiseResolver(aResolverId).resolve(value);});},getPropertyValue:function _GetPropertyValue(propertyName){return this.createPromiseWithId(aResolverId=>{var value=libcutils.property_get(propertyName);this.takePromiseResolver(aResolverId).resolve(value);});},getPrefValue(prefId,defaultVal){return this.createPromiseWithId(aResolverId=>{let val=Services.prefs.getCharPref(prefId)||defaultVal;this.takePromiseResolver(aResolverId).resolve(val);});},getOemfuseStatus(cb){this._getOemfuseCb=cb;Services.cpmm.sendAsyncMessage("Engmode:GetFusest",{});},observe(aSubject,aTopic,aData){switch(aTopic){case TOPIC_PREF_CHANGED:if(aData===RIL_DEBUG.PREF_RIL_DEBUG_ENABLED){this._updateDebugFlag();}
break;}},getDefRt(fileName){return new Promise((resolve,reject)=>{let flag=fileName.substring(0,fileName.lastIndexOf("."));debug("getDefRt DefRt_"+flag);if(this["DefRt_"+flag]==null){let settingsFile=FileUtils.getDir("DefRt",[fileName],false,false);if(!settingsFile||(settingsFile&&!settingsFile.exists())){return reject();}
let file=Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsIFile);file.initWithPath(settingsFile.path);let channel=NetUtil.newChannel({uri:NetUtil.newURI(file),loadUsingSystemPrincipal:true,});channel.contentType="application/json";return NetUtil.asyncFetch(channel,(aStream,aResult)=>{if(!Components.isSuccessCode(aResult)){if(aResult==Cr.NS_ERROR_FILE_NOT_FOUND){return reject();}
Cu.reportError("Could not read from json file "+settingsFile.path);return reject();}
try{let converter=Cc["@mozilla.org/intl/scriptableunicodeconverter"].createInstance(Ci.nsIScriptableUnicodeConverter);converter.charset="UTF-8";let data=JSON.parse(converter.ConvertToUnicode(NetUtil.readInputStreamToString(aStream,aStream.available())||""));aStream.close();this["DefRt_"+flag]=data;if(this["timeoutForFree_"+flag]){clearTimeout(this["timeoutForFree_"+flag]);this["timeoutForFree_"+flag]=null;}
this["timeoutForFree_"+flag]=setTimeout(()=>{this["DefRt_"+flag]=null;},5000);return resolve(data);}catch(ex){let err="Could not parse JSON: "+settingsFile.path+" "+ex+"\n"+ex.stack;Cu.reportError(err);return reject(err);}});}
return resolve(this["DefRt_"+flag]);});},getCustomizedConfigure(){return this.getDefRt("custom_engmode_config.json").then(result=>{if(result&&result.custom_configurable_prefs){this.customPrefs=result.custom_configurable_prefs||{};}else{this.customPrefs={};}
if(result&&result.custom_writeable_path){this.customPath=result.custom_writeable_path||{};}else{this.customPath={};}
if(result&&result.custom_executeable_cmd){this.customCmd=result.custom_executeable_cmd||{};}else{this.customCmd={};}
if(result&&result.custom_readable_list){this.customReadList=result.custom_readable_list||{};}else{this.customReadList={};}
debug("customPrefs -> "+JSON.stringify(this.customPrefs));debug("customPath -> "+JSON.stringify(this.customPath));debug("customCmd -> "+JSON.stringify(this.customCmd));debug("customReadList -> "+JSON.stringify(this.customReadList));},()=>{debug("get customized configure failure.");this.customPrefs={};this.customPath={};this.customCmd={};this.customReadList={};});},};var EXPORTED_SYMBOLS=["EngmodeManager"];