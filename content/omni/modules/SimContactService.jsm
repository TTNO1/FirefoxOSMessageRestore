//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");var RIL={};ChromeUtils.import("resource://gre/modules/ril_consts.js",RIL);const DEBUG=false;const SIMCONTACT_SERVICE_CID=Components.ID("{bdf46692-65d6-4180-ace3-6fb514a827a6}");const NS_XPCOM_SHUTDOWN_OBSERVER_ID="xpcom-shutdown";const CARDCONTACT_TYPE_ADN=0;const SIM_CONTACT_LOAD_STATUS_INIT=0;const SIM_CONTACT_LOAD_STATUS_LOADING=1;const SIM_CONTACT_LOAD_STATUS_LOADED=2;const RETRY_COUNT_MAX=3;function debug(s){if(DEBUG){dump("-*- SimContactService:"+s+"\n");}}
XPCOMUtils.defineLazyServiceGetter(this,"gIccService","@mozilla.org/icc/iccservice;1","nsIIccService");XPCOMUtils.defineLazyServiceGetter(this,"gGeckoBridge","@mozilla.org/sidl-native/bridge;1","nsIGeckoBridge");XPCOMUtils.defineLazyGetter(this,"gRadioInterfaceLayer",function(){let ril={numRadioInterfaces:0};try{ril=Cc["@mozilla.org/ril;1"].getService(Ci.nsIRadioInterfaceLayer);}catch(e){}
return ril;});function SimContactClient(aClientId,aService){this._clientId=aClientId;this._init();this._icc=gIccService.getIccByServiceId(this._clientId);this._simContactSrv=aService;this._loadStatus=SIM_CONTACT_LOAD_STATUS_INIT;this._cardState=Ci.nsIIcc.CARD_STATE_UNKNOWN;this._radioInterface=gRadioInterfaceLayer.getRadioInterface(aClientId);this._retryCount=0;}
SimContactClient.prototype={QueryInterface:ChromeUtils.generateQI([Ci.nsIIccListener]),_cardState:null,_clientId:null,_icc:null,_loadStatus:null,_retryCount:0,_radioInterface:null,_simContactSrv:null,notifyStkCommand(){},notifyStkSessionEnd(){},notifyCardStateChanged(){debug("notifyCardStateChanged");if(this._cardState!=this._icc.cardState){this._cardState=this._icc.cardState;}
if(this._loadStatus===SIM_CONTACT_LOAD_STATUS_INIT){this._loadSimContacts();}},notifyIccInfoChanged(){if(this._loadStatus===SIM_CONTACT_LOAD_STATUS_INIT){this._loadSimContacts();}},notifyIsimInfoChanged(){},_init(){this._icc=gIccService.getIccByServiceId(this._clientId);this._icc.registerListener(this);},shutdown(){this._icc.unregisterListener(this);},_loadSimContacts(){if(this._cardState===Ci.nsIIcc.CARD_STATE_READY){this._loadStatus=SIM_CONTACT_LOAD_STATUS_LOADING;debug("Begin to read sim contacts");this._radioInterface.sendWorkerMessage("readICCContacts",{contactType:CARDCONTACT_TYPE_ADN},aResponse=>{let contacts=[];if(aResponse.errorMsg){debug(`readICCContacts error:${aResponse.errorMsg}`);if(aResponse.errorMsg==="RadioNotAvailable"){this._retryCount++;if(this._retryCount<RETRY_COUNT_MAX){this._loadStatus=SIM_CONTACT_LOAD_STATUS_INIT;return;}}}else{contacts=aResponse.contacts.map(contact=>{return{id:contact.contactId,tel:contact.number,name:contact.alphaId,category:"SIM\u{001E}SIM"+
this._clientId.toString()+"\u{001E}KAICONTACT",};});}
debug(`contacts length is:${contacts.length}`);this._simContactSrv.importSimContacts(contacts);this._loadStatus=SIM_CONTACT_LOAD_STATUS_LOADED;});}else if(this._cardState===Ci.nsIIcc.CARD_STATE_UNDETECTED||this._cardState===Ci.nsIIcc.CARD_STATE_PERMANENT_BLOCKED||this._cardState===Ci.nsIIcc.CARD_STATE_ILLEGAL){debug("Sim card abnormal, use empty data directly");this._loadStatus=SIM_CONTACT_LOAD_STATUS_LOADED;this._simContactSrv.importSimContacts([]);}},};function SimContactService(){debug("SimContactService ctr");Services.obs.addObserver(this,NS_XPCOM_SHUTDOWN_OBSERVER_ID);this._initClients();}
SimContactService.prototype={classID:SIMCONTACT_SERVICE_CID,QueryInterface:ChromeUtils.generateQI([Ci.nsIObserver]),_clients:[],_contacts:[],observe(subject,topic,data){switch(topic){case NS_XPCOM_SHUTDOWN_OBSERVER_ID:Services.obs.removeObserver(this,NS_XPCOM_SHUTDOWN_OBSERVER_ID);this._clients.forEach(client=>{client.shutdown();});break;}},_initClients(){let numClients=gRadioInterfaceLayer.numRadioInterfaces;for(let i=0;i<numClients;i++){let client=new SimContactClient(i,this);this._clients.push(client);}},importSimContacts(contacts){this._contacts.push(contacts);if(this._contacts.length===gRadioInterfaceLayer.numRadioInterfaces){let datas=[];this._contacts.forEach(data=>{datas=datas.concat(data);});this._contacts=[];debug("Strat import sim contacts to db");gGeckoBridge.importSimContacts(datas,{resolve:()=>{debug("Import sim contacts resolve");},reject:()=>{debug("Import sim contacts reject");},});}},};var EXPORTED_SYMBOLS=["SimContactService"];