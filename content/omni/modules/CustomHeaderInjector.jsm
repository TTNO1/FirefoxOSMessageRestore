//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";var EXPORTED_SYMBOLS=["CustomHeaderInjector"];const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");ChromeUtils.defineModuleGetter(this,"DeviceUtils","resource://gre/modules/DeviceUtils.jsm");XPCOMUtils.defineLazyServiceGetter(this,"gMobileConnectionService","@mozilla.org/mobileconnection/mobileconnectionservice;1","nsIMobileConnectionService");XPCOMUtils.defineLazyServiceGetter(this,"gIccService","@mozilla.org/icc/iccservice;1","nsIIccService");const kTopicActiveNetwork="network-active-changed";const kTopicPrefChange="nsPref:changed";const kPrefDefaultServiceId="dom.telephony.defaultServiceId";const DEBUG=false;function debug(msg){dump("-* CustomHeaderInjector *- "+msg+"\n");}
this.CustomHeaderInjector={QueryInterface:ChromeUtils.generateQI([Ci.nsIMobileConnectionListener,Ci.nsIIccListener,]),_customHeader:{},_deviceInfo:{},_serviceHosts:[],_defaultServiceId:null,init(){this._customHeader.name=Services.prefs.getCharPref("network.http.customheader.name","");let hosts=Services.prefs.getCharPref("network.http.customheader.hosts","");this._serviceHosts=hosts.split(",");DEBUG&&debug(`Hosts require injection: ${JSON.stringify(this._serviceHosts)}`);this._defaultServiceId=Services.prefs.getIntPref(kPrefDefaultServiceId,0);this.initCustomHeaderValue();Services.obs.addObserver(this,"http-on-modify-request");Services.obs.addObserver(this,kTopicActiveNetwork);Services.obs.addObserver(this,kTopicPrefChange);gIccService.getIccByServiceId(this._defaultServiceId).registerListener(this);gMobileConnectionService.getItemByServiceId(this._defaultServiceId).registerListener(this);},buildCustomHeader(){this._customHeader.value=Services.prefs.getCharPref("network.http.customheader.version","");["device_uid","com_ref","sim_mnc","sim_mcc","net_mnc","net_mcc","net_type",].forEach(prop=>{this._customHeader.value+=`;${this._deviceInfo[prop]}`;});},initCustomHeaderValue(){let iccInfo=DeviceUtils.iccInfo;this._deviceInfo.sim_mnc=iccInfo&&iccInfo.mnc?iccInfo.mnc:"";this._deviceInfo.sim_mcc=iccInfo&&iccInfo.mcc?iccInfo.mcc:"";this._deviceInfo.net_mnc=DeviceUtils.networkMnc;this._deviceInfo.net_mcc=DeviceUtils.networkMcc;this._deviceInfo.net_type=DeviceUtils.networkType;let cuRef=DeviceUtils.cuRef;cuRef=!cuRef?"":cuRef.replace(/;/g,"\\u003B");this._deviceInfo.com_ref=cuRef;let promises=[];this._deviceInfo.device_uid="";promises.push(DeviceUtils.getDeviceId().then(deviceid=>{this._deviceInfo.device_uid=!deviceid?"":deviceid.replace(/;/g,"\\u003B");}));Promise.allSettled(promises).then(()=>{this.buildCustomHeader();});},observe(aSubject,aTopic,aData){switch(aTopic){case"http-on-modify-request":{let channel=aSubject.QueryInterface(Ci.nsIHttpChannel);const found=this._serviceHosts.find(host=>channel.URI.host.endsWith(host));if(channel.URI.schemeIs("https")&&found){DEBUG&&debug(`Inject custom header for connection...`);DEBUG&&debug(` host: ${channel.URI.host}`);DEBUG&&debug(` header value: ${this._customHeader.value}`);channel.setRequestHeader(this._customHeader.name,this._customHeader.value,false);}
break;}
case kTopicActiveNetwork:{this.updateCustomHeaderNetValue();break;}
case kTopicPrefChange:{if(aData===kPrefDefaultServiceId){this._defaultServiceId=Services.prefs.getIntPref(kPrefDefaultServiceId,0);}
break;}}},updateCustomHeaderNetValue(){let netMnc=DeviceUtils.networkMnc;let netMcc=DeviceUtils.networkMcc;let netType=DeviceUtils.networkType;if(netMnc!==this._deviceInfo.net_mnc||netMcc!==this._deviceInfo.net_mcc||netType!==this._deviceInfo.net_type){this._deviceInfo.net_mnc=netMnc;this._deviceInfo.net_mcc=netMcc;this._deviceInfo.net_type=netType;this.buildCustomHeader();}},updateCustomHeaderIccValue(){let iccInfo=DeviceUtils.iccInfo;let simMnc=iccInfo&&iccInfo.mnc?iccInfo.mnc:"";let simMcc=iccInfo&&iccInfo.mcc?iccInfo.mcc:"";if(this._deviceInfo.sim_mnc!==simMnc||this._deviceInfo.sim_mcc!==simMcc){this._deviceInfo.sim_mnc=simMnc;this._deviceInfo.sim_mcc=simMcc;this.buildCustomHeader();}}, notifyVoiceChanged(){this.updateCustomHeaderNetValue();},notifyDataChanged(){},notifyDataError(_message){},notifyCFStateChanged(_action,_reason,_number,_timeSeconds,_serviceClass){},notifyEmergencyCbModeChanged(_active,_timeoutMs){},notifyOtaStatusChanged(_status){},notifyRadioStateChanged(){},notifyClirModeChanged(_mode){},notifyLastKnownNetworkChanged(){},notifyLastKnownHomeNetworkChanged(){},notifyNetworkSelectionModeChanged(){},notifyDeviceIdentitiesChanged(){},notifySignalStrengthChanged(){},notifyModemRestart(_reason){}, notifyStkCommand(_aStkProactiveCmd){},notifyStkSessionEnd(){},notifyCardStateChanged(){this.updateCustomHeaderIccValue();},notifyIccInfoChanged(){},notifyIsimInfoChanged(){},};CustomHeaderInjector.init();