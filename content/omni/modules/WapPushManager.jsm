//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");var WAP_CONSTS=ChromeUtils.import("resource://gre/modules/wap_consts.js");const DEBUG=false;const kWapSuplInitObserverTopic="wap-supl-init";XPCOMUtils.defineLazyGetter(this,"SI",function(){let SI={};ChromeUtils.import("resource://gre/modules/SiPduHelper.jsm",SI);return SI;});XPCOMUtils.defineLazyGetter(this,"SL",function(){let SL={};ChromeUtils.import("resource://gre/modules/SlPduHelper.jsm",SL);return SL;});XPCOMUtils.defineLazyGetter(this,"CP",function(){let CP={};ChromeUtils.import("resource://gre/modules/CpPduHelper.jsm",CP);return CP;});XPCOMUtils.defineLazyGetter(this,"WSP",function(){let WSP={};ChromeUtils.import("resource://gre/modules/WspPduHelper.jsm",WSP);return WSP;});XPCOMUtils.defineLazyServiceGetter(this,"gSystemMessenger","@mozilla.org/systemmessage-service;1","nsISystemMessageService");XPCOMUtils.defineLazyServiceGetter(this,"gIccService","@mozilla.org/icc/iccservice;1","nsIIccService");XPCOMUtils.defineLazyModuleGetter(this,"gPhoneNumberUtils","resource://gre/modules/PhoneNumberUtils.jsm","PhoneNumberUtils");this.WapPushManager={processMessage:function processMessage(data,options){try{WSP.PduHelper.parse(data,true,options);debug("options: "+JSON.stringify(options));}catch(ex){debug("Failed to parse sessionless WSP PDU: "+ex.message);return;} 
let contentType=options.headers["content-type"].media;let msg;let authInfo=null;let bMsgType="wappush-received"; if(contentType==="application/vnd.wap.mms-message"){let mmsService=Cc["@mozilla.org/mms/gonkmmsservice;1"].getService(Ci.nsIMmsService);mmsService.QueryInterface(Ci.nsIWapPushApplication).receiveWapPush(data.array,data.array.length,data.offset,options);return;}else if(contentType==="text/vnd.wap.si"||contentType==="application/vnd.wap.sic"){msg=SI.PduHelper.parse(data,contentType);}else if(contentType==="text/vnd.wap.sl"||contentType==="application/vnd.wap.slc"){msg=SL.PduHelper.parse(data,contentType);}else if(contentType==="text/vnd.wap.connectivity-xml"||contentType==="application/vnd.wap.connectivity-wbxml"){const cp_icc=gIccService.getIccByServiceId(options.serviceId);dump("[WapPushManager] processMessage: cp_icc = "+cp_icc+".\n");if(cp_icc&&cp_icc.iccInfo){let cp_mcc=cp_icc.iccInfo.mcc;let cp_mnc=cp_icc.iccInfo.mnc;dump("[WapPushManager] processMessage: cp_mcc = "+cp_mcc+", cp_mnc = "+cp_mnc+".\n");const validMccMnc={"310":["410","280","260","240"],"330":["110"]};const mccKeys=Object.keys(validMccMnc);let continueBroadcast=false;if(mccKeys&&mccKeys.includes(cp_mcc)){const mncKeys=validMccMnc[cp_mcc];if(mncKeys&&mncKeys.includes(cp_mnc)){dump("[WapPushManager] processMessage: mcc mnc is valid, go through to broadcast cp.\n");continueBroadcast=true;}else{dump("[WapPushManager] processMessage: ignore this mnc.\n");}}else{dump("[WapPushManager] processMessage: ignore this mcc.\n");}
if(!continueBroadcast){return;}}else{dump("[WapPushManager] processMessage: no cp_icc or iccInfo.\n");}
if(contentType==="application/vnd.wap.connectivity-wbxml"){let params=options.headers["content-type"].params;let sec=params&&params.sec;let mac=params&&params.mac;let octets=new Uint8Array(data.array);authInfo=CP.Authenticator.check(octets.subarray(data.offset),sec,mac,function getNetworkPin(){let icc=gIccService.getIccByServiceId(options.serviceId);let imsi=icc?icc.imsi:null;return CP.Authenticator.formatImsi(imsi);});}
msg=CP.PduHelper.parse(data,contentType); bMsgType="omacpmsg-received";dump("[WapPushManager] processMessage: change to broadcast omacp message type.\n");}else if(contentType==="application/vnd.omaloc-supl-init"){let content=data.array.slice(data.offset);msg={contentType,content,};Services.obs.notifyObservers(msg,kWapSuplInitObserverTopic,content);return;}else{msg={contentType,content:data.array,};}
let sender=gPhoneNumberUtils.normalize(options.sourceAddress,false);
gSystemMessenger.broadcastMessage(bMsgType,{ sender,contentType:msg.contentType,content:msg.content,authInfo,serviceId:options.serviceId,});},receiveWdpPDU:function receiveWdpPDU(array,length,offset,options){if(options.bearer==null||!options.sourceAddress||options.sourcePort==null||!array){debug("Incomplete WDP PDU");return;}
if(options.destinationPort!=WAP_CONSTS.WDP_PORT_PUSH){debug("Not WAP Push port: "+options.destinationPort);return;}
this.processMessage({array,offset},options);},};function debug(s){if(DEBUG){dump("-*- WapPushManager: "+s+"\n");}}
this.EXPORTED_SYMBOLS=["WapPushManager"];