//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");XPCOMUtils.defineLazyServiceGetter(this,"gSettingsManager","@mozilla.org/sidl-native/settings;1","nsISettingsManager");XPCOMUtils.defineLazyServiceGetter(this,"gMobileConnectionService","@mozilla.org/mobileconnection/mobileconnectionservice;1","nsIMobileConnectionService");XPCOMUtils.defineLazyServiceGetter(this,"gIccService","@mozilla.org/icc/iccservice;1","nsIIccService");XPCOMUtils.defineLazyServiceGetter(this,"gNetworkManager","@mozilla.org/network/manager;1","nsINetworkManager");XPCOMUtils.defineLazyServiceGetter(this,"gDataControlService","@kaiostech.com/datacontrolservice;1","nsIDataControlService");const PCO_SERVICE_CID=Components.ID("{31c5eb59-ef89-45ca-b138-5d13be83a7fa}");const TOPIC_XPCOM_SHUTDOWN="xpcom-shutdown";const TOPIC_MOZSETTINGS_CHANGED="mozsettings-changed";const TOPIC_PREF_CHANGED="nsPref:changed";const TOPIC_ACTIVE_CHANGED="network-active-changed";const PREF_RIL_DEBUG_ENABLED="ril.debugging.enabled";const kSettingDDS="ril.data.defaultServiceId";const kSettingsPcoTable="ril.data.pco.table";const NETWORK_TYPE_UNKNOWN=Ci.nsINetworkInfo.NETWORK_TYPE_UNKNOWN;const NETWORK_TYPE_WIFI=Ci.nsINetworkInfo.NETWORK_TYPE_WIFI;const NETWORK_TYPE_MOBILE=Ci.nsINetworkInfo.NETWORK_TYPE_MOBILE;const NETWORK_TYPE_MOBILE_MMS=Ci.nsINetworkInfo.NETWORK_TYPE_MOBILE_MMS;const NETWORK_TYPE_MOBILE_SUPL=Ci.nsINetworkInfo.NETWORK_TYPE_MOBILE_SUPL;const NETWORK_TYPE_MOBILE_IMS=Ci.nsINetworkInfo.NETWORK_TYPE_MOBILE_IMS;const NETWORK_TYPE_MOBILE_DUN=Ci.nsINetworkInfo.NETWORK_TYPE_MOBILE_DUN;const NETWORK_TYPE_MOBILE_FOTA=Ci.nsINetworkInfo.NETWORK_TYPE_MOBILE_FOTA;const NETWORK_TYPE_MOBILE_HIPRI=Ci.nsINetworkInfo.NETWORK_TYPE_MOBILE_HIPRI;const NETWORK_TYPE_MOBILE_CBS=Ci.nsINetworkInfo.NETWORK_TYPE_MOBILE_CBS;const NETWORK_TYPE_MOBILE_IA=Ci.nsINetworkInfo.NETWORK_TYPE_MOBILE_IA;const NETWORK_TYPE_MOBILE_ECC=Ci.nsINetworkInfo.NETWORK_TYPE_MOBILE_ECC;const NETWORK_TYPE_MOBILE_XCAP=Ci.nsINetworkInfo.NETWORK_TYPE_MOBILE_XCAP;const DATACALL_TYPES=[NETWORK_TYPE_MOBILE,NETWORK_TYPE_MOBILE_MMS,NETWORK_TYPE_MOBILE_SUPL,NETWORK_TYPE_MOBILE_IMS,NETWORK_TYPE_MOBILE_DUN,NETWORK_TYPE_MOBILE_FOTA,NETWORK_TYPE_MOBILE_HIPRI,NETWORK_TYPE_MOBILE_CBS,NETWORK_TYPE_MOBILE_IA,NETWORK_TYPE_MOBILE_ECC,NETWORK_TYPE_MOBILE_XCAP,];var DEBUG=false;function updateDebugFlag(){let debugPref=false;try{debugPref=debugPref||Services.prefs.getBoolPref(PREF_RIL_DEBUG_ENABLED);}catch(e){debugPref=false;}
DEBUG=debugPref;}
updateDebugFlag();function PcoInfo(aPcoId,aPcoValue){if(aPcoId){this.pcoId=aPcoId;}else{this.pcoId=0;}
if(aPcoValue){this.pcoValue=aPcoValue;}else{this.pcoValue=0;}}
PcoInfo.prototype={pcoId:0,pcoValue:0,setInfo(aPcoId,aPcoValue){this.pcoId=aPcoId;this.pcoValue=aPcoValue;},compareInfo(aNewPcoInfo){if(!aNewPcoInfo){return false;}
if(aNewPcoInfo.pcoId!=this.pcoId){return false;}
if(aNewPcoInfo.pcoValue!=this.pcoValue){return false;}
return true;},};function PCOService(){this.debug("PCOService init.");this._pcoSettingValue=null;this.pcoLists=[];this._pcoRestrictBG=false;let numRadioInterfaces=gMobileConnectionService.numItems;for(let clientId=0;clientId<numRadioInterfaces;clientId++){let pcoList={iccId:-1,pco:new Map(),};for(let type of DATACALL_TYPES){pcoList.pco.set(type,new PcoInfo());}
this.pcoLists.push(pcoList);let icc=gIccService.getIccByServiceId(clientId);icc.registerListener(this);}
try{this.getSettingValue(kSettingDDS);this.addSettingObserver(kSettingDDS);}catch(e){if(DEBUG){this.debug("Error to get the DDS: "+e);}}
try{this.getSettingValue(kSettingsPcoTable);this.addSettingObserver(kSettingsPcoTable);}catch(e){if(DEBUG){this.debug("Error to get the pco table: "+e);}}
Services.prefs.addObserver(PREF_RIL_DEBUG_ENABLED,this);Services.obs.addObserver(this,TOPIC_ACTIVE_CHANGED);Services.obs.addObserver(this,TOPIC_XPCOM_SHUTDOWN);}
PCOService.prototype={classID:PCO_SERVICE_CID,QueryInterface:ChromeUtils.generateQI([Ci.nsIPCOService,Ci.nsIObserver,Ci.nsIIccListener,Ci.nsISettingsServiceCallback,]),pcoLists:null,_pcoSettingValue:null,_pcoRestrictBG:false,_dataDefaultClientId:-1,debug(aMsg){if(DEBUG){dump("-*- PCOService: "+aMsg+"\n");}},updatePcoValue(value){this.debug("updatePcoValue by network. PCOvalue="+JSON.stringify(value));let clientId=value.clientId;let iccId=value.iccId;let apnType=value.apnType;let pcoId=value.pcoId;let oldIccId=this.pcoLists[clientId].iccId;let contents=value.contents;let pcoInfo=new PcoInfo();if(!iccId){return;}
if(contents.length){pcoInfo.setInfo(pcoId,contents[0]);}
if(oldIccId==iccId){let oldPcoInfo=this.pcoLists[clientId].pco.get(apnType);this.debug("updatePcoValue. oldPcoInfo="+JSON.stringify(oldPcoInfo));if(oldPcoInfo.compareInfo(pcoInfo)){this.debug("same pco value. Skip change update.");return;}}
else{this.pcoLists[clientId].iccId=iccId;this.pcoLists[clientId].pco=new Map();}
this.pcoLists[clientId].pco.set(apnType,pcoInfo);let key="ril.data.pco."+convertToDataCallType(apnType);try{this.setSettingValue(key,pcoInfo);}catch(e){this.debug("Error to config the pco value for type: "+apnType+": "+e);}
let pcoTables=this.buildPcoTables();this._pcoSettingValue=pcoTables;try{this.setSettingValue(kSettingsPcoTable,pcoTables);}catch(e){this.debug("Error to config the pco table: "+e);}
this.handlePcoValueChange();},handlePcoValueChange(){this.debug("handlePcoValueChange.");if(this._dataDefaultClientId==-1){this.debug("_dataDefaultClientId not init. Skip change update.");return;}
let pcoList=this.pcoLists[this._dataDefaultClientId];if(pcoList.iccId==-1){this.debug("iccId not init. Skip change update.");return;}
let active=gNetworkManager.activeNetworkInfo&&gNetworkManager.activeNetworkInfo.QueryInterface(Ci.nsIRilNetworkInfo);if(active&&active.type===NETWORK_TYPE_WIFI){this.debug("Not restrict the background data due to wifi connected.");this._pcoRestrictBG=false;if(gDataControlService){gDataControlService.setPcoEnable(false);}}
else if(active&&active.type===NETWORK_TYPE_MOBILE&&active.serviceId===this._dataDefaultClientId){this.dumpPcoTable();let pcoValueDefault=pcoList.pco.get(NETWORK_TYPE_MOBILE).pcoValue;if(pcoValueDefault==2||pcoValueDefault==3||pcoValueDefault==5){this.debug("Restrict the background data. pcoValue ="+pcoValueDefault);this._pcoRestrictBG=true;if(gDataControlService){gDataControlService.setPcoEnable(true);}}
else{this.debug("Not restrict the background data. pcoValueDefault ="+
pcoValueDefault);this._pcoRestrictBG=false;if(gDataControlService){gDataControlService.setPcoEnable(false);}}}else{this.debug("No active network. Skip change update.");}},handleDataClientIdChange(aNewClientId){this.debug("handleDataClientIdChange");if(this._dataDefaultClientId===parseInt(aNewClientId,10)){return;}
this._dataDefaultClientId=parseInt(aNewClientId,10);this.debug("DDS change, process the pco change event.");this.handlePcoValueChange();},handlePcoSettingChange(aResult){this._pcoSettingValue=JSON.parse(aResult);let changed=false;for(let pcoSetting of this._pcoSettingValue){for(let pcoList of this.pcoLists){if(pcoSetting.iccId==pcoList.iccId){let settingPcoInfo=new PcoInfo(pcoSetting.pcoId,pcoSetting.pcoValue);let apnType=convertToNetworkType(pcoSetting.networkType);let pcoInfo=pcoList.pco.get(apnType);if(pcoInfo!==undefined&&!pcoInfo.compareInfo(settingPcoInfo)){pcoList.pco.set(apnType,settingPcoInfo);changed=true;break;}}}}
if(changed){this.debug("Setting pco table changed, update the pco.");this.handlePcoValueChange();}},buildPcoTables(){if(this.pcoLists){let pcoTable=[];for(let pcoList of this.pcoLists){if(pcoList.iccId!=null){for(let[networkType,pcoInfo]of pcoList.pco){let pco={iccId:pcoList.iccId,networkType:convertToDataCallType(networkType),pcoId:pcoInfo.pcoId,pcoValue:pcoInfo.pcoValue,};pcoTable.push(pco);}}}
this.debug("pcoTable= "+JSON.stringify(pcoTable));return pcoTable;}
this.debug("pcoLists = null");return null;},dumpPcoTable(){if(this.pcoLists){for(let pcoList of this.pcoLists){let iccId=pcoList.iccId;this.debug("=====iccId:"+iccId+" =====");for(let[networkType,pcoInfo]of pcoList.pco){this.debug(iccId+": networkType = "+
convertToDataCallType(networkType)+" , pcoInfo = "+
JSON.stringify(pcoInfo));}
this.debug("==============================");}}else{this.debug("pcoLists = null");}},_shutdown(){this.pcoLists=null;this._pcoSettingValue=null;this._pcoRestrictBG=false;Services.prefs.removeObserver(PREF_RIL_DEBUG_ENABLED,this);Services.obs.removeObserver(this,TOPIC_ACTIVE_CHANGED);Services.obs.removeObserver(this,TOPIC_XPCOM_SHUTDOWN);Services.obs.removeObserver(this,TOPIC_MOZSETTINGS_CHANGED);},updatePcoData(aPcoValue){if(aPcoValue){aPcoValue.forEach(function(pco){this.updatePcoValue(pco);}.bind(this));}},getRestriction(aOrigin){return this._pcoRestrictBG;},notifyStkCommand(){},notifyStkSessionEnd(){},notifyIsimInfoChanged(){},notifyCardStateChanged(){},notifyIccInfoChanged(){let clientId=0;let changed=false;for(let pcoList of this.pcoLists){let icc=gIccService.getIccByServiceId(clientId);let iccInfo=icc&&icc.iccInfo;let iccId=iccInfo&&iccInfo.iccid;if(pcoList.iccId!=iccId){pcoList.iccId=iccId;changed=true;}
clientId++;}
if(!changed){this.debug("iccId no changed.");return;}
if(!this._pcoSettingValue){this.debug("no setting pco value.");return;}
changed=false;for(let pcoSetting of this._pcoSettingValue){for(let pcoList of this.pcoLists){if(pcoSetting.iccId==pcoList.iccId){let settingPcoInfo=new PcoInfo(pcoSetting.pcoId,pcoSetting.pcoValue);let apnType=convertToNetworkType(pcoSetting.networkType);let pcoInfo=pcoList.pco.get(apnType);if(pcoInfo!==undefined&&!pcoInfo.compareInfo(settingPcoInfo)){pcoList.pco.set(apnType,settingPcoInfo);changed=true;break;}}}}
if(changed){this.debug("IccId changed, update the pco.");this.handlePcoValueChange();}},handleError(aErrorMessage){this.debug("There was an error while reading RIL settings.");},handleSettingChanged(aName,aResult){switch(aName){case kSettingDDS:aResult=aResult||0;this.debug("'ril.data.defaultServiceId' is now "+aResult);this.handleDataClientIdChange(aResult);break;case kSettingsPcoTable:this.debug("'ril.data.pco.table' is now "+JSON.stringify(aResult));if(!aResult){break;}
if(JSON.stringify(this._pcoSettingValue)===JSON.stringify(aResult)){this.debug("Setting pco value no change.");break;}
this.handlePcoSettingChange(aResult);break;}},observeSetting(aSettingInfo){if(aSettingInfo){let name=aSettingInfo.name;let result=aSettingInfo.value;this.handleSettingChanged(name,result);}},observe(aSubject,aTopic,aData){switch(aTopic){case TOPIC_ACTIVE_CHANGED:this.debug("active network change.");this.handlePcoValueChange();break;case TOPIC_PREF_CHANGED:if(aData===PREF_RIL_DEBUG_ENABLED){updateDebugFlag();}
break;case TOPIC_XPCOM_SHUTDOWN:this._shutdown();break;}},getSettingValue(aKey){if(!aKey){return;}
if(gSettingsManager){if(DEBUG){this.debug("get "+aKey+" setting.");}
let self=this;gSettingsManager.get(aKey,{resolve:info=>{self.observeSetting(info);},reject:()=>{if(DEBUG){self.debug("get "+aKey+" failed.");}},});}},setSettingValue(aKey,aValue){if(!aKey||!aValue){return;}
if(gSettingsManager){if(DEBUG){this.debug("set "+aKey+" setting with value = "+JSON.stringify(aValue));}
let self=this;gSettingsManager.set([{name:aKey,value:JSON.stringify(aValue)}],{resolve:()=>{if(DEBUG){self.debug(" Set "+aKey+" succedded. ");}},reject:()=>{if(DEBUG){self.debug("Set "+aKey+" failed.");}},});}},addSettingObserver(aKey){if(!aKey){return;}
if(gSettingsManager){if(DEBUG){this.debug("add "+aKey+" setting observer.");}
let self=this;gSettingsManager.addObserver(aKey,this,{resolve:()=>{if(DEBUG){self.debug("observed "+aKey+" successed.");}},reject:()=>{if(DEBUG){self.debug("observed "+aKey+" failed.");}},});}},};function convertToDataCallType(aNetworkType){switch(aNetworkType){case NETWORK_TYPE_MOBILE:return"default";case NETWORK_TYPE_MOBILE_MMS:return"mms";case NETWORK_TYPE_MOBILE_SUPL:return"supl";case NETWORK_TYPE_MOBILE_IMS:return"ims";case NETWORK_TYPE_MOBILE_DUN:return"dun";case NETWORK_TYPE_MOBILE_FOTA:return"fota";case NETWORK_TYPE_MOBILE_IA:return"ia";case NETWORK_TYPE_MOBILE_XCAP:return"xcap";case NETWORK_TYPE_MOBILE_CBS:return"cbs";case NETWORK_TYPE_MOBILE_HIPRI:return"hipri";case NETWORK_TYPE_MOBILE_ECC:return"ecc";default:return"unknown";}}
function convertToNetworkType(aDataCallType){switch(aDataCallType){case"default":return NETWORK_TYPE_MOBILE;case"mms":return NETWORK_TYPE_MOBILE_MMS;case"supl":return NETWORK_TYPE_MOBILE_SUPL;case"ims":return NETWORK_TYPE_MOBILE_IMS;case"dun":return NETWORK_TYPE_MOBILE_DUN;case"fota":return NETWORK_TYPE_MOBILE_FOTA;case"ia":return NETWORK_TYPE_MOBILE_IA;case"xcap":return NETWORK_TYPE_MOBILE_XCAP;case"cbs":return NETWORK_TYPE_MOBILE_CBS;case"hipri":return NETWORK_TYPE_MOBILE_HIPRI;case"ecc":return NETWORK_TYPE_MOBILE_ECC;default:return NETWORK_TYPE_UNKNOWN;}}
var EXPORTED_SYMBOLS=["PCOService"];