//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");const{setTimeout,clearTimeout}=ChromeUtils.import("resource://gre/modules/Timer.jsm");const serviceWorkerManager=Cc["@mozilla.org/serviceworkers/manager;1"].getService(Ci.nsIServiceWorkerManager);const systemMessageService=Cc["@mozilla.org/systemmessage-service;1"].getService(Ci.nsISystemMessageService);this.EXPORTED_SYMBOLS=["ServiceWorkerAssistant"];const DEBUG=true;function debug(aMsg){if(DEBUG){dump(`-*- ServiceWorkerAssistant : ${aMsg}\n`);}}
this.ServiceWorkerAssistant={_timers:[],_hasContentReady:false,

_pendingRegistrations:[],_waitForRegistrations:false,init(){Services.obs.addObserver(this,"ipc:first-content-process-created");},observe(aSubject,aTopic,aData){debug(`Observe ${aTopic}`);this._hasContentReady=true;for(let timer of this._timers){clearTimeout(timer.id);if(!timer.isCallbackExecuted){this._doRegisterServiceWorker(timer.principal,timer.scope,timer.script,timer.updateViaCache);}}
delete this._timers;Services.obs.removeObserver(this,"ipc:first-content-process-created");if(this._waitForRegistrations){this.waitForRegistrations();}},register(aManifestURL,aFeatures,aServiceWorkerOnly){let serviceworker=aFeatures.serviceworker;if(!serviceworker){if(aFeatures.messages){debug(`Skip subscribing system messages for ${aManifestURL} because serviceworker is not defined.`);}
if(aFeatures.activities){debug(`Skip registering activities for ${aManifestURL} because serviceworker is not defined.`);}
return;}
debug(`register ${aManifestURL}, sw only: ${aServiceWorkerOnly}`);let appURI=Services.io.newURI(aManifestURL);let fullpath=function(aPath){return appURI.resolve(aPath?aPath:"/");};let getUpdateViaCache=function(aUpdateViaCache){if(!aUpdateViaCache){return Ci.nsIServiceWorkerRegistrationInfo.UPDATE_VIA_CACHE_IMPORTS;}
switch(aUpdateViaCache){case"imports":return Ci.nsIServiceWorkerRegistrationInfo.UPDATE_VIA_CACHE_IMPORTS;case"all":return Ci.nsIServiceWorkerRegistrationInfo.UPDATE_VIA_CACHE_ALL;case"none":return Ci.nsIServiceWorkerRegistrationInfo.UPDATE_VIA_CACHE_NONE;default:return Ci.nsIServiceWorkerRegistrationInfo.UPDATE_VIA_CACHE_NONE+1;}};let script=fullpath(serviceworker.script_url);let scope;let updateViaCache;if(serviceworker.options){scope=serviceworker.options.scope;updateViaCache=serviceworker.options.update_via_cache;}
scope=fullpath(scope);updateViaCache=getUpdateViaCache(updateViaCache);debug(` script: ${script}`);debug(` scope: ${scope}`);debug(` updateViaCache: ${updateViaCache}`);let ssm=Services.scriptSecurityManager;let principal=ssm.createContentPrincipal(appURI,{});if(!aServiceWorkerOnly){this._subscribeSystemMessages(aFeatures,principal,scope);this._registerActivities(aManifestURL,aFeatures,principal,scope);}
if(this._hasContentReady){this._doRegisterServiceWorker(principal,scope,script,updateViaCache);}else{let last=this._timers.length;this._timers[last]={principal,scope,script,updateViaCache,};this._timers[last].id=setTimeout(()=>{this._doRegisterServiceWorker(principal,scope,script,updateViaCache);this._timers[last].isCallbackExecuted=true;},15000);}},unregister(aManifestURL){debug(`unregister ${aManifestURL}`);let appURI=Services.io.newURI(aManifestURL);let ssm=Services.scriptSecurityManager;let principal=ssm.createContentPrincipal(appURI,{});systemMessageService.unsubscribe(principal);Services.cpmm.sendAsyncMessage("Activities:UnregisterAll",aManifestURL);let scope=serviceWorkerManager.getScopeForUrl(principal,aManifestURL);this._doUnregisterServiceWorker(principal,scope);},update(aManifestURL,aFeatures){debug(`update ${aManifestURL}`);this.unregister(aManifestURL);this.register(aManifestURL,aFeatures);},waitForRegistrations(){if(!this._hasContentReady){this._waitForRegistrations=true;return;}
Promise.allSettled(this._pendingRegistrations).then(()=>{debug(`waitForRegistration done.`);this._pendingRegistrations=[];
Services.obs.notifyObservers(null,"b2g-sw-registration-done");});},_doUnregisterServiceWorker(aPrincipal,aScope){const unregisterCallback={unregisterSucceeded(){debug(`unregister for scope: ${aScope} success!`);},unregisterFailed(){debug(`unregister for scope: ${aScope} failed.`);},QueryInterface:ChromeUtils.generateQI(["nsIServiceWorkerUnregisterCallback",]),};serviceWorkerManager.propagateUnregister(aPrincipal,unregisterCallback,aScope);},_doRegisterServiceWorker(aPrincipal,aScope,aScript,aUpdateViaCache){debug(`_doRegisterServiceWorker: ${aScript}`);this._doUnregisterServiceWorker(aPrincipal,aScope);let promise=serviceWorkerManager.register(aPrincipal,aScope,aScript,aUpdateViaCache).then(swRegInfo=>{debug(`register ${aScript} success!`);},err=>{debug(`register ${aScript} failed for error ${err}`);if(err.name==="TypeError"){
Services.qms.clearStoragesForPrincipal(aPrincipal,"default","cache");return serviceWorkerManager.register(aPrincipal,aScope,aScript,aUpdateViaCache).then(()=>debug(`cache cleaned, re-register ${aScript} success!`),err=>debug(`re-register ${aScript} failed for error ${err}`));}
return Promise.reject("sw register failed");});this._pendingRegistrations.push(promise);},_subscribeSystemMessages(aFeatures,aPrincipal,aScope){debug(`Subscribing system messages...`);let messages=aFeatures.messages?aFeatures.messages:[];messages.forEach(message=>{debug(` message: ${message}`);systemMessageService.subscribe(aPrincipal,message,aScope);});},_registerActivities(aManifestURL,aFeatures,aPrincipal,aScope){debug(`Registering as activity handlers ...`);let activitiesToRegister=[];activitiesToRegister.push.apply(activitiesToRegister,this._createActivitiesToRegister(aManifestURL,aFeatures));if(activitiesToRegister.length){debug(` subscribe activity`);systemMessageService.subscribe(aPrincipal,"activity",aScope);Services.cpmm.sendAsyncMessage("Activities:Register",activitiesToRegister);}},_createActivitiesToRegister(aManifestURL,aFeatures){let activitiesToRegister=[];let activities=aFeatures.activities;if(!activities){return activitiesToRegister;}
let appURI=Services.io.newURI(aManifestURL);let iconURLForSize=function(aSize){let icons=aFeatures.icons;if(!icons){return null;}
let dist=100000;let icon=null;for(let size in icons){let iSize=parseInt(size);if(Math.abs(iSize-aSize)<dist){icon=appURI.resolve(icons[size]);dist=Math.abs(iSize-aSize);}}
return icon;};for(let activity in activities){let entry=activities[activity];if(!Array.isArray(entry)){entry=[entry];}
for(let i=0;i<entry.length;i++){let description=entry[i];debug(` create activity name: ${activity}`);activitiesToRegister.push({manifest:aManifestURL,name:activity,icon:iconURLForSize(128),description,});}}
return activitiesToRegister;},};ServiceWorkerAssistant.init();