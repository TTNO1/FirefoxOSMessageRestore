//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");const{WifiConstants,EAPConstants}=ChromeUtils.import("resource://gre/modules/WifiConstants.jsm");const{AnqpMatcher}=ChromeUtils.import("resource://gre/modules/AnqpUtils.jsm");XPCOMUtils.defineLazyServiceGetter(this,"gIccService","@mozilla.org/icc/iccservice;1","nsIIccService");XPCOMUtils.defineLazyServiceGetter(this,"gDataCallManager","@mozilla.org/datacall/manager;1","nsIDataCallManager");this.EXPORTED_SYMBOLS=["PasspointProvider","PasspointConfig","HomeSp","Credential",];var gDebug=true;function debug(aMsg){if(gDebug){dump("-*- PasspointConfiguration: "+aMsg);}}
this.HomeSp=function(homeSp){if(homeSp){this.fqdn=homeSp.fqdn;this.friendlyName=homeSp.friendlyName;this.matchAllOis=homeSp.matchAllOis;this.matchAnyOis=homeSp.matchAnyOis;this.otherHomePartners=homeSp.otherHomePartners;this.roamingConsortiumOis=homeSp.roamingConsortiumOis;}};this.HomeSp.prototype={fqdn:null,friendlyName:null,matchAllOis:[],matchAnyOis:[],otherHomePartners:[],roamingConsortiumOis:[],};this.Credential=function(credential){if(credential){this.realm=credential.realm;this.imsi=credential.imsi;this.eapType=credential.eapType;}};this.Credential.prototype={realm:null,imsi:null,eapType:EAPConstants.INVALID_EAP,};this.PasspointConfig=function(config){if(config){this.homeSp=new HomeSp(config.homeSp);this.credential=new Credential(config.credential);}};this.PasspointConfig.prototype={homeSp:null,credential:null,};this.PasspointProvider=function(passpointConfig){this.passpointConfig=new PasspointConfig(passpointConfig);if(this.passpointConfig.credential){this.imsi=this.passpointConfig.credential.imsi;this.eapMethod=this.passpointConfig.credential.eapType;}};this.PasspointProvider.prototype={passpointConfig:null,imsi:null,authParam:null,eapMethod:EAPConstants.INVALID_EAP,getMatchingSimImsi(imsi){let simSlot=gDataCallManager.dataDefaultServiceId;let icc=gIccService.getIccByServiceId(simSlot);if(!icc||!icc.iccInfo||!icc.iccInfo.imsi){debug("Invalid icc info");return null;}
let imsiPrefix=imsi.replace("*","");if(icc.iccInfo.imsi.startsWith(imsiPrefix)){return icc.iccInfo.imsi;}
return null;},matchOis(providerOis,roamingConsortiumElement,roamingConsortium,matchAll){if(AnqpMatcher.matchRoamingConsortium(roamingConsortiumElement,providerOis,matchAll)){debug("ANQP RCOI match"+JSON.stringify(roamingConsortiumElement));return true;}
if(!roamingConsortium||!providerOis){return false;}
for(let apOi of roamingConsortium){let matched=false;for(let providerOi of providerOis){if(apOi==providerOi){debug("AP RCOI match: "+apOi);if(!matchAll){return true;}
matched=true;break;}}
if(matchAll&&!matched){return false;}}
return matchAll;},matchFqdnAndRcoi(anqpElements,roamingConsortiums,matchingSimImsi){if(AnqpMatcher.matchDomainName(anqpElements.getDomainName(),this.passpointConfig.homeSp.fqdn,this.imsi,matchingSimImsi)){debug("Domain name "+
this.passpointConfig.homeSp.fqdn+" match: HomeProvider");return WifiConstants.PasspointMatch.HomeProvider;}
if(this.passpointConfig.homeSp.otherHomePartners){for(let otherHomePartner of this.passpointConfig.homeSp.otherHomePartners){if(AnqpMatcher.matchDomainName(anqpElements.getDomainName(),otherHomePartner,null,null)){debug("Other Home Partner "+otherHomePartner+" match: HomeProvider");return WifiConstants.PasspointMatch.HomeProvider;}}}
if(this.passpointConfig.homeSp.matchAllOis){if(this.matchOis(this.passpointConfig.homeSp.matchAllOis,anqpElements.getRoamingConsortiumOIs(),roamingConsortiums,true)){debug("All HomeOI RCOI match: HomeProvider");return WifiConstants.PasspointMatch.HomeProvider;}}else if(this.passpointConfig.homeSp.matchAnyOis){if(this.matchOis(this.passpointConfig.homeSp.matchAllOis,anqpElements.getRoamingConsortiumOIs(),roamingConsortiums,false)){debug("Any HomeOI RCOI match: HomeProvider");return WifiConstants.PasspointMatch.HomeProvider;}}
if(this.matchOis(this.passpointConfig.homeSp.roamingConsortiumOis,anqpElements.getRoamingConsortiumOIs(),roamingConsortiums,false)){debug("ANQP RCOI match: RoamingProvider");return WifiConstants.PasspointMatch.RoamingProvider;}
debug("No domain name or RCOI match");return WifiConstants.PasspointMatch.None;},match(anqpElements,roamingConsortiums){let matchingSimImsi=null;if(this.passpointConfig.credential){matchingSimImsi=this.getMatchingSimImsi(this.imsi);if(!matchingSimImsi){debug("No SIM card with IMSI "+
this.passpointConfig.credential.imsi+"is installed");return WifiConstants.PasspointMatch.None;}} 
let providerMatch=this.matchFqdnAndRcoi(anqpElements,roamingConsortiums,matchingSimImsi);if(providerMatch==WifiConstants.PasspointMatch.None&&AnqpMatcher.matchThreeGPPNetwork(anqpElements.getCellularNetwork(),this.imsi,matchingSimImsi)){debug("Final RoamingProvider match with 3GPP network");return WifiConstants.PasspointMatch.RoamingProvider;}
let realmMatch=AnqpMatcher.matchNAIRealm(anqpElements.getNaiRealmList(),this.passpointConfig.credential.realm);if(!realmMatch){debug("No NAI realm match, final match: "+providerMatch);return providerMatch;}
debug("NAI realm match with "+this.passpointConfig.credential.realm);if(providerMatch==WifiConstants.PasspointMatch.None){providerMatch=WifiConstants.PasspointMatch.RoamingProvider;}
debug("Final match: "+providerMatch);return providerMatch;},};