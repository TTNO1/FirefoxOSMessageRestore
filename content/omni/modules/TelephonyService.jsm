//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");XPCOMUtils.defineLazyGetter(this,"RIL",function(){let obj=ChromeUtils.import("resource://gre/modules/ril_consts.js");return obj;});var RIL_DEBUG=ChromeUtils.import("resource://gre/modules/ril_consts_debug.js");XPCOMUtils.defineLazyGetter(this,"console",()=>{let{ConsoleAPI}=ChromeUtils.import("resource://gre/modules/Console.jsm");return new ConsoleAPI({maxLogLevelPref:"dom.telephony.loglevel",prefix:"Telephony",});});const GONK_TELEPHONYSERVICE_CID=Components.ID("{67d26434-d063-4d28-9f48-5b3189788155}");const TELEPHONYCALLINFO_CID=Components.ID("{d9e8b358-a02c-4cf3-9fc7-816c2e8d46e4}");const NS_XPCOM_SHUTDOWN_OBSERVER_ID="xpcom-shutdown";const NS_PREFBRANCH_PREFCHANGE_TOPIC_ID="nsPref:changed";const kPrefDefaultServiceId="dom.telephony.defaultServiceId";const kPrefTwoDigitShortCodes="ussd.exceptioncode";const kPrefRilNumRadioInterfaces="ril.numRadioInterfaces";const kPrefAlwaysTryImsForEcc="ril.alwaysTryImsForEcc";const kPrefImsEnabled="b2g.ims.enabled";const nsITelephonyAudioService=Ci.nsITelephonyAudioService;const nsITelephonyService=Ci.nsITelephonyService;const nsITelephonyCallInfo=Ci.nsITelephonyCallInfo;const nsIMobileConnection=Ci.nsIMobileConnection;const CALL_WAKELOCK_TIMEOUT=5000;
const CDMA_FIRST_CALL_INDEX=1;const CDMA_SECOND_CALL_INDEX=2;const DIAL_ERROR_INVALID_STATE_ERROR="InvalidStateError";const DIAL_ERROR_OTHER_CONNECTION_IN_USE="OtherConnectionInUse";const DIAL_ERROR_BAD_NUMBER=RIL.GECKO_CALL_ERROR_BAD_NUMBER;const DIAL_ERROR_RADIO_NOT_AVAILABLE=RIL.GECKO_ERROR_RADIO_NOT_AVAILABLE;const TONES_GAP_DURATION=70;const EMERGENCY_CALL_DEFAULT_CLIENT_ID=0;const MMI_PROCEDURE_ACTIVATION="*";const MMI_PROCEDURE_DEACTIVATION="#";const MMI_PROCEDURE_INTERROGATION="*#";const MMI_PROCEDURE_REGISTRATION="**";const MMI_PROCEDURE_ERASURE="##";XPCOMUtils.defineConstant(this,"MMI_PROCEDURE_ACTIVATION",MMI_PROCEDURE_ACTIVATION);XPCOMUtils.defineConstant(this,"MMI_PROCEDURE_DEACTIVATION",MMI_PROCEDURE_DEACTIVATION);XPCOMUtils.defineConstant(this,"MMI_PROCEDURE_INTERROGATION",MMI_PROCEDURE_INTERROGATION);XPCOMUtils.defineConstant(this,"MMI_PROCEDURE_REGISTRATION",MMI_PROCEDURE_REGISTRATION);XPCOMUtils.defineConstant(this,"MMI_PROCEDURE_ERASURE",MMI_PROCEDURE_ERASURE);const MMI_SC_CFU="21";const MMI_SC_CF_BUSY="67";const MMI_SC_CF_NO_REPLY="61";const MMI_SC_CF_NOT_REACHABLE="62";const MMI_SC_CF_ALL="002";const MMI_SC_CF_ALL_CONDITIONAL="004";
const MMI_SC_PIN="04";const MMI_SC_PIN2="042";const MMI_SC_PUK="05";const MMI_SC_PUK2="052";const MMI_SC_IMEI="06";const MMI_SC_CALL_WAITING="43";const MMI_SC_CHANGE_PASSWORD="03";const MMI_ZZ_BARRING_SERVICE="330";const MMI_SC_BAOC="33";const MMI_SC_BAOIC="331";const MMI_SC_BAOICxH="332";const MMI_SC_BAIC="35";const MMI_SC_BAICr="351";const MMI_SC_BA_ALL="330";const MMI_SC_BA_MO="333";const MMI_SC_BA_MT="353";const MMI_SC_CLIP="30";const MMI_SC_CLIR="31";const MMI_KS_SC_CALL_BARRING="scCallBarring";const MMI_KS_SC_CALL_FORWARDING="scCallForwarding";const MMI_KS_SC_CLIP="scClip";const MMI_KS_SC_CLIR="scClir";const MMI_KS_SC_CALL_WAITING="scCallWaiting";const MMI_KS_SC_PIN="scPin";const MMI_KS_SC_PIN2="scPin2";const MMI_KS_SC_PUK="scPuk";const MMI_KS_SC_PUK2="scPuk2";const MMI_KS_SC_CHANGE_PASSWORD="scChangePassword";const MMI_KS_SC_IMEI="scImei";const MMI_KS_SC_USSD="scUssd";const MMI_KS_SC_CALL="scCall";const MMI_ERROR_KS_ERROR="emMmiError";const MMI_ERROR_KS_NOT_SUPPORTED="emMmiErrorNotSupported";const MMI_ERROR_KS_INVALID_ACTION="emMmiErrorInvalidAction";const MMI_ERROR_KS_MISMATCH_PIN="emMmiErrorMismatchPin";const MMI_ERROR_KS_MISMATCH_PASSWORD="emMmiErrorMismatchPassword";const MMI_ERROR_KS_BAD_PIN="emMmiErrorBadPin";const MMI_ERROR_KS_BAD_PUK="emMmiErrorBadPuk";const MMI_ERROR_KS_INVALID_PIN="emMmiErrorInvalidPin";const MMI_ERROR_KS_INVALID_PASSWORD="emMmiErrorInvalidPassword";const MMI_ERROR_KS_NEEDS_PUK="emMmiErrorNeedsPuk";const MMI_ERROR_KS_SIM_BLOCKED="emMmiErrorSimBlocked";const MMI_SM_KS_PASSWORD_CHANGED="smPasswordChanged";const MMI_SM_KS_PIN_CHANGED="smPinChanged";const MMI_SM_KS_PIN2_CHANGED="smPin2Changed";const MMI_SM_KS_PIN_UNBLOCKED="smPinUnblocked";const MMI_SM_KS_PIN2_UNBLOCKED="smPin2Unblocked";const MMI_SM_KS_SERVICE_ENABLED="smServiceEnabled";const MMI_SM_KS_SERVICE_ENABLED_FOR="smServiceEnabledFor";const MMI_SM_KS_SERVICE_DISABLED="smServiceDisabled";const MMI_SM_KS_SERVICE_REGISTERED="smServiceRegistered";const MMI_SM_KS_SERVICE_ERASED="smServiceErased";const MMI_SM_KS_SERVICE_INTERROGATED="smServiceInterrogated";const MMI_SM_KS_SERVICE_NOT_PROVISIONED="smServiceNotProvisioned";const MMI_SM_KS_CLIR_PERMANENT="smClirPermanent";const MMI_SM_KS_CLIR_DEFAULT_ON_NEXT_CALL_ON="smClirDefaultOnNextCallOn";const MMI_SM_KS_CLIR_DEFAULT_ON_NEXT_CALL_OFF="smClirDefaultOnNextCallOff";const MMI_SM_KS_CLIR_DEFAULT_OFF_NEXT_CALL_ON="smClirDefaultOffNextCallOn";const MMI_SM_KS_CLIR_DEFAULT_OFF_NEXT_CALL_OFF="smClirDefaultOffNextCallOff";const MMI_SM_KS_CALL_CONTROL="smCallControl";const MMI_KS_SERVICE_CLASS_VOICE="serviceClassVoice";const MMI_KS_SERVICE_CLASS_DATA="serviceClassData";const MMI_KS_SERVICE_CLASS_FAX="serviceClassFax";const MMI_KS_SERVICE_CLASS_SMS="serviceClassSms";const MMI_KS_SERVICE_CLASS_DATA_SYNC="serviceClassDataSync";const MMI_KS_SERVICE_CLASS_DATA_ASYNC="serviceClassDataAsync";const MMI_KS_SERVICE_CLASS_PACKET="serviceClassPacket";const MMI_KS_SERVICE_CLASS_PAD="serviceClassPad";const USSD_SESSION_DONE="DONE";const USSD_SESSION_ONGOING="ONGOING";const USSD_SESSION_CANCELLING="CANCELLING";const MMI_PROC_TO_CF_ACTION={};MMI_PROC_TO_CF_ACTION[MMI_PROCEDURE_ACTIVATION]=Ci.nsIMobileConnection.CALL_FORWARD_ACTION_ENABLE;MMI_PROC_TO_CF_ACTION[MMI_PROCEDURE_DEACTIVATION]=Ci.nsIMobileConnection.CALL_FORWARD_ACTION_DISABLE;MMI_PROC_TO_CF_ACTION[MMI_PROCEDURE_INTERROGATION]=Ci.nsIMobileConnection.CALL_FORWARD_ACTION_QUERY_STATUS;MMI_PROC_TO_CF_ACTION[MMI_PROCEDURE_REGISTRATION]=Ci.nsIMobileConnection.CALL_FORWARD_ACTION_REGISTRATION;MMI_PROC_TO_CF_ACTION[MMI_PROCEDURE_ERASURE]=Ci.nsIMobileConnection.CALL_FORWARD_ACTION_ERASURE;const MMI_SC_TO_CF_REASON={};MMI_SC_TO_CF_REASON[MMI_SC_CFU]=Ci.nsIMobileConnection.CALL_FORWARD_REASON_UNCONDITIONAL;MMI_SC_TO_CF_REASON[MMI_SC_CF_BUSY]=Ci.nsIMobileConnection.CALL_FORWARD_REASON_MOBILE_BUSY;MMI_SC_TO_CF_REASON[MMI_SC_CF_NO_REPLY]=Ci.nsIMobileConnection.CALL_FORWARD_REASON_NO_REPLY;MMI_SC_TO_CF_REASON[MMI_SC_CF_NOT_REACHABLE]=Ci.nsIMobileConnection.CALL_FORWARD_REASON_NOT_REACHABLE;MMI_SC_TO_CF_REASON[MMI_SC_CF_ALL]=Ci.nsIMobileConnection.CALL_FORWARD_REASON_ALL_CALL_FORWARDING;MMI_SC_TO_CF_REASON[MMI_SC_CF_ALL_CONDITIONAL]=Ci.nsIMobileConnection.CALL_FORWARD_REASON_ALL_CONDITIONAL_CALL_FORWARDING;const MMI_SC_TO_LOCK_TYPE={};MMI_SC_TO_LOCK_TYPE[MMI_SC_PIN]=Ci.nsIIcc.CARD_LOCK_TYPE_PIN;MMI_SC_TO_LOCK_TYPE[MMI_SC_PIN2]=Ci.nsIIcc.CARD_LOCK_TYPE_PIN2;MMI_SC_TO_LOCK_TYPE[MMI_SC_PUK]=Ci.nsIIcc.CARD_LOCK_TYPE_PUK;MMI_SC_TO_LOCK_TYPE[MMI_SC_PUK2]=Ci.nsIIcc.CARD_LOCK_TYPE_PUK2;const MMI_PROC_TO_CLIR_ACTION={};MMI_PROC_TO_CLIR_ACTION[MMI_PROCEDURE_ACTIVATION]=Ci.nsIMobileConnection.CLIR_INVOCATION;MMI_PROC_TO_CLIR_ACTION[MMI_PROCEDURE_DEACTIVATION]=Ci.nsIMobileConnection.CLIR_SUPPRESSION;const MMI_SC_TO_CB_PROGRAM={};MMI_SC_TO_CB_PROGRAM[MMI_SC_BAOC]=Ci.nsIMobileConnection.CALL_BARRING_PROGRAM_ALL_OUTGOING;MMI_SC_TO_CB_PROGRAM[MMI_SC_BAOIC]=Ci.nsIMobileConnection.CALL_BARRING_PROGRAM_OUTGOING_INTERNATIONAL;MMI_SC_TO_CB_PROGRAM[MMI_SC_BAOICxH]=Ci.nsIMobileConnection.CALL_BARRING_PROGRAM_OUTGOING_INTERNATIONAL_EXCEPT_HOME;MMI_SC_TO_CB_PROGRAM[MMI_SC_BAIC]=Ci.nsIMobileConnection.CALL_BARRING_PROGRAM_ALL_INCOMING;MMI_SC_TO_CB_PROGRAM[MMI_SC_BAICr]=Ci.nsIMobileConnection.CALL_BARRING_PROGRAM_INCOMING_ROAMING;MMI_SC_TO_CB_PROGRAM[MMI_SC_BA_ALL]=Ci.nsIMobileConnection.CALL_BARRING_PROGRAM_ALL_SERVICE;MMI_SC_TO_CB_PROGRAM[MMI_SC_BA_MO]=Ci.nsIMobileConnection.CALL_BARRING_PROGRAM_OUTGOING_SERVICE;MMI_SC_TO_CB_PROGRAM[MMI_SC_BA_MT]=Ci.nsIMobileConnection.CALL_BARRING_PROGRAM_INCOMING_SERVICE;const CF_ACTION_TO_STATUS_MESSAGE={};CF_ACTION_TO_STATUS_MESSAGE[Ci.nsIMobileConnection.CALL_FORWARD_ACTION_ENABLE]=MMI_SM_KS_SERVICE_ENABLED;CF_ACTION_TO_STATUS_MESSAGE[Ci.nsIMobileConnection.CALL_FORWARD_ACTION_DISABLE]=MMI_SM_KS_SERVICE_DISABLED;CF_ACTION_TO_STATUS_MESSAGE[Ci.nsIMobileConnection.CALL_FORWARD_ACTION_REGISTRATION]=MMI_SM_KS_SERVICE_REGISTERED;CF_ACTION_TO_STATUS_MESSAGE[Ci.nsIMobileConnection.CALL_FORWARD_ACTION_ERASURE]=MMI_SM_KS_SERVICE_ERASED;const LOCK_TYPE_TO_STATUS_MESSAGE={};LOCK_TYPE_TO_STATUS_MESSAGE[Ci.nsIIcc.CARD_LOCK_TYPE_PIN]=MMI_SM_KS_PIN_CHANGED;LOCK_TYPE_TO_STATUS_MESSAGE[Ci.nsIIcc.CARD_LOCK_TYPE_PIN2]=MMI_SM_KS_PIN2_CHANGED;LOCK_TYPE_TO_STATUS_MESSAGE[Ci.nsIIcc.CARD_LOCK_TYPE_PUK]=MMI_SM_KS_PIN_UNBLOCKED;LOCK_TYPE_TO_STATUS_MESSAGE[Ci.nsIIcc.CARD_LOCK_TYPE_PUK2]=MMI_SM_KS_PIN2_UNBLOCKED;const CLIR_ACTION_TO_STATUS_MESSAGE={};CLIR_ACTION_TO_STATUS_MESSAGE[Ci.nsIMobileConnection.CLIR_INVOCATION]=MMI_SM_KS_SERVICE_ENABLED;CLIR_ACTION_TO_STATUS_MESSAGE[Ci.nsIMobileConnection.CLIR_SUPPRESSION]=MMI_SM_KS_SERVICE_DISABLED;const MMI_KS_SERVICE_CLASS_MAPPING={};MMI_KS_SERVICE_CLASS_MAPPING[Ci.nsIMobileConnection.ICC_SERVICE_CLASS_VOICE]=MMI_KS_SERVICE_CLASS_VOICE;MMI_KS_SERVICE_CLASS_MAPPING[Ci.nsIMobileConnection.ICC_SERVICE_CLASS_DATA]=MMI_KS_SERVICE_CLASS_DATA;MMI_KS_SERVICE_CLASS_MAPPING[Ci.nsIMobileConnection.ICC_SERVICE_CLASS_FAX]=MMI_KS_SERVICE_CLASS_FAX;MMI_KS_SERVICE_CLASS_MAPPING[Ci.nsIMobileConnection.ICC_SERVICE_CLASS_SMS]=MMI_KS_SERVICE_CLASS_SMS;MMI_KS_SERVICE_CLASS_MAPPING[Ci.nsIMobileConnection.ICC_SERVICE_CLASS_DATA_SYNC]=MMI_KS_SERVICE_CLASS_DATA_SYNC;MMI_KS_SERVICE_CLASS_MAPPING[Ci.nsIMobileConnection.ICC_SERVICE_CLASS_DATA_ASYNC]=MMI_KS_SERVICE_CLASS_DATA_ASYNC;MMI_KS_SERVICE_CLASS_MAPPING[Ci.nsIMobileConnection.ICC_SERVICE_CLASS_PACKET]=MMI_KS_SERVICE_CLASS_PACKET;MMI_KS_SERVICE_CLASS_MAPPING[Ci.nsIMobileConnection.ICC_SERVICE_CLASS_PAD]=MMI_KS_SERVICE_CLASS_PAD;var ALWAYS_TRY_IMS_FOR_EMERGENCY=false;var IMS_ENABLED=false;var DEBUG;function debug(s){dump("TelephonyService: "+s+"\n");}
XPCOMUtils.defineLazyGetter(this,"gRadioInterfaceLayer",function(){let ril={numRadioInterfaces:0};try{ril=Cc["@mozilla.org/ril;1"].getService(Ci.nsIRadioInterfaceLayer);}catch(e){}
return ril;});XPCOMUtils.defineLazyServiceGetter(this,"gPowerManagerService","@mozilla.org/power/powermanagerservice;1","nsIPowerManagerService");XPCOMUtils.defineLazyServiceGetter(this,"gTelephonyMessenger","@mozilla.org/ril/system-messenger-helper;1","nsITelephonyMessenger");XPCOMUtils.defineLazyServiceGetter(this,"gAudioService","@mozilla.org/telephony/audio-service;1","nsITelephonyAudioService");XPCOMUtils.defineLazyServiceGetter(this,"gGonkMobileConnectionService","@mozilla.org/mobileconnection/mobileconnectionservice;1","nsIGonkMobileConnectionService");XPCOMUtils.defineLazyServiceGetter(this,"gIccService","@mozilla.org/icc/iccservice;1","nsIIccService");XPCOMUtils.defineLazyServiceGetter(this,"gImsRegService","@mozilla.org/mobileconnection/imsregservice;1","nsIImsRegService");XPCOMUtils.defineLazyServiceGetter(this,"gImsPhoneService","@b2g/telephony/ims/imsphoneservice;1","nsIImsPhoneService");XPCOMUtils.defineLazyModuleGetter(this,"gPhoneNumberUtils","resource://gre/modules/PhoneNumberUtils.jsm","PhoneNumberUtils");XPCOMUtils.defineLazyModuleGetters(this,{DialNumberUtils:"resource://gre/modules/DialNumberUtils.jsm",});function TelephonyCallInfo(aCall){this.clientId=aCall.clientId;this.callIndex=aCall.callIndex;this.callState=aCall.state;this.voiceQuality=aCall.voiceQuality||nsITelephonyService.CALL_VOICE_QUALITY_NORMAL;this.disconnectedReason=aCall.disconnectedReason||"";this.number=aCall.number;this.numberPresentation=aCall.numberPresentation;this.name=aCall.name;this.namePresentation=aCall.namePresentation;this.isOutgoing=aCall.isOutgoing;this.isEmergency=aCall.isEmergency;this.isConference=aCall.isConference;this.isSwitchable=aCall.isSwitchable;this.isMergeable=aCall.isMergeable;this.isConferenceParent=aCall.isConferenceParent||false;this.isMarkable=aCall.isMarkable||false;this.isVt=aCall.isVt||false;this.capabilities=aCall.capabilities||Ci.nsITelephonyCallInfo.CAPABILITY_SUPPORTS_NONE;this.videoCallState=aCall.videoCallState||Ci.nsITelephonyCallInfo.STATE_AUDIO_ONLY;this.radioTech=aCall.radioTech||Ci.nsITelephonyCallInfo.RADIO_TECH_CS;this.rttMode=aCall.rttMode||Ci.nsITelephonyService.RTT_MODE_OFF;this.vowifiCallQuality=aCall.vowifiCallQuality||nsITelephonyCallInfo.VOWIFI_QUALITY_NONE;this.verStatus=aCall.verStatus||nsITelephonyCallInfo.VER_NONE;}
TelephonyCallInfo.prototype={QueryInterface:ChromeUtils.generateQI([Ci.nsITelephonyCallInfo]),classID:TELEPHONYCALLINFO_CID, clientId:0,callIndex:0,callState:nsITelephonyService.CALL_STATE_UNKNOWN,voiceQuality:nsITelephonyService.CALL_VOICE_QUALITY_NORMAL,disconnectedReason:"",number:"",numberPresentation:nsITelephonyService.CALL_PRESENTATION_ALLOWED,name:"",namePresentation:nsITelephonyService.CALL_PRESENTATION_ALLOWED,isOutgoing:true,isEmergency:false,isConference:false,isSwitchable:true,isMergeable:true,isVt:false,capabilities:Ci.nsITelephonyCallInfo.CAPABILITY_SUPPORTS_NONE,videoCallState:Ci.nsITelephonyCallInfo.STATE_AUDIO_ONLY,radioTech:Ci.nsITelephonyCallInfo.RADIO_TECH_CS,rttMode:Ci.nsITelephonyService.RTT_MODE_OFF,vowifiCallQuality:nsITelephonyCallInfo.VOWIFI_QUALITY_NONE,};function Call(aClientId,aCallIndex){this.clientId=aClientId;this.callIndex=aCallIndex;}
Call.prototype={clientId:0,callIndex:0,state:nsITelephonyService.CALL_STATE_UNKNOWN,number:"",numberPresentation:nsITelephonyService.CALL_PRESENTATION_ALLOWED,name:"",namePresentation:nsITelephonyService.CALL_PRESENTATION_ALLOWED,isOutgoing:true,isEmergency:false,isConference:false,isSwitchable:true,isMergeable:true,started:null,isConferenceParent:false,isMarkable:false,isVt:false,voiceQuality:nsITelephonyService.CALL_VOICE_QUALITY_NORMAL,capabilities:Ci.nsITelephonyCallInfo.CAPABILITY_SUPPORTS_NONE,videoCallState:Ci.nsITelephonyCallInfo.STATE_AUDIO_ONLY,radioTech:Ci.nsITelephonyCallInfo.RADIO_TECH_CS,vowifiCallQuality:nsITelephonyCallInfo.VOWIFI_QUALITY_NONE,verStatus:nsITelephonyCallInfo.VER_NONE,videoCallProvider:null,isRtt:false,getVideoCallProvider(){if(!this.videoCallProvider){this.videoCallProvider=new VideoCallProvider(this.clientId,this.callIndex);}
return this.videoCallProvider;},isImsCall(){return(this.radioTech===Ci.nsITelephonyCallInfo.RADIO_TECH_PS||this.radioTech===Ci.nsITelephonyCallInfo.RADIO_TECH_WIFI);},};function MobileConnectionListener(){}
MobileConnectionListener.prototype={QueryInterface:ChromeUtils.generateQI([Ci.nsIMobileConnectionListener]), notifyVoiceChanged(){},notifyDataChanged(){},notifyDataError(_message){},notifyCFStateChanged(_action,_reason,_number,_timeSeconds,_serviceClass){},notifyEmergencyCbModeChanged(_active,_timeoutMs){},notifyOtaStatusChanged(_status){},notifyRadioStateChanged(){},notifyClirModeChanged(_mode){},notifyLastKnownNetworkChanged(){},notifyLastKnownHomeNetworkChanged(){},notifyNetworkSelectionModeChanged(){},notifyDeviceIdentitiesChanged(){},notifySignalStrengthChanged(){},notifyModemRestart(_reason){},};function VideoCallProvider(aClientId,aCallIndex){this._clientId=aClientId;this._callIndex=aCallIndex;this._listeners=[];}
VideoCallProvider.prototype={QueryInterface:ChromeUtils.generateQI([Ci.nsIVideocallProvider]),_clientId:null,_callIndex:null,_listeners:null, setCamera(aCameraId){},setPreviewSurface(aProducer,aWidth,aHeight){},setDisplaySurface(aProducer,aWidth,aHeight){},setDeviceOrientation(aRotation){},setZoom(aValue){},sendSessionModifyRequest(aFromProfile,aToProfile){},sendSessionModifyResponse(aResponseProfile){},requestCameraCapabilities(){},registerCallback(aListener){if(this._listeners.includes(aListener)){throw Components.Exception("",Cr.NS_ERROR_UNEXPECTED);}
this._listeners.push(aListener);},unregisterCallback(aListener){let index=this._listeners.indexOf(aListener);if(index>=0){this._listeners.splice(index,1);}},};function TelephonyService(){this._numClients=gRadioInterfaceLayer.numRadioInterfaces;this._listeners=[];this._isDialing=false;this._cachedDialRequest=null;this._currentCalls={};this._audioStates=[];this._ussdSessions=[];this._twoDigitShortCodes=[];this._mobileConnListeners=[];this._initConstByPrefs();this._initImsPhones();this._cdmaCallWaitingNumber=null;this._headsetState=gAudioService.headsetState;gAudioService.registerListener(this);this._applyTtyMode();this.defaultServiceId=0;Services.prefs.addObserver(RIL_DEBUG.PREF_RIL_DEBUG_ENABLED,this);Services.prefs.addObserver(kPrefDefaultServiceId,this);Services.prefs.addObserver(kPrefTwoDigitShortCodes,this);Services.obs.addObserver(this,NS_XPCOM_SHUTDOWN_OBSERVER_ID);for(let i=0;i<this._numClients;++i){this._audioStates[i]=nsITelephonyAudioService.PHONE_STATE_NORMAL;this._ussdSessions[i]=USSD_SESSION_DONE;this._currentCalls[i]={};this._enumerateCallsForClient(i);}
this._updateTwoDigitShortCodes();Services.tm.currentThread.dispatch(()=>{for(let i=0;i<this._numClients;++i){let connection=gGonkMobileConnectionService.getItemByServiceId(i);let listener=new MobileConnectionListener();listener.notifyRadioStateChanged=()=>{if(connection.radioState===Ci.nsIMobileConnection.MOBILE_RADIO_STATE_UNKNOWN||connection.radioState===Ci.nsIMobileConnection.MOBILE_RADIO_STATE_ENABLED){this._sendToRilWorker(i,"getCurrentCalls",null,null);}};connection.registerListener(listener);this._mobileConnListeners[i]=listener;}},Ci.nsIThread.DISPATCH_NORMAL);}
TelephonyService.prototype={classID:GONK_TELEPHONYSERVICE_CID,QueryInterface:ChromeUtils.generateQI([Ci.nsITelephonyService,Ci.nsIGonkTelephonyService,Ci.nsITelephonyAudioListener,Ci.nsIObserver,]),

_callRingWakeLock:null,_callRingWakeLockTimer:null,_ussdSessions:null,_imsPhones:null,_twoDigitShortCodes:null,_mobileConnListeners:null,_acquireCallRingWakeLock(){if(!this._callRingWakeLock){if(DEBUG){debug("Acquiring a CPU wake lock for handling incoming call.");}
this._callRingWakeLock=gPowerManagerService.newWakeLock("cpu");}
if(!this._callRingWakeLockTimer){if(DEBUG){debug("Creating a timer for releasing the CPU wake lock.");}
this._callRingWakeLockTimer=Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);}
if(DEBUG){debug("Setting the timer for releasing the CPU wake lock.");}
this._callRingWakeLockTimer.initWithCallback(this._releaseCallRingWakeLock.bind(this),CALL_WAKELOCK_TIMEOUT,Ci.nsITimer.TYPE_ONE_SHOT);},_releaseCallRingWakeLock(){if(DEBUG){debug("Releasing the CPU wake lock for handling incoming call.");}
if(this._callRingWakeLockTimer){this._callRingWakeLockTimer.cancel();}
if(this._callRingWakeLock){this._callRingWakeLock.unlock();this._callRingWakeLock=null;}},_getClient(aClientId){return gRadioInterfaceLayer.getRadioInterface(aClientId);},_sendToRilWorker(aClientId,aType,aMessage,aCallback){this._getClient(aClientId).sendWorkerMessage(aType,aMessage,aCallback);},_isGsmTechGroup(aType){switch(aType){case null:case"gsm":case"gprs":case"edge":case"umts":case"hsdpa":case"hsupa":case"hspa":case"hspa+":case"lte":case"iwlan":return true;default:return false;}},_isCdmaClient(aClientId){let type=gGonkMobileConnectionService.getItemByServiceId(aClientId).voice.type;return!this._isGsmTechGroup(type);},_isEmergencyOnly(aClientId){return gGonkMobileConnectionService.getItemByServiceId(aClientId).voice.emergencyCallsOnly;},_isRadioOn(aClientId){let connection=gGonkMobileConnectionService.getItemByServiceId(aClientId);return(connection.radioState===nsIMobileConnection.MOBILE_RADIO_STATE_ENABLED);},_isVoWifi(aClientId){let connInfo=gGonkMobileConnectionService.getItemByServiceId(aClientId).data;return(RIL.GECKO_RADIO_TECH.indexOf(connInfo.type)===RIL.NETWORK_CREG_TECH_IWLAN);},_listeners:null,_notifyAllListeners(aMethodName,aArgs){let listeners=this._listeners.slice();for(let listener of listeners){if(!this._listeners.includes(listener)){continue;}
let handler=listener[aMethodName];try{if(handler){handler.apply(listener,aArgs);}}catch(e){debug("listener for "+aMethodName+" threw an exception: "+e);}}},_computeAudioStateForClient(aClientId){let indexes=Object.keys(this._currentCalls[aClientId]);if(!indexes.length){return nsITelephonyAudioService.PHONE_STATE_NORMAL;}
let firstCall=this._currentCalls[aClientId][indexes[0]];if(indexes.length===1&&firstCall.state===nsITelephonyService.CALL_STATE_INCOMING){return nsITelephonyAudioService.PHONE_STATE_RINGTONE;}
return nsITelephonyAudioService.PHONE_STATE_IN_CALL;},_updateAudioState(aClientId){this._audioStates[aClientId]=this._computeAudioStateForClient(aClientId);if(this._audioStates.some(state=>state===nsITelephonyAudioService.PHONE_STATE_IN_CALL)){gAudioService.setPhoneState(nsITelephonyAudioService.PHONE_STATE_IN_CALL);}else if(this._audioStates.some(state=>state===nsITelephonyAudioService.PHONE_STATE_RINGTONE)){gAudioService.setPhoneState(nsITelephonyAudioService.PHONE_STATE_RINGTONE);}else{gAudioService.setPhoneState(nsITelephonyAudioService.PHONE_STATE_NORMAL);}},_formatInternationalNumber(aNumber,aToa){if(aNumber&&aToa==RIL.TOA_INTERNATIONAL&&aNumber[0]!="+"){return"+"+aNumber;}
return aNumber;},_convertRILCallState(aState){switch(aState){case RIL.CALL_STATE_UNKNOWN:return nsITelephonyService.CALL_STATE_UNKNOWN;case RIL.CALL_STATE_ACTIVE:return nsITelephonyService.CALL_STATE_CONNECTED;case RIL.CALL_STATE_HOLDING:return nsITelephonyService.CALL_STATE_HELD;case RIL.CALL_STATE_DIALING:return nsITelephonyService.CALL_STATE_DIALING;case RIL.CALL_STATE_ALERTING:return nsITelephonyService.CALL_STATE_ALERTING;case RIL.CALL_STATE_INCOMING:case RIL.CALL_STATE_WAITING:return nsITelephonyService.CALL_STATE_INCOMING;default:throw new Error("Unknown rilCallState: "+aState);}},_initConstByPrefs(){this._updateDebugFlag();this._updateAlwaysTryImsForEcc();this._updateImsEnable();},_updateDebugFlag(){try{DEBUG=RIL_DEBUG.DEBUG_RIL||Services.prefs.getBoolPref(RIL_DEBUG.PREF_RIL_DEBUG_ENABLED);}catch(e){}},_updateAlwaysTryImsForEcc(){try{ALWAYS_TRY_IMS_FOR_EMERGENCY=Services.prefs.getBoolPref(kPrefAlwaysTryImsForEcc)||ALWAYS_TRY_IMS_FOR_EMERGENCY;}catch(e){ALWAYS_TRY_IMS_FOR_EMERGENCY=true;}},_updateImsEnable(){try{IMS_ENABLED=Services.prefs.getBoolPref(kPrefImsEnabled)||IMS_ENABLED;}catch(e){IMS_ENABLED=false;}},_getDefaultServiceId(){let id=Services.prefs.getIntPref(kPrefDefaultServiceId);let numRil=Services.prefs.getIntPref(kPrefRilNumRadioInterfaces);if(id>=numRil||id<0){id=0;}
return id;},_currentCalls:null,_enumerateCallsForClient(aClientId){if(DEBUG){debug("Enumeration of calls for client "+aClientId);}
this._sendToRilWorker(aClientId,"getCurrentCalls",null,response=>{if(response.errorMsg){return;}
this._currentCalls[aClientId]={};for(let i in response.calls){let call=(this._currentCalls[aClientId][i]=new Call(aClientId,i));this._updateCallFromRil(call,response.calls[i],aClientId);}});},_isTemporaryCLIR(aMmi){return aMmi&&aMmi.serviceCode===MMI_SC_CLIR&&aMmi.dialNumber;},_procedureToCLIRMode(aProcedure){
switch(aProcedure){case MMI_PROCEDURE_ACTIVATION:return Ci.nsIMobileConnection.CLIR_SUPPRESSION;case MMI_PROCEDURE_DEACTIVATION:return Ci.nsIMobileConnection.CLIR_INVOCATION;default:return Ci.nsIMobileConnection.CLIR_DEFAULT;}},_appliedTtyMode:nsITelephonyService.TTY_MODE_OFF,_applyTtyMode(){let ttyMode=this._headsetState==nsITelephonyAudioService.HEADSET_STATE_HEADSET||this._headsetState==nsITelephonyAudioService.HEADSET_STATE_HEADPHONE?gAudioService.ttyMode:nsITelephonyService.TTY_MODE_OFF;if(this._appliedTtyMode==ttyMode){return;}
this._appliedTtyMode=ttyMode;gAudioService.applyTtyMode(ttyMode);for(let clientId=0;clientId<this._numClients;clientId++){this._sendToRilWorker(clientId,"setTtyMode",{ttyMode},aResponse=>{if(aResponse.errorMsg){debug("Failed to set TTY Mode, error: "+aResponse.errorMsg);}});}
gTelephonyMessenger.notifyTtyModeChanged(ttyMode);},defaultServiceId:0,registerListener(aListener){if(this._listeners.includes(aListener)){throw Components.Exception("",Cr.NS_ERROR_UNEXPECTED);}
this._listeners.push(aListener);},unregisterListener(aListener){let index=this._listeners.indexOf(aListener);if(index<0){throw Components.Exception("",Cr.NS_ERROR_UNEXPECTED);}
this._listeners.splice(index,1);},enumerateCalls(aListener){if(DEBUG){debug("Requesting enumeration of calls for callback");}
for(let cid=0;cid<this._numClients;++cid){let calls=this._currentCalls[cid];if(!calls){continue;}
for(let i=0,indexes=Object.keys(calls);i<indexes.length;++i){let call=calls[indexes[i]];let callInfo=new TelephonyCallInfo(call);aListener.enumerateCallState(callInfo);}}
aListener.enumerateCallStateComplete();},_hasCalls(aClientId){return Object.keys(this._currentCalls[aClientId]).length!==0;},_hasCallsOnOtherClient(aClientId){for(let cid=0;cid<this._numClients;++cid){if(cid!==aClientId&&this._hasCalls(cid)){return true;}}
return false;},_numCallsOnLine(aClientId,aRadioTech=-1){let numCalls=0;let hasConference=false;for(let cid in this._currentCalls[aClientId]){let call=this._currentCalls[aClientId][cid];if(aRadioTech!==-1&&call.radioTech!==aRadioTech){continue;}
if(call.isConference){hasConference=true;}else{numCalls++;}}
return hasConference?numCalls+1:numCalls;},_isActive(aClientId){for(let index in this._currentCalls[aClientId]){let call=this._currentCalls[aClientId][index];if(call.state===nsITelephonyService.CALL_STATE_CONNECTED){return true;}}
return false;},_getClientIdForEmergencyCall(){for(let cid=0;cid<this._numClients;++cid){let icc=gIccService.getIccByServiceId(cid);let cardState=icc?icc.cardState:Ci.nsIIcc.CARD_STATE_UNKONWN;if(cardState!==Ci.nsIIcc.CARD_STATE_UNDETECTED&&cardState!==Ci.nsIIcc.CARD_STATE_UNKNOWN){return cid;}}
return EMERGENCY_CALL_DEFAULT_CLIENT_ID;},dial(aClientId,aNumber,aIsDialEmergency,aType,aRttMode,aCallback){if(DEBUG){debug("Dialing "+
(aIsDialEmergency?"emergency ":"")+
aNumber+", clientId: "+
aClientId+", aRttMode: "+
aRttMode);}
 
if(!aIsDialEmergency){aNumber=gPhoneNumberUtils.normalize(aNumber);} 
if(!gPhoneNumberUtils.isPlainPhoneNumber(aNumber)){if(DEBUG){debug("Error: Number '"+aNumber+"' is not viable. Drop.");}
aCallback.notifyError(DIAL_ERROR_BAD_NUMBER);return;}
let isEmergencyNumber=DialNumberUtils.isEmergency(aNumber,aClientId);if(aIsDialEmergency&&!isEmergencyNumber){if(DEBUG){debug("Error: Dial a non-emergency by dialEmergency. Drop.");}
aCallback.notifyError(DIAL_ERROR_BAD_NUMBER);return;}
if(isEmergencyNumber){this._dialCall(aClientId,aNumber,aRttMode,undefined,aCallback);return;}
if(this._isCdmaClient(aClientId)){this._dialCall(aClientId,aNumber,aRttMode,undefined,aCallback);return;}
let mmi=DialNumberUtils.parseMMI(aNumber);if(mmi){if(this._isTemporaryCLIR(mmi)){this._dialCall(aClientId,mmi.dialNumber,aRttMode,this._procedureToCLIRMode(mmi.procedure),aCallback);}else{this._dialMMI(aClientId,mmi,aCallback);}}else if(aNumber[aNumber.length-1]==="#"){ this._dialMMI(aClientId,{fullMMI:aNumber},aCallback);}else if(aNumber.length<=2){ if(this._hasCalls(aClientId)){this._dialInCallMMI(aClientId,aNumber,aRttMode,aCallback);}else if((aNumber.length===2&&aNumber[0]==="1")||this._isTwoDigitShortCode(aNumber)){this._dialCall(aClientId,aNumber,aRttMode,undefined,aCallback);}else{this._dialMMI(aClientId,{fullMMI:aNumber},aCallback);}}else{this._dialCall(aClientId,aNumber,aRttMode,undefined,aCallback);}}, _dialInCallMMI(aClientId,aNumber,aRttMode,aCallback){let mmiCallback={notifyError:()=>aCallback.notifyDialMMIError(MMI_ERROR_KS_ERROR),notifySuccess:()=>aCallback.notifyDialMMISuccess(MMI_SM_KS_CALL_CONTROL),};if(aNumber==="0"){aCallback.notifyDialMMI(MMI_KS_SC_CALL);this._hangUpBackground(aClientId,mmiCallback);}else if(aNumber==="1"){aCallback.notifyDialMMI(MMI_KS_SC_CALL);this._hangUpForeground(aClientId,mmiCallback);}else if(aNumber[0]==="1"&&aNumber.length===2){aCallback.notifyDialMMI(MMI_KS_SC_CALL);if(this._isImsClient(aClientId)){mmiCallback.notifyError();}else{this.hangUpCall(aClientId,parseInt(aNumber[1]),mmiCallback);}}else if(aNumber==="2"){aCallback.notifyDialMMI(MMI_KS_SC_CALL);this._switchActiveCall(aClientId,mmiCallback);}else if(aNumber[0]==="2"&&aNumber.length===2){aCallback.notifyDialMMI(MMI_KS_SC_CALL);if(this._isImsClient(aClientId)){mmiCallback.notifyError();}else{this._separateCallGsm(aClientId,parseInt(aNumber[1]),mmiCallback);}}else if(aNumber==="3"){aCallback.notifyDialMMI(MMI_KS_SC_CALL);this._conferenceCallGsm(aClientId,mmiCallback);}else if(aNumber==="4"){aCallback.notifyDialMMI(MMI_KS_SC_CALL);this._explicitCallTransfer(aClientId,mmiCallback);}else if(this._isTwoDigitShortCode(aNumber)){this._dialCall(aClientId,aNumber,aRttMode,undefined,aCallback);}else{this._dialMMI(aClientId,{fullMMI:aNumber},aCallback);}},_dialCall(aClientId,aNumber,aRttMode,aClirMode=Ci.nsIMobileConnection.CLIR_DEFAULT,aCallback){if(this._isDialing){if(DEBUG){debug("Error: Already has a dialing call.");}
aCallback.notifyError(DIAL_ERROR_INVALID_STATE_ERROR);return;}
if(this._numCallsOnLine(aClientId)>=2){if(DEBUG){debug("Error: Already has more than 2 calls on line.");}
aCallback.notifyError(DIAL_ERROR_INVALID_STATE_ERROR);return;}

if(this._hasCallsOnOtherClient(aClientId)){if(DEBUG){debug("Error: Already has a call on other sim.");}
aCallback.notifyError(DIAL_ERROR_OTHER_CONNECTION_IN_USE);return;}
let isEmergency=DialNumberUtils.isEmergency(aNumber,aClientId);if(!isEmergency){if(!this._isRadioOn(aClientId)&&!this._isVoWifi(aClientId)){if(DEBUG){debug("Error: Dial a normal call when radio off. Drop");}
aCallback.notifyError(DIAL_ERROR_RADIO_NOT_AVAILABLE);return;}}
if(isEmergency){if(aClientId===-1){if(DEBUG){debug("Error: No client has been assigned.");}
aClientId=this._getClientIdForEmergencyCall();}
if(!this._isRadioOn(aClientId)){let connection=gGonkMobileConnectionService.getItemByServiceId(aClientId);let listener=new MobileConnectionListener();listener.notifyRadioStateChanged=()=>{if(this._isRadioOn(aClientId)){this._dialCall(aClientId,aNumber,aRttMode,undefined,aCallback);connection.unregisterListener(listener);}};connection.registerListener(listener);connection.setRadioEnabled(true,{QueryInterface:ChromeUtils.generateQI([Ci.nsIMobileConnectionCallback,]),notifySuccess:()=>{},notifyError:aErrorMsg=>{connection.unregisterListener(listener);aCallback.notifyError(DIAL_ERROR_RADIO_NOT_AVAILABLE);},});return;}}
let options={isEmergency,number:aNumber,rttMode:aRttMode,clirMode:aClirMode,};if(!this._isActive(aClientId)){this._sendDialCallRequest(aClientId,options,aCallback);return;}
if(this._isCdmaClient(aClientId)){this._dialCdmaThreeWayCall(aClientId,options,aCallback);return;}
if(DEBUG){debug("There is an active call. Hold it first before dial.");}
if(this._cachedDialRequest){if(DEBUG){debug("Error: There already is a pending dial request.");}
aCallback.notifyError(DIAL_ERROR_INVALID_STATE_ERROR);return;}
let callback={QueryInterface:ChromeUtils.generateQI([Ci.nsITelephonyCallback]),notifySuccess:()=>{this._cachedDialRequest={clientId:aClientId,options,callback:aCallback,};},notifyError:aErrorMsg=>{if(DEBUG){debug("Error: Fail to automatically hold the active call.");}
aCallback.notifyError(aErrorMsg);},};if(this._isImsClient(aClientId)){this._switchImsActiveCall(aClientId,Ci.nsITelephonyService.CALL_TYPE_VOICE,Ci.nsITelephonyService.RTT_MODE_OFF,callback);}else{this._switchActiveCall(aClientId,callback);}},_dialCdmaThreeWayCall(aClientId,aOptions,aCallback){this._sendToRilWorker(aClientId,"cdmaFlash",{number:aOptions.number},response=>{if(response.errorMsg){aCallback.notifyError(response.errorMsg);return;}
aCallback.notifyDialCallSuccess(aClientId,CDMA_SECOND_CALL_INDEX,aOptions.number,aOptions.isEmergency,nsITelephonyService.RTT_MODE_OFF,nsITelephonyService.CALL_VOICE_QUALITY_NORMAL,nsITelephonyCallInfo.STATE_AUDIO_ONLY,nsITelephonyCallInfo.CAPABILITY_SUPPORTS_NONE,nsITelephonyCallInfo.RADIO_TECH_CS);let childCall=(this._currentCalls[aClientId][CDMA_SECOND_CALL_INDEX]=new Call(aClientId,CDMA_SECOND_CALL_INDEX));childCall.parentId=CDMA_FIRST_CALL_INDEX;childCall.state=nsITelephonyService.CALL_STATE_DIALING;childCall.number=aOptions.number;childCall.isOutgoing=true;childCall.isEmergency=aOptions.isEmergency;childCall.isConference=false;childCall.isSwitchable=false;childCall.isMergeable=true;this._handleCallStateChanged(aClientId,[childCall]);childCall.state=nsITelephonyService.CALL_STATE_CONNECTED;let parentCall=this._currentCalls[aClientId][childCall.parentId];parentCall.childId=CDMA_SECOND_CALL_INDEX;parentCall.state=nsITelephonyService.CALL_STATE_HELD;parentCall.isSwitchable=false;parentCall.isMergeable=true;this._handleCallStateChanged(aClientId,[childCall,parentCall]);});},_sendDialCallRequest(aClientId,aOptions,aCallback){if(DEBUG){debug("_sendDialCallRequest: "+aOptions);}
this._isDialing=true;if(this._isImsClient(aClientId)||this._useImsForEmergency(aOptions.isEmergency,aClientId)){this._dialImsCall(aClientId,aOptions,aCallback);return;}
if(DEBUG){debug("dial cs call");}
this._sendToRilWorker(aClientId,"dial",aOptions,response=>{this._isDialing=false;if(response.errorMsg){this._sendToRilWorker(aClientId,"getFailCause",null,response=>{aCallback.notifyError(response.failCause);});}else{this._ongoingDial={clientId:aClientId,isEmergency:aOptions.isEmergency,rttMode:aOptions.rttMode,callback:aCallback,clirMode:aOptions.clirMode,};}});},_dialMMI(aClientId,aMmi,aCallback){let mmiServiceCode=aMmi?this._serviceCodeToKeyString(aMmi.serviceCode):MMI_KS_SC_USSD;aCallback.notifyDialMMI(mmiServiceCode);if(mmiServiceCode!==MMI_KS_SC_IMEI&&!this._isRadioOn(aClientId)&&!this._isVoWifi(aClientId)){aCallback.notifyDialMMIError(DIAL_ERROR_RADIO_NOT_AVAILABLE);return;}

switch(mmiServiceCode){ case MMI_KS_SC_CALL_FORWARDING:this._callForwardingMMI(aClientId,aMmi,aCallback);break;case MMI_KS_SC_PIN: case MMI_KS_SC_PIN2:this._iccChangeLockMMI(aClientId,aMmi,aCallback);break;case MMI_KS_SC_PUK: case MMI_KS_SC_PUK2:this._iccUnlockMMI(aClientId,aMmi,aCallback);break; case MMI_KS_SC_IMEI:this._getImeiMMI(aClientId,aMmi,aCallback);break; case MMI_KS_SC_CLIP:this._clipMMI(aClientId,aMmi,aCallback);break;case MMI_KS_SC_CLIR:this._clirMMI(aClientId,aMmi,aCallback);break; case MMI_KS_SC_CHANGE_PASSWORD:this._callBarringPasswordMMI(aClientId,aMmi,aCallback);break; case MMI_KS_SC_CALL_BARRING:this._callBarringMMI(aClientId,aMmi,aCallback);break; case MMI_KS_SC_CALL_WAITING:this._callWaitingMMI(aClientId,aMmi,aCallback);break;default:if(this._ussdSessions[aClientId]==USSD_SESSION_ONGOING){this._cancelUSSDInternal(aClientId,aResponse=>{
if(aResponse.errorMsg){aCallback.notifyDialMMIError(aResponse.errorMsg);return;}
this._sendUSSDInternal(aClientId,aMmi.fullMMI,this._defaultMMICallbackHandler.bind(this,aCallback));});return;}
this._sendUSSDInternal(aClientId,aMmi.fullMMI,this._defaultMMICallbackHandler.bind(this,aCallback));break;}},_callForwardingMMI(aClientId,aMmi,aCallback){let connection=gGonkMobileConnectionService.getItemByServiceId(aClientId);let action=MMI_PROC_TO_CF_ACTION[aMmi.procedure];let reason=MMI_SC_TO_CF_REASON[aMmi.serviceCode];let serviceClass=this._siToServiceClass(aMmi.sib);if(action===Ci.nsIMobileConnection.CALL_FORWARD_ACTION_QUERY_STATUS){connection.getCallForwarding(reason,serviceClass,{QueryInterface:ChromeUtils.generateQI([Ci.nsIMobileConnectionCallback,]),notifyGetCallForwardingSuccess(aCount,aResults){aCallback.notifyDialMMISuccessWithCallForwardingOptions(MMI_SM_KS_SERVICE_INTERROGATED,aCount,aResults);},notifyError(aErrorMsg){aCallback.notifyDialMMIError(aErrorMsg);},});}else{let number=aMmi.sia||"";let timeSeconds=aMmi.sic;


 if(aMmi.procedure===MMI_PROCEDURE_ACTIVATION){if(!number){action=Ci.nsIMobileConnection.CALL_FORWARD_ACTION_ENABLE;}else{action=Ci.nsIMobileConnection.CALL_FORWARD_ACTION_REGISTRATION;}}
connection.setCallForwarding(action,reason,number,timeSeconds,serviceClass,{QueryInterface:ChromeUtils.generateQI([Ci.nsIMobileConnectionCallback,]),notifySuccess(){aCallback.notifyDialMMISuccess(CF_ACTION_TO_STATUS_MESSAGE[action]);},notifyError(aErrorMsg){console.log("error msg: "+aErrorMsg);aCallback.notifyDialMMIError(aErrorMsg);},});}},_iccChangeLockMMI(aClientId,aMmi,aCallback){let errorMsg=this._getIccLockMMIError(aMmi);if(errorMsg){aCallback.notifyDialMMIError(errorMsg);return;}
let icc=gIccService.getIccByServiceId(aClientId);let lockType=MMI_SC_TO_LOCK_TYPE[aMmi.serviceCode];icc.changeCardLockPassword(lockType,aMmi.sia,aMmi.sib,{QueryInterface:ChromeUtils.generateQI([Ci.nsIIccCallback]),notifySuccess(){aCallback.notifyDialMMISuccess(LOCK_TYPE_TO_STATUS_MESSAGE[lockType]);},notifyCardLockError(aErrorMsg,aRetryCount){if(aRetryCount<=0){if(lockType===Ci.nsIIcc.CARD_LOCK_TYPE_PIN){aErrorMsg=MMI_ERROR_KS_NEEDS_PUK;}
aCallback.notifyDialMMIError(aErrorMsg);return;}
aCallback.notifyDialMMIErrorWithInfo(MMI_ERROR_KS_BAD_PIN,aRetryCount);},});},_iccUnlockMMI(aClientId,aMmi,aCallback){let errorMsg=this._getIccLockMMIError(aMmi);if(errorMsg){aCallback.notifyDialMMIError(errorMsg);return;}
let icc=gIccService.getIccByServiceId(aClientId);let lockType=MMI_SC_TO_LOCK_TYPE[aMmi.serviceCode];icc.unlockCardLock(lockType,aMmi.sia,aMmi.sib,{QueryInterface:ChromeUtils.generateQI([Ci.nsIIccCallback]),notifySuccess(){aCallback.notifyDialMMISuccess(LOCK_TYPE_TO_STATUS_MESSAGE[lockType]);},notifyCardLockError(aErrorMsg,aRetryCount){if(aRetryCount<=0){if(lockType===Ci.nsIIcc.CARD_LOCK_TYPE_PUK){aErrorMsg=MMI_ERROR_KS_SIM_BLOCKED;}
aCallback.notifyDialMMIError(aErrorMsg);return;}
aCallback.notifyDialMMIErrorWithInfo(MMI_ERROR_KS_BAD_PUK,aRetryCount);},});},_getImeiMMI(aClientId,aMmi,aCallback){let connection=gGonkMobileConnectionService.getItemByServiceId(aClientId);if(!connection.deviceIdentities||!connection.deviceIdentities.imei){aCallback.notifyDialMMIError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}
aCallback.notifyDialMMISuccess(connection.deviceIdentities.imei);},_clipMMI(aClientId,aMmi,aCallback){if(aMmi.procedure!==MMI_PROCEDURE_INTERROGATION){aCallback.notifyDialMMIError(MMI_ERROR_KS_NOT_SUPPORTED);return;}
this._sendToRilWorker(aClientId,"queryCLIP",{},aResponse=>{if(aResponse.errorMsg){aCallback.notifyDialMMIError(aResponse.errorMsg);return;}


 
switch(aResponse.provisioned){case 0:aCallback.notifyDialMMISuccess(MMI_SM_KS_SERVICE_DISABLED);break;case 1:aCallback.notifyDialMMISuccess(MMI_SM_KS_SERVICE_ENABLED);break;default:aCallback.notifyDialMMIError(MMI_ERROR_KS_ERROR);break;}});},_clirMMI(aClientId,aMmi,aCallback){let connection=gGonkMobileConnectionService.getItemByServiceId(aClientId);switch(aMmi.procedure){case MMI_PROCEDURE_INTERROGATION:connection.getCallingLineIdRestriction({QueryInterface:ChromeUtils.generateQI([Ci.nsIMobileConnectionCallback,]),notifyGetClirStatusSuccess(aN,aM){let errorMsg;let statusMessage;switch(aM){case 0:statusMessage=MMI_SM_KS_SERVICE_NOT_PROVISIONED;break;case 1:statusMessage=MMI_SM_KS_CLIR_PERMANENT;break;case 2:errorMsg=MMI_ERROR_KS_ERROR;break;case 3:switch(aN){case 0: case 1:statusMessage=MMI_SM_KS_CLIR_DEFAULT_ON_NEXT_CALL_ON;break;case 2:statusMessage=MMI_SM_KS_CLIR_DEFAULT_ON_NEXT_CALL_OFF;break;default:errorMsg=RIL.GECKO_ERROR_GENERIC_FAILURE;break;}
break;case 4:switch(aN){case 0: case 2:statusMessage=MMI_SM_KS_CLIR_DEFAULT_OFF_NEXT_CALL_OFF;break;case 1:statusMessage=MMI_SM_KS_CLIR_DEFAULT_OFF_NEXT_CALL_ON;break;default:errorMsg=RIL.GECKO_ERROR_GENERIC_FAILURE;break;}
break;default:errorMsg=RIL.GECKO_ERROR_GENERIC_FAILURE;break;}
if(errorMsg){aCallback.notifyDialMMIError(errorMsg);return;}
aCallback.notifyDialMMISuccess(statusMessage);},notifyError(aErrorMsg){aCallback.notifyDialMMIError(aErrorMsg);},});break;case MMI_PROCEDURE_ACTIVATION:case MMI_PROCEDURE_DEACTIVATION:{let clirMode=MMI_PROC_TO_CLIR_ACTION[aMmi.procedure];connection.setCallingLineIdRestriction(clirMode,{QueryInterface:ChromeUtils.generateQI([Ci.nsIMobileConnectionCallback,]),notifySuccess(){aCallback.notifyDialMMISuccess(CLIR_ACTION_TO_STATUS_MESSAGE[clirMode]);},notifyError(aErrorMsg){aCallback.notifyDialMMIError(aErrorMsg);},});break;}
default:aCallback.notifyDialMMIError(MMI_ERROR_KS_NOT_SUPPORTED);break;}},_callBarringPasswordMMI(aClientId,aMmi,aCallback){if(aMmi.procedure!==MMI_PROCEDURE_REGISTRATION&&aMmi.procedure!==MMI_PROCEDURE_ACTIVATION){aCallback.notifyDialMMIError(MMI_ERROR_KS_INVALID_ACTION);return;}
if(aMmi.sia!==""&&aMmi.sia!==MMI_ZZ_BARRING_SERVICE){aCallback.notifyDialMMIError(MMI_ERROR_KS_NOT_SUPPORTED);return;}
let validPassword=aSi=>/^[0-9]{4}$/.test(aSi);if(!validPassword(aMmi.sib)||!validPassword(aMmi.sic)||!validPassword(aMmi.pwd)){aCallback.notifyDialMMIError(MMI_ERROR_KS_INVALID_PASSWORD);return;}
if(aMmi.sic!==aMmi.pwd){aCallback.notifyDialMMIError(MMI_ERROR_KS_MISMATCH_PASSWORD);return;}
let connection=gGonkMobileConnectionService.getItemByServiceId(aClientId);connection.changeCallBarringPassword(aMmi.sib,aMmi.sic,{QueryInterface:ChromeUtils.generateQI([Ci.nsIMobileConnectionCallback]),notifySuccess(){aCallback.notifyDialMMISuccess(MMI_SM_KS_PASSWORD_CHANGED);},notifyError(aErrorMsg){aCallback.notifyDialMMIError(aErrorMsg);},});},_callBarringMMI(aClientId,aMmi,aCallback){let connection=gGonkMobileConnectionService.getItemByServiceId(aClientId);let program=MMI_SC_TO_CB_PROGRAM[aMmi.serviceCode];let password=aMmi.sia||"";let serviceClass=this._siToServiceClass(aMmi.sib);switch(aMmi.procedure){case MMI_PROCEDURE_INTERROGATION:connection.getCallBarring(program,password,serviceClass,{QueryInterface:ChromeUtils.generateQI([Ci.nsIMobileConnectionCallback,]),notifyGetCallBarringSuccess:function(aProgram,aEnabled,aServiceClass){if(!aEnabled){aCallback.notifyDialMMISuccess(MMI_SM_KS_SERVICE_DISABLED);return;}
let services=this._serviceClassToStringArray(aServiceClass);aCallback.notifyDialMMISuccessWithStrings(MMI_SM_KS_SERVICE_ENABLED_FOR,services.length,services);}.bind(this),notifyError(aErrorMsg){aCallback.notifyDialMMIError(aErrorMsg);},});break;case MMI_PROCEDURE_ACTIVATION:case MMI_PROCEDURE_DEACTIVATION:{let enabled=aMmi.procedure===MMI_PROCEDURE_ACTIVATION;connection.setCallBarring(program,enabled,password,serviceClass,{QueryInterface:ChromeUtils.generateQI([Ci.nsIMobileConnectionCallback,]),notifySuccess(){aCallback.notifyDialMMISuccess(enabled?MMI_SM_KS_SERVICE_ENABLED:MMI_SM_KS_SERVICE_DISABLED);},notifyError(aErrorMsg){aCallback.notifyDialMMIError(aErrorMsg);},});break;}
default:aCallback.notifyDialMMIError(MMI_ERROR_KS_NOT_SUPPORTED);break;}},_callWaitingMMI(aClientId,aMmi,aCallback){let connection=gGonkMobileConnectionService.getItemByServiceId(aClientId);switch(aMmi.procedure){case MMI_PROCEDURE_INTERROGATION:connection.getCallWaiting({QueryInterface:ChromeUtils.generateQI([Ci.nsIMobileConnectionCallback,]),notifyGetCallWaitingSuccess:function(aServiceClass){if(aServiceClass===Ci.nsIMobileConnection.ICC_SERVICE_CLASS_NONE){aCallback.notifyDialMMISuccess(MMI_SM_KS_SERVICE_DISABLED);return;}
let services=this._serviceClassToStringArray(aServiceClass);aCallback.notifyDialMMISuccessWithStrings(MMI_SM_KS_SERVICE_ENABLED_FOR,services.length,services);}.bind(this),notifyError(aErrorMsg){aCallback.notifyDialMMIError(aErrorMsg);},});break;case MMI_PROCEDURE_ACTIVATION:case MMI_PROCEDURE_DEACTIVATION:{let enabled=aMmi.procedure===MMI_PROCEDURE_ACTIVATION;let serviceClass=this._siToServiceClass(aMmi.sia);connection.setCallWaiting(enabled,serviceClass,{QueryInterface:ChromeUtils.generateQI([Ci.nsIMobileConnectionCallback,]),notifySuccess(){aCallback.notifyDialMMISuccess(enabled?MMI_SM_KS_SERVICE_ENABLED:MMI_SM_KS_SERVICE_DISABLED);},notifyError(aErrorMsg){aCallback.notifyDialMMIError(aErrorMsg);},});break;}
default:aCallback.notifyDialMMIError(MMI_ERROR_KS_NOT_SUPPORTED);break;}},_serviceCodeToKeyString(aServiceCode){switch(aServiceCode){case MMI_SC_CFU:case MMI_SC_CF_BUSY:case MMI_SC_CF_NO_REPLY:case MMI_SC_CF_NOT_REACHABLE:case MMI_SC_CF_ALL:case MMI_SC_CF_ALL_CONDITIONAL:return MMI_KS_SC_CALL_FORWARDING;case MMI_SC_PIN:return MMI_KS_SC_PIN;case MMI_SC_PIN2:return MMI_KS_SC_PIN2;case MMI_SC_PUK:return MMI_KS_SC_PUK;case MMI_SC_PUK2:return MMI_KS_SC_PUK2;case MMI_SC_IMEI:return MMI_KS_SC_IMEI;case MMI_SC_CLIP:return MMI_KS_SC_CLIP;case MMI_SC_CLIR:return MMI_KS_SC_CLIR;case MMI_SC_BAOC:case MMI_SC_BAOIC:case MMI_SC_BAOICxH:case MMI_SC_BAIC:case MMI_SC_BAICr:case MMI_SC_BA_ALL:case MMI_SC_BA_MO:case MMI_SC_BA_MT:return MMI_KS_SC_CALL_BARRING;case MMI_SC_CALL_WAITING:return MMI_KS_SC_CALL_WAITING;case MMI_SC_CHANGE_PASSWORD:return MMI_KS_SC_CHANGE_PASSWORD;default:return MMI_KS_SC_USSD;}},_siToServiceClass(aSi){if(!aSi){return Ci.nsIMobileConnection.ICC_SERVICE_CLASS_NONE;}
let serviceCode=parseInt(aSi,10);switch(serviceCode){case 10:return(Ci.nsIMobileConnection.ICC_SERVICE_CLASS_SMS+
Ci.nsIMobileConnection.ICC_SERVICE_CLASS_FAX+
Ci.nsIMobileConnection.ICC_SERVICE_CLASS_VOICE);case 11:return Ci.nsIMobileConnection.ICC_SERVICE_CLASS_VOICE;case 12:return(Ci.nsIMobileConnection.ICC_SERVICE_CLASS_SMS+
Ci.nsIMobileConnection.ICC_SERVICE_CLASS_FAX);case 13:return Ci.nsIMobileConnection.ICC_SERVICE_CLASS_FAX;case 16:return Ci.nsIMobileConnection.ICC_SERVICE_CLASS_SMS;case 19:return(Ci.nsIMobileConnection.ICC_SERVICE_CLASS_FAX+
Ci.nsIMobileConnection.ICC_SERVICE_CLASS_VOICE);case 21:return(Ci.nsIMobileConnection.ICC_SERVICE_CLASS_PAD+
Ci.nsIMobileConnection.ICC_SERVICE_CLASS_DATA_ASYNC);case 22:return(Ci.nsIMobileConnection.ICC_SERVICE_CLASS_PACKET+
Ci.nsIMobileConnection.ICC_SERVICE_CLASS_DATA_SYNC);case 25:return Ci.nsIMobileConnection.ICC_SERVICE_CLASS_DATA_ASYNC;case 26:return(Ci.nsIMobileConnection.ICC_SERVICE_CLASS_DATA_SYNC+
Ci.nsIMobileConnection.ICC_SERVICE_CLASS_VOICE);case 99:return Ci.nsIMobileConnection.ICC_SERVICE_CLASS_PACKET;default:return Ci.nsIMobileConnection.ICC_SERVICE_CLASS_NONE;}},_serviceClassToStringArray(aServiceClass){let services=[];for(let mask=Ci.nsIMobileConnection.ICC_SERVICE_CLASS_VOICE;mask<=Ci.nsIMobileConnection.ICC_SERVICE_CLASS_MAX;mask<<=1){if(mask&aServiceClass){services.push(MMI_KS_SERVICE_CLASS_MAPPING[mask]);}}
return services;},_getIccLockMMIError(aMmi){


if(aMmi.procedure!==MMI_PROCEDURE_REGISTRATION){return MMI_ERROR_KS_INVALID_ACTION;}
if(!aMmi.sia||!aMmi.sib||!aMmi.sic){return MMI_ERROR_KS_ERROR;}
if(aMmi.sia.length<4||aMmi.sia.length>8||aMmi.sib.length<4||aMmi.sib.length>8||aMmi.sic.length<4||aMmi.sic.length>8){return MMI_ERROR_KS_INVALID_PIN;}
if(aMmi.sib!=aMmi.sic){return MMI_ERROR_KS_MISMATCH_PIN;}
return null;},_defaultCallbackHandler(aCallback,aResponse){if(aResponse.errorMsg){aCallback.notifyError(aResponse.errorMsg);}else{aCallback.notifySuccess();}},_defaultMMICallbackHandler(aCallback,aResponse){if(aResponse.errorMsg){aCallback.notifyDialMMIError(aResponse.errorMsg);}else{aCallback.notifyDialMMISuccess("");}},_getCallsWithState(aClientId,aState){let calls=[];for(let i in this._currentCalls[aClientId]){let call=this._currentCalls[aClientId][i];if(call.state===aState){calls.push(call);}}
return calls;},_updateCallFromRil(aCall,aRilCall,aClientId){aRilCall.state=this._convertRILCallState(aRilCall.state);aRilCall.number=this._formatInternationalNumber(aRilCall.number,aRilCall.toa);let change=false;const key=["state","number","numberPresentation","name","namePresentation","rttMode","isVt","isConferenceParent","voiceQuality","radioTech","capabilities","vowifiCallQuality","isMarkable","verStatus",];for(let k of key){if(k==="isVt"){aCall[k]|=aRilCall[k];}else if(aCall[k]!=aRilCall[k]){aCall[k]=aRilCall[k];change=true;}}
aCall.isOutgoing=!aRilCall.isMT;aCall.isEmergency=DialNumberUtils.isEmergency(aCall.number,aClientId);if(aCall.rttMode==nsITelephonyService.RTT_MODE_FULL&&aCall.state==nsITelephonyService.CALL_STATE_CONNECTED){aCall.isRtt=true;}
if(!aCall.started&&aCall.state==nsITelephonyService.CALL_STATE_CONNECTED){aCall.started=new Date().getTime();}
return change;},_detectConference(aClientId){


let connectedCalls=this._getCallsWithState(aClientId,nsITelephonyService.CALL_STATE_CONNECTED);let heldCalls=this._getCallsWithState(aClientId,nsITelephonyService.CALL_STATE_HELD);if(connectedCalls.length>=2){return[nsITelephonyService.CALL_STATE_CONNECTED,connectedCalls];}else if(heldCalls.length>=2){return[nsITelephonyService.CALL_STATE_HELD,heldCalls];}
return[nsITelephonyService.CALL_STATE_UNKNOWN,null];},_updateConference(aClientId){let[newConferenceState,conferenceCalls]=this._detectConference(aClientId);if(DEBUG){debug("Conference state: "+newConferenceState);}
let changedCalls=[];let conference=new Set(conferenceCalls);for(let i in this._currentCalls[aClientId]){let call=this._currentCalls[aClientId][i];let isConference=conference.has(call);if(call.isConference!=isConference){call.isConference=isConference;changedCalls.push(call);}}
return[newConferenceState,changedCalls];},sendTones(aClientId,aDtmfChars,aPauseDuration,aToneDuration,aCallback){let timer=Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);let tones=aDtmfChars;let isIms=this._isImsClient(aClientId);let self=this;let playTone=tone=>{if(DEBUG){debug("sendTones playTone: "+tone);}
let run=function(){if(DEBUG){debug("sendTones run: "+tone);}
timer.initWithCallback(()=>{self.stopTone(aClientId);timer.initWithCallback(()=>{if(tones.length===1){if(DEBUG){debug("sendTones success");}
aCallback.notifySuccess();}else{tones=tones.substr(1);playTone(tones[0]);}},TONES_GAP_DURATION,Ci.nsITimer.TYPE_ONE_SHOT);},aToneDuration,Ci.nsITimer.TYPE_ONE_SHOT);};if(isIms){let callback={notifySuccess(){if(DEBUG){debug("sendTones notifySuccess");}
run();},notifyError(aError){if(DEBUG){debug("sendTones notifyError: "+aError);}
aCallback.notifyError(aError);},};this._sendImsTone(aClientId,tone,callback);}else{this._sendToRilWorker(aClientId,"startTone",{dtmfChar:tone},response=>{if(response.errorMsg){aCallback.notifyError(response.errorMsg);return;}
run();});}};timer.initWithCallback(()=>{playTone(tones[0]);},aPauseDuration,Ci.nsITimer.TYPE_ONE_SHOT);},startTone(aClientId,aDtmfChar){if(this._isImsClient(aClientId)){this._startImsTone(aClientId,aDtmfChar);return;}
this._sendToRilWorker(aClientId,"startTone",{dtmfChar:aDtmfChar});},stopTone(aClientId){if(this._isImsClient(aClientId)){this._stopImsTone(aClientId);return;}
this._sendToRilWorker(aClientId,"stopTone");},answerCall(aClientId,aCallIndex,aType,aRttMode,aCallback){let call=this._currentCalls[aClientId][aCallIndex];if(DEBUG){console.log("answerCall state: "+call.state);}
if(!call||call.state!=nsITelephonyService.CALL_STATE_INCOMING){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}
let callNum=Object.keys(this._currentCalls[aClientId]).length;if(callNum!==1){this._switchActiveCall(aClientId,aCallback);}else{if(DEBUG){debug("answerCall isImsCall: "+call.isImsCall());}
if(call.isImsCall()){this._answerImsPhone(aClientId,aCallIndex,aType,aRttMode,aCallback);}else{if(DEBUG){console.log("answerCall sendToRil");}
this._sendToRilWorker(aClientId,"answerCall",null,this._defaultCallbackHandler.bind(this,aCallback));}}},rejectCall(aClientId,aCallIndex,aReason,aCallback){if(DEBUG){debug("rejectCall aCallIndex : "+aCallIndex);}
if(this._isCdmaClient(aClientId)){this._hangUpBackground(aClientId,aCallback);return;}
let call=this._currentCalls[aClientId][aCallIndex];if(!call||call.state!=nsITelephonyService.CALL_STATE_INCOMING){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}
let callNum=Object.keys(this._currentCalls[aClientId]).length;if(callNum!==1){this._hangUpBackground(aClientId,aCallback);}else{call.hangUpLocal=true;if(call.isImsCall()){this._rejectImsCall(aClientId,aCallIndex,aReason,aCallback);}else{this._sendToRilWorker(aClientId,"udub",null,this._defaultCallbackHandler.bind(this,aCallback));}}},hangUpAllCalls(aClientId,aCallback){if(!this._hasCalls(aClientId)){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}
let calls=[];for(let cid in this._currentCalls[aClientId]){let call=this._currentCalls[aClientId][cid];if(call.state!==nsITelephonyService.CALL_STATE_UNKNOWN&&call.state!==nsITelephonyService.CALL_STATE_DISCONNECTED){calls.push(call);}}
if(calls.length<=0){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}
let disconnectCalls=[...new Set(calls)];disconnectCalls.forEach(call=>{call.hangUpLocal=true;if(this._isImsClient(aClientId)){this._hangupImsCall(aClientId,call.callIndex,aCallback);}else{
this._sendToRilWorker(aClientId,"hangUpCall",{callIndex:call.callIndex},this._defaultCallbackHandler.bind(this,aCallback));}});},_hangUpForeground(aClientId,aCallback){let calls=this._getCallsWithState(aClientId,nsITelephonyService.CALL_STATE_CONNECTED);calls.forEach(call=>(call.hangUpLocal=true));if(this._isImsClient(aClientId)){this._hangUpImsForeground(aClientId,aCallback);}else{this._sendToRilWorker(aClientId,"hangUpForeground",null,this._defaultCallbackHandler.bind(this,aCallback));}},_hangUpBackground(aClientId,aCallback){
let waitingCalls=this._getCallsWithState(aClientId,nsITelephonyService.CALL_STATE_INCOMING);let heldCalls=this._getCallsWithState(aClientId,nsITelephonyService.CALL_STATE_HELD);if(waitingCalls.length){waitingCalls.forEach(call=>(call.hangUpLocal=true));}else{heldCalls.forEach(call=>(call.hangUpLocal=true));}
if(this._isImsClient(aClientId)){this._hangUpImsBackground(aClientId,aCallback);}else{this._sendToRilWorker(aClientId,"hangUpBackground",null,this._defaultCallbackHandler.bind(this,aCallback));}},hangUpCall(aClientId,aCallIndex,aReason,aCallback){
aCallIndex=this._currentCalls[aClientId][aCallIndex].parentId||aCallIndex;if(DEBUG){debug("hangUpCall aCallIndex : "+aCallIndex);}
let call=this._currentCalls[aClientId][aCallIndex];call.hangUpLocal=true;if(call.isImsCall()){this._hangupImsCall(aClientId,aCallIndex,aReason,aCallback);}else{this._sendToRilWorker(aClientId,"hangUpCall",{callIndex:aCallIndex},this._defaultCallbackHandler.bind(this,aCallback));}},_switchCall(aClientId,aCallIndex,aCallback,aRequiredState){let call=this._currentCalls[aClientId][aCallIndex];if(!call){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}
if(this._isCdmaClient(aClientId)){this._switchCallCdma(aClientId,aCallIndex,aCallback);}else{this._switchCallGsm(aClientId,aCallIndex,aCallback,aRequiredState);}},_switchCallGsm(aClientId,aCallIndex,aCallback,aRequiredState){let call=this._currentCalls[aClientId][aCallIndex];if(call.state!=aRequiredState){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}
this._switchActiveCall(aClientId,aCallback);},_switchActiveCall(aClientId,aCallback,aCallType=Ci.nsITelephonyService.CALL_TYPE_VOICE,aRttMode=Ci.nsITelephonyService.RTT_MODE_OFF){if(this._isImsClient(aClientId)){this._switchImsActiveCall(aClientId,aCallType,aRttMode,aCallback);}else{this._sendToRilWorker(aClientId,"switchActiveCall",null,this._defaultCallbackHandler.bind(this,aCallback));}},_switchImsActiveCall(aClientId,aCallType,aRttMode,aCallback){if(DEBUG){debug("_switchImsActiveCall");}
let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);let imsCallback=this._createSimpleImsCallback(aCallback);imsPhone.switchActiveCall(aCallType,aRttMode,imsCallback);},_switchCallCdma(aClientId,aCallIndex,aCallback){let call=this._currentCalls[aClientId][aCallIndex];if(!call.isSwitchable){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}
this._sendToRilWorker(aClientId,"cdmaFlash",null,this._defaultCallbackHandler.bind(this,aCallback));},_explicitCallTransfer(aClientId,aCallback){if(this._isImsClient(aClientId)){let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);imsPhone.consultativeTransfer(this._createSimpleImsCallback(aCallback));}else{this._sendToRilWorker(aClientId,"explicitCallTransfer",null,this._defaultCallbackHandler.bind(this,aCallback));}},holdCall(aClientId,aCallIndex,aCallback){this._switchCall(aClientId,aCallIndex,aCallback,nsITelephonyService.CALL_STATE_CONNECTED);},resumeCall(aClientId,aCallIndex,aCallback){this._switchCall(aClientId,aCallIndex,aCallback,nsITelephonyService.CALL_STATE_HELD);},_conferenceCallGsm(aClientId,aCallback){if(this._isImsClient(aClientId)){debug("ims conferenceCall with clientId: "+aClientId);let self=this;let callback={QueryInterface:ChromeUtils.generateQI([Ci.nsIImsPhoneCallback]),notifySuccess(){aCallback.notifySuccess();},notifyError(aError){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);self._notifyAllListeners("notifyConferenceError",[RIL.GECKO_CONF_CALL_ERROR_ADD,aError,]);},};let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);imsPhone.conferenceCall(callback);return;}
this._sendToRilWorker(aClientId,"conferenceCall",null,response=>{if(response.errorMsg){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);this._notifyAllListeners("notifyConferenceError",[RIL.GECKO_CONF_CALL_ERROR_ADD,response.errorMsg,]);return;}
aCallback.notifySuccess();});},_conferenceCallCdma(aClientId,aCallback){for(let index in this._currentCalls[aClientId]){let call=this._currentCalls[aClientId][index];if(!call.isMergeable){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}}
this._sendToRilWorker(aClientId,"cdmaFlash",null,response=>{if(response.errorMsg){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);this._notifyAllListeners("notifyConferenceError",[RIL.GECKO_CONF_CALL_ERROR_ADD,response.errorMsg,]);return;}
let calls=[];for(let index in this._currentCalls[aClientId]){let call=this._currentCalls[aClientId][index];call.state=nsITelephonyService.CALL_STATE_CONNECTED;call.isConference=true;calls.push(call);}
this._handleCallStateChanged(aClientId,calls);aCallback.notifySuccess();});},conferenceCall(aClientId,aCallback){if(Object.keys(this._currentCalls[aClientId]).length<2){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}
debug("conferenceCall");if(this._isCdmaClient(aClientId)){this._conferenceCallCdma(aClientId,aCallback);}else{this._conferenceCallGsm(aClientId,aCallback);}},_separateCallGsm(aClientId,aCallIndex,aCallback){this._sendToRilWorker(aClientId,"separateCall",{callIndex:aCallIndex},response=>{if(response.errorMsg){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);this._notifyAllListeners("notifyConferenceError",[RIL.GECKO_CONF_CALL_ERROR_REMOVE,response.errorMsg,]);return;}
aCallback.notifySuccess();});},_removeCdmaSecondCall(aClientId){let childCall=this._currentCalls[aClientId][CDMA_SECOND_CALL_INDEX];let parentCall=this._currentCalls[aClientId][CDMA_FIRST_CALL_INDEX];this._disconnectCalls(aClientId,[childCall]);parentCall.isConference=false;parentCall.isSwitchable=true;parentCall.isMergeable=true;this._handleCallStateChanged(aClientId,[childCall,parentCall]);},
_separateCallCdma(aClientId,aCallIndex,aCallback){this._sendToRilWorker(aClientId,"cdmaFlash",null,response=>{if(response.errorMsg){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);this._notifyAllListeners("notifyConferenceError",[RIL.GECKO_CONF_CALL_ERROR_REMOVE,response.errorMsg,]);return;}
this._removeCdmaSecondCall(aClientId);aCallback.notifySuccess();});},separateCall(aClientId,aCallIndex,aCallback){let call=this._currentCalls[aClientId][aCallIndex];if(!call||!call.isConference){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}
if(this._isCdmaClient(aClientId)){this._separateCallCdma(aClientId,aCallIndex,aCallback);}else{this._separateCallGsm(aClientId,aCallIndex,aCallback);}},hangUpConference(aClientId,aCallback){if(DEBUG){debug("hangUpConference");}
if(this._isCdmaClient(aClientId)){this._sendToRilWorker(aClientId,"hangUpCall",{callIndex:CDMA_FIRST_CALL_INDEX},this._defaultCallbackHandler.bind(this,aCallback));return;}
if(this._isImsClient(aClientId)){this._hangupImsConference(aClientId,aCallback);return;}
for(let index in this._currentCalls[aClientId]){let call=this._currentCalls[aClientId][index];if(!call.isConference){continue;}
let command=call.state===nsITelephonyService.CALL_STATE_CONNECTED?"hangUpForeground":"hangUpBackground";this._sendToRilWorker(aClientId,command,null,this._defaultCallbackHandler.bind(this,aCallback));return;}
if(DEBUG){debug("hangUpConference: No conference call in modem["+aClientId+"].");}
aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);},_hangupImsConference(aClientId,aCallback){for(let index in this._currentCalls[aClientId]){let call=this._currentCalls[aClientId][index];if(!call.isConferenceParent){continue;}
let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);if(imsPhone){imsPhone.hangupCall(index,nsITelephonyService.CALL_FAIL_NONE,this._createSimpleImsCallback(aCallback));return;}}
if(DEBUG){debug("hangUpConference: No conference call in modem["+aClientId+"].");}
aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);},_switchConference(aClientId,aCallback){if(this._isCdmaClient(aClientId)){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}
this._switchActiveCall(aClientId,aCallback);},holdConference(aClientId,aCallback){this._switchConference(aClientId,aCallback);},resumeConference(aClientId,aCallback){this._switchConference(aClientId,aCallback);},sendUSSD(aClientId,aUssd,aCallback){this._sendUSSDInternal(aClientId,aUssd,this._defaultCallbackHandler.bind(this,aCallback));},_sendUSSDInternal(aClientId,aUssd,aCallback){this._ussdSessions[aClientId]=USSD_SESSION_ONGOING;this._sendToRilWorker(aClientId,"sendUSSD",{ussd:aUssd},aResponse=>{if(aResponse.errorMsg){this._ussdSessions[aClientId]=USSD_SESSION_DONE;}
aCallback(aResponse);});},cancelUSSD(aClientId,aCallback){this._cancelUSSDInternal(aClientId,this._defaultCallbackHandler.bind(this,aCallback));},_cancelUSSDInternal(aClientId,aCallback){this._ussdSessions[aClientId]=USSD_SESSION_CANCELLING;this._sendToRilWorker(aClientId,"cancelUSSD",{},aResponse=>{if(aResponse.errorMsg){this._ussdSessions[aClientId]=USSD_SESSION_ONGOING;}
aCallback(aResponse);});},getVideoCallProvider(aClientId,aCallIndex){if(DEBUG){debug("getVideoCallProvider aCallIndex: "+aCallIndex);}
let call=this._currentCalls[aClientId][aCallIndex];return call.getVideoCallProvider();},sendRttModify(aClientId,aCallIndex,aRttMode,aCallback){let call=this._currentCalls[aClientId][aCallIndex];if(!call.isImsCall()){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}
let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);imsPhone.sendRttModifyRequest(aCallIndex,aRttMode,this._createSimpleImsCallback(aCallback));},sendRttModifyResponse(aClientId,aCallIndex,aStatus,aCallback){let call=this._currentCalls[aClientId][aCallIndex];if(!call.isImsCall()){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}
let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);imsPhone.sendRttModifyResponse(aCallIndex,aStatus,this._createSimpleImsCallback(aCallback));},sendRttMessage(aClientId,aCallIndex,aMessage,aCallback){let call=this._currentCalls[aClientId][aCallIndex];if(!call.isImsCall()||!call.isRtt){aCallback.notifyError(RIL.GECKO_ERROR_GENERIC_FAILURE);return;}
let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);imsPhone.sendRttMessage(aCallIndex,aMessage,this._createSimpleImsCallback(aCallback));},get hacMode(){return gAudioService.hacMode;},set hacMode(aEnabled){gAudioService.hacMode=aEnabled;},get microphoneMuted(){return gAudioService.microphoneMuted;},set microphoneMuted(aMuted){gAudioService.microphoneMuted=aMuted;},get speakerEnabled(){return gAudioService.speakerEnabled;},set speakerEnabled(aEnabled){gAudioService.speakerEnabled=aEnabled;},get ttyMode(){return gAudioService.ttyMode;},set ttyMode(aMode){gAudioService.ttyMode=aMode;this._applyTtyMode();},_notifyCallEnded(aCall){let duration="started"in aCall&&typeof aCall.started=="number"?new Date().getTime()-aCall.started:0;if(!aCall.isConferenceParent){gTelephonyMessenger.notifyCallEnded(aCall.clientId,aCall.number,this._cdmaCallWaitingNumber,aCall.isEmergency,duration,aCall.isOutgoing,aCall.hangUpLocal,aCall.isVt,aCall.radioTech,aCall.isRtt,aCall.verStatus);}
this._cdmaCallWaitingNumber=null;},_disconnectCalls(aClientId,aCalls,aFailCause=RIL.GECKO_CALL_ERROR_NORMAL_CALL_CLEARING){if(DEBUG){debug("_disconnectCalls: "+JSON.stringify(aCalls));}

let disconnectedCalls=aCalls.slice();for(let call in aCalls){while(call.childId){call=this._currentCalls[aClientId][call.childId];disconnectedCalls.push(call);}}
disconnectedCalls=[...new Set(disconnectedCalls)];let callsForStateChanged=[];disconnectedCalls.forEach(call=>{call.state=nsITelephonyService.CALL_STATE_DISCONNECTED;call.disconnectedReason=aFailCause;let parentCall=this._currentCalls[aClientId][call.parentId];if(parentCall){delete parentCall.childId;}
this._notifyCallEnded(call);callsForStateChanged.push(call);delete this._currentCalls[aClientId][call.callIndex];});return callsForStateChanged;},notifyCallRing(){
this._acquireCallRingWakeLock();gTelephonyMessenger.notifyNewCall();},notifyCurrentCalls(aClientId,aCalls){let hasRemovedCalls=()=>{let newIndexes=new Set(Object.keys(aCalls));for(let i in this._currentCalls[aClientId]){if(!newIndexes.has(i)){return true;}}
return false;};if(!hasRemovedCalls()){this._handleCurrentCalls(aClientId,aCalls);}else{if(this._isImsClient(aClientId)){this._getImsLastFailCause(aClientId,cause=>{this._handleCurrentCalls(aClientId,aCalls,cause);});return;}
this._sendToRilWorker(aClientId,"getFailCause",null,response=>{this._handleCurrentCalls(aClientId,aCalls,response.failCause);});}},_handleCurrentCalls(aClientId,aCalls,aFailCause=RIL.GECKO_CALL_ERROR_NORMAL_CALL_CLEARING){if(DEBUG){debug("handleCurrentCalls: "+
JSON.stringify(aCalls)+", failCause: "+
aFailCause);}
let changedCalls=new Set();let removedCalls=new Set();let allIndexes=new Set([...Object.keys(this._currentCalls[aClientId]),...Object.keys(aCalls),]);for(let i of allIndexes){let call=this._currentCalls[aClientId][i];let rilCall=aCalls[i];if(call&&!rilCall){removedCalls.add(call);}else if(call&&rilCall){if(this._updateCallFromRil(call,rilCall,aClientId)){changedCalls.add(call);}}else{this._currentCalls[aClientId][i]=call=new Call(aClientId,i);this._updateCallFromRil(call,rilCall,aClientId);changedCalls.add(call);if(this._ongoingDial&&this._ongoingDial.clientId===aClientId&&call.state!==nsITelephonyService.CALL_STATE_INCOMING){this._ongoingDial.callback.notifyDialCallSuccess(aClientId,i,call.number,this._ongoingDial.isEmergency,this._ongoingDial.rttMode,call.voiceQuality,call.capabilities,call.videoCallState,call.radioTech);this._ongoingDial=null;}}}
if(this._ongoingDial){if(DEBUG){debug("_ongoingDial does not appear in call list, drop it after request getFailCause.");}
let callback=this._ongoingDial.callback;this._sendToRilWorker(aClientId,"getFailCause",null,response=>{callback.notifyError(response.failCause);});this._ongoingDial=null;}

let disconnectedCalls=this._disconnectCalls(aClientId,[...removedCalls],aFailCause);disconnectedCalls.forEach(call=>changedCalls.add(call));let[_newConferenceState,conferenceChangedCalls]=this._updateConference(aClientId);conferenceChangedCalls.forEach(call=>changedCalls.add(call));this._handleCallStateChanged(aClientId,[...changedCalls]);this._updateAudioState(aClientId);if(this._cachedDialRequest&&!this._isActive(aClientId)){if(DEBUG){debug("All calls held. Perform the cached dial request.");}
let request=this._cachedDialRequest;this._sendDialCallRequest(request.clientId,request.options,request.callback);this._cachedDialRequest=null;}},_handleCallStateChanged(_aClientId,aCalls){if(DEBUG){debug("handleCallStateChanged: "+JSON.stringify(aCalls));}
if(aCalls.length===0){return;}
if(aCalls.some(call=>call.state==nsITelephonyService.CALL_STATE_DIALING)){gTelephonyMessenger.notifyNewCall();}
let allInfo=aCalls.map(call=>new TelephonyCallInfo(call));this._notifyAllListeners("callStateChanged",[allInfo.length,allInfo]);},notifyCdmaCallWaiting(aClientId,aCall){
this._acquireCallRingWakeLock();let call=this._currentCalls[aClientId][CDMA_SECOND_CALL_INDEX];if(call){
this._removeCdmaSecondCall(aClientId);}
this._cdmaCallWaitingNumber=aCall.number;this._notifyAllListeners("notifyCdmaCallWaiting",[aClientId,aCall.number,aCall.numberPresentation,aCall.name,aCall.namePresentation,]);},notifySupplementaryService(aClientId,aNotificationType,aCode,aIndex,aType,aNumber){if(DEBUG){debug("notifySupplementaryService for "+
aClientId+": "+" (notificationType : "+
aNotificationType+" code : "+
aCode+" index : "+
aIndex+" type : "+
aType+" number : "+
aNumber+")");}
this._notifyAllListeners("supplementaryServiceNotification",[aClientId,aNotificationType,aCode,aIndex,aType,aNumber,]);},notifySrvccState(aClientId,aState){if(DEBUG){debug("notifySrvccState for "+
aClientId+": "+" (aState : "+
aState+")");}
this._notifyAllListeners("notifySrvccState",[aClientId,aState]);},notifyUssdReceived(aClientId,aMessage,aSessionEnded){if(DEBUG){debug("notifyUssdReceived for "+
aClientId+": "+
aMessage+" (sessionEnded : "+
aSessionEnded+")");}
let oldSession=this._ussdSessions[aClientId];this._ussdSessions[aClientId]=aSessionEnded?USSD_SESSION_DONE:USSD_SESSION_ONGOING;


if(oldSession!=USSD_SESSION_ONGOING&&this._ussdSessions[aClientId]!=USSD_SESSION_ONGOING&&!aMessage){return;}
gTelephonyMessenger.notifyUssdReceived(aClientId,aMessage,aSessionEnded);},notifyRingbackTone(aClientId,aPlayRingbackTone){this._notifyAllListeners("notifyRingbackTone",[aPlayRingbackTone]);},_headsetState:nsITelephonyAudioService.HEADSET_STATE_OFF,notifyHeadsetStateChanged(aState){this._headsetState=aState;this._applyTtyMode();},notifyTtyModeReceived(aClientId,aMode){this._notifyAllListeners("notifyTtyModeReceived",[aMode]);},notifyTelephonyCoverageLosing(aClientId,aType){this._notifyAllListeners("notifyTelephonyCoverageLosing",[aType]);},notifyRttModifyRequestReceived(aClientId,aCallIndex,aRttMode){this._notifyAllListeners("notifyRttModifyRequestReceived",[aClientId,aCallIndex,aRttMode,]);},notifyRttModifyResponseReceived(aClientId,aCallIndex,aStatus){this._notifyAllListeners("notifyRttModifyResponseReceived",[aClientId,aCallIndex,aStatus,]);},notifyRttMessageReceived(aClientId,aCallIndex,aMessage){this._notifyAllListeners("notifyRttMessageReceived",[aClientId,aCallIndex,aMessage,]);},observe(aSubject,aTopic,aData){switch(aTopic){case NS_PREFBRANCH_PREFCHANGE_TOPIC_ID:if(aData===RIL_DEBUG.PREF_RIL_DEBUG_ENABLED){this._updateDebugFlag();}else if(aData===kPrefDefaultServiceId){this.defaultServiceId=this._getDefaultServiceId();}else if(aData===kPrefTwoDigitShortCodes){this._updateTwoDigitShortCodes();}else if(aData==kPrefAlwaysTryImsForEcc){this._updateAlwaysTryImsForEcc();}
break;case NS_XPCOM_SHUTDOWN_OBSERVER_ID:this._releaseCallRingWakeLock();gAudioService.unregisterListener(this);Services.obs.removeObserver(this,NS_XPCOM_SHUTDOWN_OBSERVER_ID);Services.prefs.removeObserver(RIL_DEBUG.PREF_RIL_DEBUG_ENABLED,this);Services.prefs.removeObserver(kPrefDefaultServiceId,this);Services.prefs.removeObserver(kPrefTwoDigitShortCodes,this);for(let i=0;i<this._mobileConnListeners.length;i++){let connection=gGonkMobileConnectionService.getItemByServiceId(i);connection.unregisterListener(this._mobileConnListeners[i]);}
this._mobileConnListeners=[];break;}}, _isImsClient(aClientId){if(DEBUG){debug("_isIms: "+aClientId);}
let imsHandler=gImsRegService.getHandlerByServiceId(aClientId);if(!imsHandler){if(DEBUG){debug("_isIms no imsHandler ");}
return false;}
if(DEBUG){debug("_isIms enabled: "+imsHandler.enabled);debug("_isIms capability: "+imsHandler.capability);}
let isIms=imsHandler.enabled&&imsHandler.capability>Ci.nsIImsRegHandler.IMS_CAPABILITY_UNKNOWN;if(DEBUG){debug("_isIms call ims: "+isIms);}
return isIms;},_dialImsCall(aClientId,aOptions,aCallback){let imsPhone=this._imsPhones[aClientId];let dialRequest={QueryInterface:ChromeUtils.generateQI([Ci.nsIImsPhoneDialRequest]),serviceId:aClientId,number:aOptions.number,isEmergency:aOptions.isEmergency,type:aOptions.type,rttMode:aOptions.rttMode,clirMode:aOptions.clirMode,};let self=this;let imsCallback=this._createImsCallback(()=>{self._isDialing=false;if(DEBUG){console.log("_dialImsCall success");}
self._ongoingDial={clientId:aClientId,isEmergency:aOptions.isEmergency,rttMode:aOptions.rttMode,clirMode:aOptions.clirMode,callback:aCallback,};},aError=>{self._isDialing=false;if(DEBUG){console.log("_dialImsCall error: "+aError);}
aCallback.notifyError(aError);});imsPhone.dial(dialRequest,imsCallback);},_initImsPhones(){this._imsPhones=[];for(let index=0;index<this._numClients;index++){if(!IMS_ENABLED){return;}
let imsPhone=gImsPhoneService.getPhoneByServiceId(index);this._imsPhones.push(imsPhone);}},_answerImsPhone(aClientId,aCallIndex,aType,aRttMode,aCallback){if(DEBUG){console.log("_answerImsPhone: "+aCallIndex);}
let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);imsPhone.answerCall(aCallIndex,aType,aRttMode,this._createSimpleImsCallback(aCallback));},_rejectImsCall(aClientId,aCallIndex,aReason,aCallback){if(DEBUG){console.log("_rejectImsCall: "+aCallIndex);}
let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);if(DEBUG){console.log("_rejectImsCall with phone: "+imsPhone);}
imsPhone.rejectCall(aCallIndex,aReason,this._createSimpleImsCallback(aCallback));},_hangupImsCall(aClientId,aCallIndex,aReason,aCallback){if(DEBUG){console.log("_hangupImsCall: "+aCallIndex);}
let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);imsPhone.hangupCall(aCallIndex,aReason,this._createSimpleImsCallback(aCallback));},_getImsLastFailCause(aClientId,aCallback){let callback={QueryInterface:ChromeUtils.generateQI([Ci.nsIImsGetFailCauseCallback]),notifyFailCause(aCause){aCallback(aCause);},};let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);imsPhone.getFailCause(callback);},_sendImsTone(aClientId,aDtmfChar,aCallback){if(DEBUG){debug("_sendImsTone");}
let callback={QueryInterface:ChromeUtils.generateQI([Ci.nsIImsPhoneCallback]),notifySuccess(){if(DEBUG){debug("sendImsTone notifySuccess");}
aCallback.notifySuccess();},notifyError(aError){debug("sendImsTone notifyError: "+aError);aCallback.notifyError(aError);},};let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);imsPhone.sendDtmf(aDtmfChar,callback);},_startImsTone(aClientId,aDtmfChar){if(DEBUG){debug("_startTone");}
let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);imsPhone.startDtmf(aDtmfChar);},_stopImsTone(aClientId){if(DEBUG){debug("_stopImsTone");}
let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);imsPhone.stopDtmf();},_createSimpleImsCallback(aCallback){return{QueryInterface:ChromeUtils.generateQI([Ci.nsIImsPhoneCallback]),notifySuccess(){aCallback.notifySuccess();},notifyError(aError){aCallback.notifyError(aError);},};},_createImsCallback(aSuccessCb,aErrorCb){return{QueryInterface:ChromeUtils.generateQI([Ci.nsIImsPhoneCallback]),notifySuccess(){aSuccessCb();},notifyError(aError){aErrorCb(aError);},};},_hangUpImsForeground(aClientId,aCallback){let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);imsPhone.hangupForeground(this._createSimpleImsCallback(aCallback));},_hangUpImsBackground(aClientId,aCallback){let imsPhone=gImsPhoneService.getPhoneByServiceId(aClientId);imsPhone.hangupBackground(this._createSimpleImsCallback(aCallback));},_updateTwoDigitShortCodes(){let twoDigitShortCode=Services.prefs.getCharPref(kPrefTwoDigitShortCodes,"");if(twoDigitShortCode){this._twoDigitShortCodes=twoDigitShortCode.split(",");}},_isTwoDigitShortCode(aNumber){return this._twoDigitShortCodes.includes(aNumber);},_useImsForEmergency(aIsEmergency,aClientId){if(!aIsEmergency){return false;}

if(this._numCallsOnLine(aClientId,Ci.nsITelephonyCallInfo.RADIO_TECH_CS)){if(DEBUG){debug("don't use IMS for ECC due to CS call is ongoing");}
return false;}
return ALWAYS_TRY_IMS_FOR_EMERGENCY&&gImsRegService.isServiceReady();},};var EXPORTED_SYMBOLS=["TelephonyService"];