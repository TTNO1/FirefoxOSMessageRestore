//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";this.EXPORTED_SYMBOLS=["NetworkStatsDB"];var DEBUG=false;function debug(s){if(DEBUG){console.log("-*- NetworkStatsDB: ",s,"\n");}}
const{IndexedDBHelper}=ChromeUtils.import("resource://gre/modules/IndexedDBHelper.jsm");const DB_NAME="net_stats";const DB_VERSION=1;const STATS_STORE_NAME="net_stats_store";const ALARMS_STORE_NAME="net_alarm";
const VALUES_MAX_LENGTH=6*30;const SAMPLE_RATE=1000*60*60*24;this.NetworkStatsDB=function NetworkStatsDB(aDebug){DEBUG=aDebug;debug("Constructor");this.initDBHelper(DB_NAME,DB_VERSION,[STATS_STORE_NAME,ALARMS_STORE_NAME]);};NetworkStatsDB.prototype={__proto__:IndexedDBHelper.prototype,setDebug:function setDebug(aDebug){DEBUG=aDebug;},dbNewTxn:function dbNewTxn(store_name,txn_type,callback,txnCb){function successCb(result){txnCb(null,result);}
function errorCb(error){txnCb(error,null);}
return this.newTxn(txn_type,store_name,callback,successCb,errorCb);},upgradeSchema:function upgradeSchema(aTransaction,aDb,aOldVersion,aNewVersion){debug("upgrade schema from: "+aOldVersion+" to "+aNewVersion+" called!");let db=aDb;let objectStore;let upgradeSteps=[function upgrade0to1(){debug("Upgrade 0 to 1: Create object stores and indexes.");objectStore=db.createObjectStore(ALARMS_STORE_NAME,{keyPath:"id",autoIncrement:true,});objectStore.createIndex("originURL","originURL",{unique:false,});objectStore.createIndex("alarm",["networkId","relativeThreshold"],{unique:false,});let newObjectStore=db.createObjectStore(STATS_STORE_NAME,{keyPath:["origin","serviceType","network","timestamp"],});newObjectStore.createIndex("origin","origin",{unique:false});newObjectStore.createIndex("network","network",{unique:false});newObjectStore.createIndex("networkType","networkType",{unique:false,});newObjectStore.createIndex("serviceType","serviceType",{unique:false,});newObjectStore.createIndex("timestamp","timestamp",{unique:false});newObjectStore.createIndex("rxBytes","rxBytes",{unique:false});newObjectStore.createIndex("txBytes","txBytes",{unique:false});newObjectStore.createIndex("rxTotalBytes","rxTotalBytes",{unique:false,});newObjectStore.createIndex("txTotalBytes","txTotalBytes",{unique:false,});},];let index=aOldVersion;let outer=this;function upgradeNextVersion(){if(index==aNewVersion){debug("Upgrade finished.");return;}
try{var i=index++;debug("Upgrade step: "+i+"\n");upgradeSteps[i].call(outer);}catch(ex){dump("Caught exception "+ex);throw ex;}}
if(aNewVersion>upgradeSteps.length){debug("No migration steps for the new version!");aTransaction.abort();return;}
upgradeNextVersion();},importData:function importData(aStats){let stats={origin:aStats.origin,serviceType:aStats.serviceType,network:[aStats.networkId,aStats.networkType],timestamp:aStats.timestamp,rxBytes:aStats.rxBytes,txBytes:aStats.txBytes,rxSystemBytes:aStats.rxSystemBytes,txSystemBytes:aStats.txSystemBytes,rxTotalBytes:aStats.rxTotalBytes,txTotalBytes:aStats.txTotalBytes,};return stats;},exportData:function exportData(aStats){let stats={origin:aStats.origin,serviceType:aStats.serviceType,networkId:aStats.network[0],networkType:aStats.network[1],timestamp:aStats.timestamp,rxBytes:aStats.rxBytes,txBytes:aStats.txBytes,rxTotalBytes:aStats.rxTotalBytes,txTotalBytes:aStats.txTotalBytes,};return stats;},normalizeDate:function normalizeDate(aDate){
 let timestamp=aDate.getTime()-aDate.getTimezoneOffset()*60*1000;timestamp=Math.floor(timestamp/SAMPLE_RATE)*SAMPLE_RATE;return timestamp;},saveStats:function saveStats(aStats,aResultCb){let isAccumulative=aStats.isAccumulative;let timestamp=this.normalizeDate(aStats.date);let stats={origin:aStats.origin,serviceType:aStats.serviceType,networkId:aStats.networkId,networkType:aStats.networkType,timestamp,rxBytes:isAccumulative?0:aStats.rxBytes,txBytes:isAccumulative?0:aStats.txBytes,rxSystemBytes:isAccumulative?aStats.rxBytes:0,txSystemBytes:isAccumulative?aStats.txBytes:0,rxTotalBytes:isAccumulative?aStats.rxBytes:0,txTotalBytes:isAccumulative?aStats.txBytes:0,};stats=this.importData(stats);this.dbNewTxn(STATS_STORE_NAME,"readwrite",function(aTxn,aStore){debug("Filtered time: "+new Date(timestamp));debug("New stats: "+JSON.stringify(stats));let lowerFilter=[stats.origin,stats.serviceType,stats.network,0];let upperFilter=[stats.origin,stats.serviceType,stats.network,""];let range=IDBKeyRange.bound(lowerFilter,upperFilter,false,false);let request=aStore.openCursor(range,"prev");request.onsuccess=function onsuccess(event){let cursor=event.target.result;if(!cursor){if(!isAccumulative){stats.rxTotalBytes=stats.rxBytes;stats.txTotalBytes=stats.txBytes;this._saveStats(aTxn,aStore,stats);return;}


stats.rxBytes=stats.rxTotalBytes;stats.txBytes=stats.txTotalBytes;
let req=aStore.index("network").openKeyCursor(null,"nextunique");req.onsuccess=function onsuccess(event){let cursor=event.target.result;if(cursor){if(cursor.key[1]==stats.network[1]){stats.rxBytes=0;stats.txBytes=0;this._saveStats(aTxn,aStore,stats);return;}
cursor.continue();return;}
this._saveStats(aTxn,aStore,stats);}.bind(this);return;} 
debug("Last value "+JSON.stringify(cursor.value)); this._removeOldStats(aTxn,aStore,stats.origin,stats.serviceType,stats.network,stats.timestamp); this._processSamplesDiff(aTxn,aStore,cursor,stats,isAccumulative);}.bind(this);}.bind(this),aResultCb);},_processSamplesDiff:function _processSamplesDiff(aTxn,aStore,aLastSampleCursor,aNewSample,aIsAccumulative){let lastSample=aLastSampleCursor.value;let diff=(aNewSample.timestamp-lastSample.timestamp)/SAMPLE_RATE;if(diff%1){
 aTxn.abort();throw new Error("Error processing samples");}
debug("New: "+
aNewSample.timestamp+" - Last: "+
lastSample.timestamp+" - diff: "+
diff);

let rxDiff=0;let txDiff=0;if(aIsAccumulative){rxDiff=aNewSample.rxSystemBytes-lastSample.rxSystemBytes;txDiff=aNewSample.txSystemBytes-lastSample.txSystemBytes;if(rxDiff<0||txDiff<0){rxDiff=aNewSample.rxSystemBytes;txDiff=aNewSample.txSystemBytes;}
aNewSample.rxBytes=rxDiff;aNewSample.txBytes=txDiff;aNewSample.rxTotalBytes=lastSample.rxTotalBytes+rxDiff;aNewSample.txTotalBytes=lastSample.txTotalBytes+txDiff;}else{rxDiff=aNewSample.rxBytes;txDiff=aNewSample.txBytes;}
if(diff==1){

if(!aIsAccumulative){aNewSample.rxTotalBytes=aNewSample.rxBytes+lastSample.rxTotalBytes;aNewSample.txTotalBytes=aNewSample.txBytes+lastSample.txTotalBytes;}
this._saveStats(aTxn,aStore,aNewSample);return;}
if(diff>1){
if(diff>VALUES_MAX_LENGTH){diff=VALUES_MAX_LENGTH;}
let data=[];for(let i=diff-2;i>=0;i--){let time=aNewSample.timestamp-SAMPLE_RATE*(i+1);let sample={origin:aNewSample.origin,serviceType:aNewSample.serviceType,network:aNewSample.network,timestamp:time,rxBytes:0,txBytes:0,rxSystemBytes:lastSample.rxSystemBytes,txSystemBytes:lastSample.txSystemBytes,rxTotalBytes:lastSample.rxTotalBytes,txTotalBytes:lastSample.txTotalBytes,};data.push(sample);}
data.push(aNewSample);this._saveStats(aTxn,aStore,data);return;}
if(diff==0||diff<0){


lastSample.rxBytes+=rxDiff;lastSample.txBytes+=txDiff;lastSample.rxSystemBytes=aNewSample.rxSystemBytes;lastSample.txSystemBytes=aNewSample.txSystemBytes;lastSample.rxTotalBytes+=rxDiff;lastSample.txTotalBytes+=txDiff;debug("Update: "+JSON.stringify(lastSample));aLastSampleCursor.update(lastSample);}},_saveStats:function _saveStats(aTxn,aStore,aNetworkStats){debug("_saveStats: "+JSON.stringify(aNetworkStats));if(Array.isArray(aNetworkStats)){let len=aNetworkStats.length-1;for(let i=0;i<=len;i++){aStore.put(aNetworkStats[i]);}}else{aStore.put(aNetworkStats);}},_removeOldStats:function _removeOldStats(aTxn,aStore,aOrigin,aServiceType,aNetwork,aDate){let filterDate=aDate-(SAMPLE_RATE*VALUES_MAX_LENGTH-1);if(filterDate<0){filterDate=0;}
let lowerFilter=[aOrigin,aServiceType,aNetwork,0];let upperFilter=[aOrigin,aServiceType,aNetwork,filterDate];let range=IDBKeyRange.bound(lowerFilter,upperFilter,false,false);let lastSample=null;let self=this;aStore.openCursor(range).onsuccess=function(event){var cursor=event.target.result;if(cursor){lastSample=cursor.value;cursor.delete();cursor.continue();return;}



let request=aStore.index("network").openCursor(aNetwork);request.onsuccess=function onsuccess(event){let cursor=event.target.result;if(!cursor&&lastSample!=null){let timestamp=new Date();timestamp=self.normalizeDate(timestamp);lastSample.timestamp=timestamp;lastSample.rxBytes=0;lastSample.txBytes=0;self._saveStats(aTxn,aStore,lastSample);}};};},clearInterfaceStats:function clearInterfaceStats(aNetwork,aResultCb){let network=[aNetwork.network.id,aNetwork.network.type];let self=this; this.dbNewTxn(STATS_STORE_NAME,"readwrite",function(aTxn,aStore){let sample=null;let request=aStore.index("network").openCursor(network,"prev");request.onsuccess=function onsuccess(event){let cursor=event.target.result;if(cursor){if(!sample&&cursor.value.origin==""){sample=cursor.value;}
cursor.delete();cursor.continue();return;}
if(sample){let timestamp=new Date();timestamp=self.normalizeDate(timestamp);sample.timestamp=timestamp;sample.origin="";sample.serviceType="";sample.rxBytes=0;sample.txBytes=0;sample.rxTotalBytes=0;sample.txTotalBytes=0;self._saveStats(aTxn,aStore,sample);}};},this._resetAlarms.bind(this,aNetwork.networkId,aResultCb));},clearStats:function clearStats(aNetworks,aResultCb){let index=0;let self=this;let callback=function(aError,aResult){index++;if(!aError&&index<aNetworks.length){self.clearInterfaceStats(aNetworks[index],callback);return;}
aResultCb(aError,aResult);};if(!aNetworks[index]){aResultCb(null,true);return;}
this.clearInterfaceStats(aNetworks[index],callback);},getCurrentStats:function getCurrentStats(aNetwork,aDate,aResultCb){debug("Get current stats for "+JSON.stringify(aNetwork)+" since "+aDate);let network=[aNetwork.id,aNetwork.type];if(aDate){this._getCurrentStatsFromDate(network,aDate,aResultCb);return;}
this._getCurrentStats(network,aResultCb);},_getCurrentStats:function _getCurrentStats(aNetwork,aResultCb){this.dbNewTxn(STATS_STORE_NAME,"readonly",function(txn,store){let request=null;let upperFilter=["default","",aNetwork,Date.now()];let range=IDBKeyRange.upperBound(upperFilter,false);let result={rxBytes:0,txBytes:0,rxTotalBytes:0,txTotalBytes:0,};request=store.openCursor(range,"prev");request.onsuccess=function onsuccess(event){let cursor=event.target.result;if(cursor){result.rxBytes=result.rxTotalBytes=cursor.value.rxTotalBytes;result.txBytes=result.txTotalBytes=cursor.value.txTotalBytes;}
txn.result=result;};},aResultCb);},_getCurrentStatsFromDate:function _getCurrentStatsFromDate(aNetwork,aDate,aResultCb){aDate=new Date(aDate);this.dbNewTxn(STATS_STORE_NAME,"readonly",function(txn,store){let request=null;let start=this.normalizeDate(aDate);let lowerFilter=["default","",aNetwork,start];let upperFilter=["default","",aNetwork,Date.now()];let range=IDBKeyRange.upperBound(upperFilter,false);let result={rxBytes:0,txBytes:0,rxTotalBytes:0,txTotalBytes:0,};request=store.openCursor(range,"prev");request.onsuccess=function onsuccess(event){let cursor=event.target.result;if(cursor){result.rxBytes=result.rxTotalBytes=cursor.value.rxTotalBytes;result.txBytes=result.txTotalBytes=cursor.value.txTotalBytes;}
let timestamp=cursor.value.timestamp;let range=IDBKeyRange.lowerBound(lowerFilter,false);request=store.openCursor(range);request.onsuccess=function onsuccess(event){let cursor=event.target.result;if(cursor){if(cursor.value.timestamp==timestamp){result.rxBytes=cursor.value.rxBytes;result.txBytes=cursor.value.txBytes;}else{result.rxBytes-=cursor.value.rxTotalBytes;result.txBytes-=cursor.value.txTotalBytes;}}
txn.result=result;};};}.bind(this),aResultCb);},find:function find(aResultCb,aOrigin,aServiceType,aNetwork,aStart,aEnd,aAppOrigin){let offset=new Date().getTimezoneOffset()*60*1000;let start=this.normalizeDate(aStart);let end=this.normalizeDate(aEnd);debug("Find samples for origin: "+
aOrigin+" serviceType: "+
aServiceType+" network: "+
JSON.stringify(aNetwork)+" from "+
start+" until "+
end);debug("Start time: "+new Date(start));debug("End time: "+new Date(end));this.dbNewTxn(STATS_STORE_NAME,"readonly",function(aTxn,aStore){let network=[aNetwork.id,aNetwork.type];let lowerFilter=[aOrigin,aServiceType,network,start];let upperFilter=[aOrigin,aServiceType,network,end];let range=IDBKeyRange.bound(lowerFilter,upperFilter,false,false);let data=[];if(!aTxn.result){aTxn.result={};}
aTxn.result.appOrigin=aAppOrigin;aTxn.result.serviceType=aServiceType;aTxn.result.network=aNetwork;aTxn.result.start=aStart;aTxn.result.end=aEnd;aStore.openCursor(range).onsuccess=function(event){var cursor=event.target.result;if(cursor){



if(data.length==0){data.push({rxBytes:cursor.value.rxTotalBytes,txBytes:cursor.value.txTotalBytes,date:new Date(cursor.value.timestamp+offset),});}else{data.push({rxBytes:cursor.value.rxBytes,txBytes:cursor.value.txBytes,date:new Date(cursor.value.timestamp+offset),});}
cursor.continue();return;}
this.fillResultSamples(start+offset,end+offset,data);aTxn.result.data=data;}.bind(this);}.bind(this),aResultCb);},fillResultSamples:function fillResultSamples(aStart,aEnd,aData){if(aData.length==0){aData.push({rxBytes:undefined,txBytes:undefined,date:new Date(aStart),});}
while(aStart<aData[0].date.getTime()){aData.unshift({rxBytes:undefined,txBytes:undefined,date:new Date(aData[0].date.getTime()-SAMPLE_RATE),});}
while(aEnd>aData[aData.length-1].date.getTime()){aData.push({rxBytes:undefined,txBytes:undefined,date:new Date(aData[aData.length-1].date.getTime()+SAMPLE_RATE),});}},getAvailableNetworks:function getAvailableNetworks(aResultCb){this.dbNewTxn(STATS_STORE_NAME,"readonly",function(aTxn,aStore){if(!aTxn.result){aTxn.result=[];}
let request=aStore.index("network").openKeyCursor(null,"nextunique");request.onsuccess=function onsuccess(event){let cursor=event.target.result;if(cursor){aTxn.result.push({id:cursor.key[0],type:cursor.key[1]});cursor.continue();}};},aResultCb);},isNetworkAvailable:function isNetworkAvailable(aNetwork,aResultCb){this.dbNewTxn(STATS_STORE_NAME,"readonly",function(aTxn,aStore){if(!aTxn.result){aTxn.result=false;}
let network=[aNetwork.id,aNetwork.type];let request=aStore.index("network").openKeyCursor(IDBKeyRange.only(network));request.onsuccess=function onsuccess(event){if(event.target.result){aTxn.result=true;}};},aResultCb);},getAvailableServiceTypes:function getAvailableServiceTypes(aResultCb){this.dbNewTxn(STATS_STORE_NAME,"readonly",function(aTxn,aStore){if(!aTxn.result){aTxn.result=[];}
let request=aStore.index("serviceType").openKeyCursor(null,"nextunique");request.onsuccess=function onsuccess(event){let cursor=event.target.result;if(cursor&&cursor.key!=""){aTxn.result.push({serviceType:cursor.key});cursor.continue();}};},aResultCb);},get sampleRate(){return SAMPLE_RATE;},get maxStorageSamples(){return VALUES_MAX_LENGTH;},logAllRecords:function logAllRecords(aResultCb){this.dbNewTxn(STATS_STORE_NAME,"readonly",function(aTxn,aStore){aStore.mozGetAll().onsuccess=function onsuccess(event){aTxn.result=event.target.result;};},aResultCb);},alarmToRecord:function alarmToRecord(aAlarm){let record={networkId:aAlarm.networkId,absoluteThreshold:aAlarm.absoluteThreshold,relativeThreshold:aAlarm.relativeThreshold,startTime:aAlarm.startTime,data:aAlarm.data,originURL:aAlarm.originURL,pageURL:aAlarm.pageURL,};if(aAlarm.id){record.id=aAlarm.id;}
return record;},recordToAlarm:function recordToalarm(aRecord){let alarm={networkId:aRecord.networkId,absoluteThreshold:aRecord.absoluteThreshold,relativeThreshold:aRecord.relativeThreshold,startTime:aRecord.startTime,data:aRecord.data,originURL:aRecord.originURL,pageURL:aRecord.pageURL,};if(aRecord.id){alarm.id=aRecord.id;}
return alarm;},addAlarm:function addAlarm(aAlarm,aResultCb){this.dbNewTxn(ALARMS_STORE_NAME,"readwrite",function(txn,store){debug("Going to add "+JSON.stringify(aAlarm));let record=this.alarmToRecord(aAlarm);store.put(record).onsuccess=function setResult(aEvent){txn.result=aEvent.target.result;debug("Request successful. New record ID: "+txn.result);};}.bind(this),aResultCb);},getFirstAlarm:function getFirstAlarm(aNetworkId,aResultCb){let self=this;this.dbNewTxn(ALARMS_STORE_NAME,"readonly",function(txn,store){debug("Get first alarm for network "+aNetworkId);let lowerFilter=[aNetworkId,0];let upperFilter=[aNetworkId,""];let range=IDBKeyRange.bound(lowerFilter,upperFilter);store.index("alarm").openCursor(range).onsuccess=function onsuccess(event){let cursor=event.target.result;txn.result=null;if(cursor){txn.result=self.recordToAlarm(cursor.value);}};},aResultCb);},removeAlarm:function removeAlarm(aAlarmId,aOriginURL,aResultCb){this.dbNewTxn(ALARMS_STORE_NAME,"readwrite",function(txn,store){debug("Remove alarm "+aAlarmId);store.get(aAlarmId).onsuccess=function onsuccess(event){let record=event.target.result;txn.result=false;if(!record||(aOriginURL&&record.originURL!=aOriginURL)){return;}
store.delete(aAlarmId);txn.result=true;};},aResultCb);},removeAlarms:function removeAlarms(aOriginURL,aResultCb){this.dbNewTxn(ALARMS_STORE_NAME,"readwrite",function(txn,store){debug("Remove alarms of "+aOriginURL);store.index("originURL").openCursor(aOriginURL).onsuccess=function onsuccess(event){let cursor=event.target.result;if(cursor){cursor.delete();cursor.continue();}};},aResultCb);},updateAlarm:function updateAlarm(aAlarm,aResultCb){let self=this;this.dbNewTxn(ALARMS_STORE_NAME,"readwrite",function(txn,store){debug("Update alarm "+aAlarm.id);let record=self.alarmToRecord(aAlarm);store.openCursor(record.id).onsuccess=function onsuccess(event){let cursor=event.target.result;txn.result=false;if(cursor){cursor.update(record);txn.result=true;}};},aResultCb);},getAlarms:function getAlarms(aNetworkId,aOriginURL,aResultCb){let self=this;this.dbNewTxn(ALARMS_STORE_NAME,"readonly",function(txn,store){debug("Get alarms for "+aOriginURL);txn.result=[];store.index("originURL").openCursor(aOriginURL).onsuccess=function onsuccess(event){let cursor=event.target.result;if(!cursor){return;}
if(!aNetworkId||cursor.value.networkId==aNetworkId){txn.result.push(self.recordToAlarm(cursor.value));}
cursor.continue();};},aResultCb);},_resetAlarms:function _resetAlarms(aNetworkId,aResultCb){this.dbNewTxn(ALARMS_STORE_NAME,"readwrite",function(txn,store){debug("Reset alarms for network "+aNetworkId);let lowerFilter=[aNetworkId,0];let upperFilter=[aNetworkId,""];let range=IDBKeyRange.bound(lowerFilter,upperFilter);store.index("alarm").openCursor(range).onsuccess=function onsuccess(event){let cursor=event.target.result;if(cursor){if(cursor.value.startTime){cursor.value.relativeThreshold=cursor.value.threshold;cursor.update(cursor.value);}
cursor.continue();}};},aResultCb);},};