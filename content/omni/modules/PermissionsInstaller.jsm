//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";const DEBUG=false;function debug(aMsg){if(DEBUG){dump(`-*-*- PermissionsInstaller : ${aMsg}\n`);}}
const{AllPossiblePermissions,PermissionsTable,expandPermissions,defaultPermissions,}=ChromeUtils.import("resource://gre/modules/PermissionsTable.jsm");const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");this.EXPORTED_SYMBOLS=["PermissionsInstaller","PermissionsHelper"];const kPermManager=Ci.nsIPermissionManager;const UNKNOWN_ACTION=kPermManager.UNKNOWN_ACTION;const ALLOW_ACTION=kPermManager.ALLOW_ACTION;const DENY_ACTION=kPermManager.DENY_ACTION;const PROMPT_ACTION=kPermManager.PROMPT_ACTION;const PermissionsHelper={getPrincipal(aManifestURL){let uri=Services.io.newURI(aManifestURL);let principal=Services.scriptSecurityManager.createContentPrincipal(uri,{});return principal;},getPermission(aPermName,aManifestURL){debug(`getPermission ${aPermName} for ${aManifestURL}`);let principal=this.getPrincipal(aManifestURL);let result=Services.perms.testExactPermissionFromPrincipal(principal,aPermName);return result;},removePermission(aPermName,aManifestURL){debug(`removePermission ${aPermName} for ${aManifestURL}`);let principal=this.getPrincipal(aManifestURL);Services.perms.removeFromPrincipal(principal,aPermName);},addPermission(aPermName,aManifestURL,aValue){const PERM_VALUES=["unknown","allow","deny","prompt"];debug(`addPermission ${aPermName} for ${aManifestURL}: ${PERM_VALUES[aValue]}`);let principal=this.getPrincipal(aManifestURL);Services.perms.addFromPrincipal(principal,aPermName,aValue);},removeAllForURI(aManifestURL){debug(`removeAllForURI for ${aManifestURL}`);let principal=this.getPrincipal(aManifestURL);let perms=Services.perms.getAllForPrincipal(principal);perms.forEach(perm=>Services.perms.removePermission(perm));},addCoreApp(aOrigin){debug(`add core app: ${aOrigin}`);if(!this.coreApps){this.coreApps={};}
this.coreApps[aOrigin]=true;},isCoreApp(aOrigin){return this.coreApps?!!this.coreApps[aOrigin]:false;},};this.PermissionsInstaller={installPermissions(aFeatures,aManifestURL,aIsReinstall,aOnError){try{if(!aFeatures.permissions&&!aIsReinstall){return;}
if(aIsReinstall){
 if(aFeatures.permissions){let newPermNames=[];for(let permName in aFeatures.permissions){let expandedPermNames=expandPermissions(permName,aFeatures.permissions[permName].access);newPermNames=newPermNames.concat(expandedPermNames);}
for(let idx in AllPossiblePermissions){let permName=AllPossiblePermissions[idx];let index=newPermNames.indexOf(permName);if(index==-1){let permValue=PermissionsHelper.getPermission(permName,aManifestURL);if(permValue==UNKNOWN_ACTION||permValue==DENY_ACTION){ continue;} 
PermissionsHelper.removePermission(permName,aManifestURL);}}}}
let appType="pwa";let isCore=false;let uri=Services.io.newURI(aManifestURL);if(uri.host.endsWith(".localhost")){appType="signed";isCore=aFeatures.core===true;}
defaultPermissions.forEach(permission=>{PermissionsHelper.addPermission(permission,aManifestURL,ALLOW_ACTION);});if(isCore){let appPrincipal=Services.scriptSecurityManager.createContentPrincipalFromOrigin(aManifestURL);PermissionsHelper.addCoreApp(appPrincipal.origin);}
for(let permName in aFeatures.permissions){if(!PermissionsTable[permName]){Cu.reportError(`PermissionsInstaller.jsm: '${permName}' is not a valid app permission name.`);debug(`'${permName}' is not a valid app permission name.`);continue;}
let expandedPermNames=expandPermissions(permName,aFeatures.permissions[permName].access);for(let idx in expandedPermNames){let permValue=PermissionsTable[permName][appType];if(isCore&&PermissionsTable[permName].core!==undefined){permValue=PermissionsTable[permName].core;}
if(permValue==PROMPT_ACTION){



permValue=PermissionsHelper.getPermission(expandedPermNames[idx],aManifestURL);if(permValue===UNKNOWN_ACTION){permValue=PROMPT_ACTION;
 if(PermissionsTable[permName].defaultPromptAction){let defaultPromptAction=PermissionsTable[permName].defaultPromptAction;let index=isCore?"core":appType;if(defaultPromptAction[index]!==undefined){permValue=defaultPromptAction[index];}}}}
PermissionsHelper.addPermission(expandedPermNames[idx],aManifestURL,permValue);if(aManifestURL.startsWith("http://system.localhost")){let systemStartupURL=Services.prefs.getCharPref("b2g.system_startup_url");PermissionsHelper.addPermission(expandedPermNames[idx],systemStartupURL,permValue);}}}}catch(ex){debug(`Caught app install permissions error for ${aManifestURL} : ${ex}`);Cu.reportError(ex);if(aOnError){aOnError();}}},uninstallPermissions(aManifestURL){PermissionsHelper.removeAllForURI(aManifestURL);},};ChromeUtils.registerWindowActor("PermissionsManager",{includeChrome:true,allFrames:true,parent:{moduleURI:"resource://gre/modules/PermissionsManagerParent.jsm",messages:["PermissionsManager:AddPermission","PermissionsManager:GetPermission","PermissionsManager:IsExplicit",],},child:{moduleURI:"resource://gre/modules/PermissionsManagerChild.jsm",},});