//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";const EXPORTED_SYMBOLS=["AlarmProxy"];const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");const REQUEST_CPU_LOCK_TIMEOUT=10*1000;const DEBUG=Services.prefs.getBoolPref("dom.alarm.debug",false);function debug(aMsg){console.log(`AlarmProxy: ${aMsg}`);}
XPCOMUtils.defineLazyServiceGetter(this,"gPowerManagerService","@mozilla.org/power/powermanagerservice;1","nsIPowerManagerService");function AlarmProxy(){DEBUG&&debug("AlarmProxy constructor.");}
AlarmProxy.prototype={add:function add(aUrl,aOptions,aCallback){DEBUG&&debug("add "+JSON.stringify(aOptions)+" "+aUrl);let date=aOptions.date;let ignoreTimezone=!!aOptions.ignoreTimezone;let data=aOptions.data;if(!date){throw Components.Exception("",Cr.NS_ERROR_INVALID_ARG);}
if(data&&aUrl){

try{let sandbox=new Cu.Sandbox(aUrl);sandbox.data=data;data=Cu.evalInSandbox("eval(data)",sandbox);}catch(e){DEBUG&&debug(e);aCallback.onAdd(Cr.NS_ERROR_INVALID_ARG,Cu.cloneInto("data examination in sandbox failed",{}));return;}}
let cpuLock=gPowerManagerService.newWakeLock("cpu");let timer=Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);timer.initWithCallback(()=>{DEBUG&&debug("Request timeout! Release the cpu lock");cpuLock.unlock();},REQUEST_CPU_LOCK_TIMEOUT,Ci.nsITimer.TYPE_ONE_SHOT);let sendMsgName="Alarm:Add";let recvMsgName=`${sendMsgName}:Return`;Services.cpmm.addMessageListener(recvMsgName,function alarmAdd(aMessage){DEBUG&&debug("Receive "+JSON.stringify(aMessage));Services.cpmm.removeMessageListener(recvMsgName,alarmAdd);timer.cancel();cpuLock.unlock();let json=aMessage.json?aMessage.json:{};if(json.success){aCallback.onAdd(Cr.NS_OK,Cu.cloneInto(json.id,{}));}else{aCallback.onAdd(Cr.NS_ERROR_FAILURE,Cu.cloneInto(json.errorMsg,{}));}});Services.cpmm.sendAsyncMessage(sendMsgName,{date,ignoreTimezone,data,url:aUrl,});},remove:function remove(aUrl,aId){DEBUG&&debug("remove "+aId+" "+aUrl);Services.cpmm.sendAsyncMessage("Alarm:Remove",{id:aId,url:aUrl,});},getAll:function getAll(aUrl,aCallback){DEBUG&&debug("getAll "+aUrl);let sendMsgName="Alarm:GetAll";let recvMsgName=`${sendMsgName}:Return`;Services.cpmm.addMessageListener(recvMsgName,function alarmGetAll(aMessage){Services.cpmm.removeMessageListener(recvMsgName,alarmGetAll);let json=aMessage.json?aMessage.json:{};if(json.success){let alarms=[];json.alarms.forEach(function trimAlarmInfo(aAlarm){let alarm={id:aAlarm.id,date:aAlarm.date,ignoreTimezone:aAlarm.ignoreTimezone,data:aAlarm.data,};alarms.push(alarm);});aCallback.onGetAll(Cr.NS_OK,Cu.cloneInto(alarms,{}));}else{aCallback.onGetAll(Cr.NS_ERROR_FAILURE,Cu.cloneInto(json.errorMsg,{}));}});Services.cpmm.sendAsyncMessage(sendMsgName,{url:aUrl,});},contractID:"@mozilla.org/alarm/proxy;1",classID:Components.ID("{736b46dc-9bea-4f75-a567-0bec41980f0c}"),QueryInterface:ChromeUtils.generateQI([Ci.nsIAlarmProxy,Ci.nsISupportsWeakReference,]),};