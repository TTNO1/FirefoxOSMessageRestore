//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");const{WifiConfigManager}=ChromeUtils.import("resource://gre/modules/WifiConfigManager.jsm");const{WifiConstants,EAPConstants}=ChromeUtils.import("resource://gre/modules/WifiConstants.jsm");const{PasspointManager}=ChromeUtils.import("resource://gre/modules/PasspointManager.jsm");const{WifiConfigUtils}=ChromeUtils.import("resource://gre/modules/WifiConfiguration.jsm");const HOME_PROVIDER_AWARD=100;const INTERNET_ACCESS_AWARD=50;const PUBLIC_OR_PRIVATE_NETWORK_AWARDS=4;const PERSONAL_OR_EMERGENCY_NETWORK_AWARDS=2;const RESTRICTED_OR_UNKNOWN_IP_AWARDS=1;const UNRESTRICTED_IP_AWARDS=2;const WAN_PORT_DOWN_OR_CAPPED_PENALTY=50;const RSSI_SCORE_START=-80;const RSSI_BUCKETWIDTH=20;const RSSI_LEVEL_BUCKETS=[-10,0,10,20,30,40];const ACTIVE_NETWORK_RSSI_BOOST=20;const NETWORK_TYPE_SCORES=[PUBLIC_OR_PRIVATE_NETWORK_AWARDS, PUBLIC_OR_PRIVATE_NETWORK_AWARDS, PUBLIC_OR_PRIVATE_NETWORK_AWARDS, PUBLIC_OR_PRIVATE_NETWORK_AWARDS, PERSONAL_OR_EMERGENCY_NETWORK_AWARDS, PERSONAL_OR_EMERGENCY_NETWORK_AWARDS, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,];const IPV4_SCORES=[0, UNRESTRICTED_IP_AWARDS, RESTRICTED_OR_UNKNOWN_IP_AWARDS, UNRESTRICTED_IP_AWARDS, UNRESTRICTED_IP_AWARDS, RESTRICTED_OR_UNKNOWN_IP_AWARDS, RESTRICTED_OR_UNKNOWN_IP_AWARDS, RESTRICTED_OR_UNKNOWN_IP_AWARDS,];const IPV6_SCORES=[0, UNRESTRICTED_IP_AWARDS, RESTRICTED_OR_UNKNOWN_IP_AWARDS,];XPCOMUtils.defineLazyServiceGetter(this,"gIccService","@mozilla.org/icc/iccservice;1","nsIIccService");XPCOMUtils.defineLazyServiceGetter(this,"gDataCallManager","@mozilla.org/datacall/manager;1","nsIDataCallManager");this.EXPORTED_SYMBOLS=["PasspointNetworkSelector"];var gDebug=false;function debug(aMsg){if(gDebug){dump("-*- PasspointNetworkSelector: "+aMsg);}}
this.PasspointNetworkSelector=function PasspointNetworkSelector(){};PasspointNetworkSelector.prototype={lastUserSelectedNetwork:WifiConfigManager.getLastSelectedNetwork(),lastUserSelectedNetworkTimeStamp:WifiConfigManager.getLastSelectedTimeStamp(),setDebug(aDebug){gDebug=aDebug;},chooseNetwork(results,wifiInfo){var bestCandidate=null;var candidateList=[];var highestScore=Number.MIN_VALUE;if(!PasspointManager.isPasspointSupported()){debug("passpoint not supported");return null;}
if(!PasspointManager.passpointEnabled){debug("passpoint is disabled");return null;}
if(PasspointManager.isProviderEmpty()){debug("no saved providers");return null;}
debug("chooseNetwork ...");PasspointManager.sweepCache();let passpointScanResults=this.filterPasspointResult(results);for(let result of passpointScanResults){let bestProvider=PasspointManager.matchProvider(result);if(bestProvider!=null){let simSlot=gDataCallManager.dataDefaultServiceId;let icc=gIccService.getIccByServiceId(simSlot);if(!icc||icc.cardState!=Ci.nsIIcc.CARD_STATE_READY){debug("Ignore provider since sim not ready");continue;}
candidateList.push({scanResult:result,provider:bestProvider.provider,matchStatus:bestProvider.matchStatus,});}}
if(candidateList.length==0){debug("No suitable Passpoint network found");return null;}
for(let candidate of candidateList){let isActiveNetwork=candidate.scanResult.ssid==wifiInfo.ssid;let scanResult=candidate.scanResult;let score=this.calculateScore(candidate.matchStatus==WifiConstants.PasspointMatch.HomeProvider,PasspointManager.getAnqpElements(scanResult),scanResult,isActiveNetwork);if(score>highestScore){bestCandidate=candidate;highestScore=score;}}
return this.convertProviderToConfiguration(bestCandidate);},filterPasspointResult(scanResults){let filteredScanResults=[];for(let result of scanResults){if(result.passpoint.isInterworking){filteredScanResults.push(result);}}
return filteredScanResults;},calculateScore(isHomeProvider,anqpElements,scanResult,isActiveNetwork){let score=0;if(!anqpElements||!scanResult){return score;}
if(isHomeProvider){score+=HOME_PROVIDER_AWARD;}
score+=(scanResult.hasInternet?1:-1)*INTERNET_ACCESS_AWARD;score+=NETWORK_TYPE_SCORES[scanResult.passpoint.ant];if(anqpElements){let wm=anqpElements.hsWanMetrics;if(wm&&(wm.status!=WifiConstants.HSWanMetrics.LINK_STATUS_UP||wm.capped)){score-=WAN_PORT_DOWN_OR_CAPPED_PENALTY;}
let ipa=anqpElements.ipAvailability;if(ipa){score+=ipa.ipv4Availability!=null?IPV4_SCORES[ipa.ipv4Availability]:0;score+=ipa.ipv6Availability!=null?IPV6_SCORES[ipa.ipv6Availability]:0;}}
let rssi=scanResult.signalStrength;if(isActiveNetwork){rssi+=ACTIVE_NETWORK_RSSI_BOOST;}
let index=Math.floor((rssi-RSSI_SCORE_START)/RSSI_BUCKETWIDTH);if(index<0){index=0;}else if(index>RSSI_LEVEL_BUCKETS.length-1){index=RSSI_LEVEL_BUCKETS.length-1;}
score+=RSSI_LEVEL_BUCKETS[index];debug("Network "+scanResult.ssid+" get score: "+score);return score;},convertProviderToConfiguration(candidate){let config={};config.keyMgmt="WPA-EAP IEEE8021X";config.proto="RSN";let passpointConfig=candidate.provider.passpointConfig;config.realm=passpointConfig.credential.realm;config.domainSuffixMatch=passpointConfig.homeSp.fqdn;{let methods=new Map([[EAPConstants.EAP_SIM,"SIM"],[EAPConstants.EAP_AKA,"AKA"],[EAPConstants.EAP_AKA_PRIME,"AKA'"],]);if(methods.has(passpointConfig.credential.eapType)){config.eap=methods.get(passpointConfig.credential.eapType);}else{debug("Unknown EAP method: "+passpointConfig.credential.eapType);}
config.plmn=passpointConfig.credential.imsi;}
function quote(s){return'"'+s+'"';}
let scanResult=candidate.scanResult;config.ssid=quote(scanResult.ssid);config.isHomeProvider=candidate.matchStatus==WifiConstants.PasspointMatch.HomeProvider;let networkKey=WifiConfigUtils.getNetworkKey(config);let configured=WifiConfigManager.configuredNetworks;if(networkKey in configured){WifiConfigManager.tryEnableQualifiedNetwork(configured);debug("Passpoint network "+config.ssid+" is already configured");return null;}
WifiConfigManager.addOrUpdateNetwork(config,function(success){if(!success){debug("Failed to add passpoint network");}});return configured[networkKey];},};