//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");const{AppConstants}=ChromeUtils.import("resource://gre/modules/AppConstants.jsm");const isGonk=AppConstants.platform==="gonk";if(isGonk){XPCOMUtils.defineLazyGetter(this,"libcutils",function(){const{libcutils}=ChromeUtils.import("resource://gre/modules/systemlibs.js");return libcutils;});}
this.EXPORTED_SYMBOLS=["GeckoBridge"];const kWatchedPrefs=["app.update.custom","b2g.version","device.bt","device.cdma-apn","device.commercial.ref","device.flip","device.fm.recorder","device.gps","device.group-message","device.kaiaccount.enabled","device.key.camera","device.key.endcall","device.key.volume","device.mvs","device.parental-control","device.qwerty","device.readout","device.rsu","device.rtt","device.sim-hotswap","device.storage.size","device.tethering","device.torch","device.vilte","device.volte","device.vowifi","device.wifi","device.wifi.certified","oem.software.version","ril.support.primarysim.switch",];function log(msg){dump(`GeckoBridge: ${msg}\n`);}
this.GeckoBridge={start(){log(`Starting`);try{this._bridge=Cc["@mozilla.org/sidl-native/bridge;1"].getService(Ci.nsIGeckoBridge);}catch(e){log(`Failed to instanciate "@mozilla.org/sidl-native/bridge;1" service: ${e}`);return;}
[{prop:"_appsServiceDelegate",xpcom:"appsservice",interface:Ci.nsIAppsServiceDelegate,},{prop:"_powerManagerDelegate",xpcom:"powermanager",interface:Ci.nsIPowerManagerDelegate,},{prop:"_preferenceDelegate",xpcom:"preference",interface:Ci.nsIPreferenceDelegate,},{prop:"_networkManagerDelegate",xpcom:"networkmanager",interface:Ci.nsINetworkManagerDelegate,},{prop:"_mobileManagerDelegate",xpcom:"mobilemanager",interface:Ci.nsIMobileManagerDelegate,},].forEach(delegate=>{let contract_id=`@mozilla.org/sidl-native/${delegate.xpcom};1`;try{this[delegate.prop]=Cc[contract_id].getService(delegate.interface);}catch(e){log(`Failed to create '${contract_id}' delegate: ${e}`);}});this.setup();},setup(){if(!this._bridge){log(`Can't do any setup without a nsIGeckoBridge instance!`);return;}
dump("Cliff: GeckoBridge.jsm, setup() starts");let curef=Services.prefs.getPrefType("device.commercial.ref")==Ci.nsIPrefBranch.PREF_STRING?Services.prefs.getCharPref("device.commercial.ref"):undefined;if(!curef){dump("Cliff: GeckoBridge.jsm, setup(), no curef");try{let cuidCode=libcutils.property_get("ro.boot.cuid");let product=libcutils.property_get("ro.build.product");curef=product+'-'+cuidCode;Services.prefs.setCharPref("device.commercial.ref",curef);}catch(e){dump(`Cliff: GeckoBridge.jsm, write curef error = ${e}`);}
dump(`Cliff: GeckoBridge.jsm, write curef = ${curef}`);}

kWatchedPrefs.forEach(pref=>{Services.prefs.addObserver(pref,this);this.setPref(pref);});this.setAppsServiceDelegate();this.setPowerManagerDelegate();this.setPreferenceDelegate();this.setMobileManagerDelegate();this.setNetworkManagerDelegate();Services.obs.addObserver(this,"api-daemon-reconnected");},observe(subject,topic,data){log(`received observer notification: ${topic}`);if(topic=="api-daemon-reconnected"){
kWatchedPrefs.forEach(pref=>{this.setPref(pref);});}else{this.setPref(data);}},generateLoggingCallback(delegate){return{resolve(){log(`Success setting ${delegate}`);},reject(){log(`Failure setting ${delegate}`);},};},setAppsServiceDelegate(){if(!this._appsServiceDelegate){log(`Invalid appsservice delegate`);return;}
log(`Setting AppsServiceDelegate`);this._bridge.setAppsServiceDelegate(this._appsServiceDelegate,this.generateLoggingCallback("AppsServiceDelegate"));},setMobileManagerDelegate(){if(!this._mobileManagerDelegate){log(`Invalid mobilemanager delegate`);return;}
log(`Setting MobileManagerDelegate`);this._bridge.setMobileManagerDelegate(this._mobileManagerDelegate,this.generateLoggingCallback("MobileManagerDelegate"));},setNetworkManagerDelegate(){if(!this._networkManagerDelegate){log(`Invalid networkmanager delegate`);return;}
log(`Setting NetworkManagerDelegate`);this._bridge.setNetworkManagerDelegate(this._networkManagerDelegate,this.generateLoggingCallback("NetworkManagerDelegate"));},setPowerManagerDelegate(){if(!this._powerManagerDelegate){log(`Invalid powermanager delegate`);return;}
log(`Setting PowerManagerDelegate`);this._bridge.setPowerManagerDelegate(this._powerManagerDelegate,this.generateLoggingCallback("PowerManagerDelegate"));},setPreferenceDelegate(){if(!this._preferenceDelegate){log(`Invalid preference delegate`);return;}
log(`Setting PreferenceDelegate`);this._bridge.setPreferenceDelegate(this._preferenceDelegate,this.generateLoggingCallback("PreferenceDelegate"));},setPref(pref){let prefs=Services.prefs;let kind=prefs.getPrefType(pref);log(`Setting pref ${pref} (${kind})`);const callback={resolve(){},reject(){log(`Failed to set pref ${pref}`);},};switch(kind){case Ci.nsIPrefBranch.PREF_STRING:this._bridge.charPrefChanged(pref,prefs.getCharPref(pref),callback);break;case Ci.nsIPrefBranch.PREF_INT:this._bridge.intPrefChanged(pref,prefs.getIntPref(pref),callback);break;case Ci.nsIPrefBranch.PREF_BOOL:this._bridge.boolPrefChanged(pref,prefs.getBoolPref(pref),callback);break;default:log(`Unexpected pref type (${kind}) for ${pref}`);}},};