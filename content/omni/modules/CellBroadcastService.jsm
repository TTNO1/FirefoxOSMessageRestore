//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");XPCOMUtils.defineLazyGetter(this,"RIL",function(){ let obj=ChromeUtils.import("resource://gre/modules/ril_consts.js",null);return obj;});XPCOMUtils.defineLazyGetter(this,"RIL_DEBUG",function(){ let obj=ChromeUtils.import("resource://gre/modules/ril_consts_debug.js",null);return obj;});const kSettingsCellBroadcastDisabled="ril.cellbroadcast.disabled";const kSettingsCellBroadcastSearchList="ril.cellbroadcast.searchlist";const kPrefAppCBConfigurationEnabled="dom.app_cb_configuration";const kPrefCellBroadcastMaxWaitTime="dom.cellbroadcast.maximumWaitTime";const kPrefCellBroadcastGeoFencingThreshold="dom.cellbroadcast.geoFencingThreshold";const DEFAULT_MAXIMUM_WAIT_TIME=30;XPCOMUtils.defineLazyServiceGetter(this,"gCellbroadcastMessenger","@mozilla.org/ril/system-messenger-helper;1","nsICellbroadcastMessenger");XPCOMUtils.defineLazyServiceGetter(this,"gSettingsManager","@mozilla.org/sidl-native/settings;1","nsISettingsManager");XPCOMUtils.defineLazyGetter(this,"gRadioInterfaceLayer",function(){let ril={numRadioInterfaces:0};try{ril=Cc["@mozilla.org/ril;1"].getService(Ci.nsIRadioInterfaceLayer);}catch(e){}
return ril;});XPCOMUtils.defineLazyServiceGetter(this,"gPowerManagerService","@mozilla.org/power/powermanagerservice;1","nsIPowerManagerService");XPCOMUtils.defineLazyServiceGetter(this,"gMobileMessageDBService","@mozilla.org/mobilemessage/gonkmobilemessagedatabaseservice;1","nsIGonkMobileMessageDatabaseService");XPCOMUtils.defineLazyGetter(this,"gGeolocation",function(){let geolocation={};try{geolocation=Cc["@mozilla.org/geolocation;1"].getService(Ci.nsISupports);}catch(e){}
return geolocation;});XPCOMUtils.defineLazyServiceGetter(this,"gImsPhoneService","@b2g/telephony/ims/imsphoneservice;1","nsIImsPhoneService");const GONK_CELLBROADCAST_SERVICE_CID=Components.ID("{7ba407ce-21fd-11e4-a836-1bfdee377e5c}");const NS_XPCOM_SHUTDOWN_OBSERVER_ID="xpcom-shutdown";var DEBUG;function debug(s){dump("CellBroadcastService: "+s);}
var CB_SEARCH_LIST_GECKO_CONFIG=false;const CB_HANDLED_WAKELOCK_TIMEOUT=10000;const TYPE_ACTIVE_ALERT_SHARE_WAC=2;function CellBroadcastService(){this._listeners=[];this._updateDebugFlag();Services.obs.addObserver(this,NS_XPCOM_SHUTDOWN_OBSERVER_ID);try{CB_SEARCH_LIST_GECKO_CONFIG=Services.prefs.getBoolPref(kPrefAppCBConfigurationEnabled)||false;}catch(e){}
if(CB_SEARCH_LIST_GECKO_CONFIG){this.getSettingValue(kSettingsCellBroadcastDisabled);this.getSettingValue(kSettingsCellBroadcastSearchList);this.addSettingObserver(kSettingsCellBroadcastDisabled);this.addSettingObserver(kSettingsCellBroadcastSearchList);}}
CellBroadcastService.prototype={classID:GONK_CELLBROADCAST_SERVICE_CID,QueryInterface:ChromeUtils.generateQI([Ci.nsICellBroadcastService,Ci.nsIGonkCellBroadcastService,Ci.nsISettingsObserver,Ci.nsIObserver,]),_listeners:null,_cellBroadcastSearchList:null,isInEmergencyCbMode:false,_updateDebugFlag(){try{DEBUG=RIL_DEBUG.DEBUG_RIL||Services.prefs.getBoolPref(RIL_DEBUG.PREF_RIL_DEBUG_ENABLED);}catch(e){}},_retrieveSettingValueByClient(aClientId,aSettings){return Array.isArray(aSettings)?aSettings[aClientId]:aSettings;},setCellBroadcastDisabled(aSettings){if(!RIL.CB_SEARCH_LIST_GECKO_CONFIG){return;}
let numOfRilClients=gRadioInterfaceLayer.numRadioInterfaces;for(let clientId=0;clientId<numOfRilClients;clientId++){gRadioInterfaceLayer.getRadioInterface(clientId).sendWorkerMessage("setCellBroadcastDisabled",{disabled:this._retrieveSettingValueByClient(clientId,aSettings),});}},setCellBroadcastSearchList(aSettings){if(!RIL.CB_SEARCH_LIST_GECKO_CONFIG){return;}
let numOfRilClients=gRadioInterfaceLayer.numRadioInterfaces;let responses=[];for(let clientId=0;clientId<numOfRilClients;clientId++){let newSearchList=this._retrieveSettingValueByClient(clientId,aSettings);let oldSearchList=this._retrieveSettingValueByClient(clientId,this._cellBroadcastSearchList);if(newSearchList==oldSearchList||(newSearchList&&oldSearchList&&newSearchList.gsm==oldSearchList.gsm&&newSearchList.cdma==oldSearchList.cdma)){responses.push({});return;}
gRadioInterfaceLayer.getRadioInterface(clientId).sendWorkerMessage("setCellBroadcastSearchList",{searchList:newSearchList},function callback(aResponse){if(DEBUG&&aResponse.errorMsg){debug("Failed to set new search list: "+
newSearchList+" to client id: "+
clientId);}
responses.push(aResponse);if(responses.length==numOfRilClients){let successCount=0;for(let i=0;i<responses.length;i++){if(!responses[i].errorMsg){successCount++;}}
if(successCount==numOfRilClients){this._cellBroadcastSearchList=aSettings;}else{
}}
return false;}.bind(this));}},registerListener(aListener){if(this._listeners.includes(aListener)){throw Components.Exception("",Cr.NS_ERROR_UNEXPECTED);}
this._listeners.push(aListener);},unregisterListener(aListener){let index=this._listeners.indexOf(aListener);if(index<0){throw Components.Exception("",Cr.NS_ERROR_UNEXPECTED);}
this._listeners.splice(index,1);},setCBSearchList(aClientId,aGsmCount,aGsms,aCdmaCount,aCdmas){if(DEBUG){debug("setCellBroadcastSearchList: "+aClientId);}
let radioInterface=this._getRadioInterface(aClientId);let options={gsm:this._convertCBSearchList(aGsms),cdma:this._convertCBSearchList(aCdmas),};radioInterface.sendWorkerMessage("setCellBroadcastSearchList",{searchList:options},function callback(aResponse){if(DEBUG){debug("Set cell broadcast search list to client id: "+
this._clientId+", with errorMsg: "+
aResponse.errorMsg);}}.bind(this));},UpdatedECBM(aState){this.isInEmergencyCbMode=aState;},_convertCBSearchList(aSearchArray){let result=[];for(let i=0;i<aSearchArray.length;i+=2){let start=aSearchArray[i];let end=aSearchArray[i+1];if(start&&end){result.push(start.toString()+"-"+end.toString());}else if(start){result.push(start.toString());}else if(end){result.push(end.toString());}}
return result.toString();},setCBDisabled(aClientId,aDisabled){if(DEBUG){debug("to disable cb: "+aClientId);}
let radioInterface=this._getRadioInterface(aClientId);radioInterface.sendWorkerMessage("setCellBroadcastDisabled",{diesabled:true,});},_getRadioInterface(aClientId){let numOfRilClients=gRadioInterfaceLayer.numRadioInterfaces;if(aClientId<0||aClientId>=numOfRilClients){if(DEBUG){debug("unexpedted client: "+aClientId);}
throw Components.Exception("",Cr.NS_ERROR_NOT_AVAILABLE);}
let radioInterface=gRadioInterfaceLayer.getRadioInterface(aClientId);if(!radioInterface){if(DEBUG){debug("cannot retrieve radiointerface for client: "+aClientId);}
throw Components.Exception("",Cr.NS_ERROR_NOT_AVAILABLE);}
return radioInterface;},

_cbHandledWakeLock:null,_cbHandledWakeLockTimer:null,_acquireCbHandledWakeLock(){if(!this._cbHandledWakeLock){if(DEBUG){debug("Acquiring a CPU wake lock for handling CB");}
this._cbHandledWakeLock=gPowerManagerService.newWakeLock("cpu");}
if(!this._cbHandledWakeLockTimer){if(DEBUG){debug("Creating a timer for releasing the CPU wake lock");}
this._cbHandledWakeLockTimer=Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);}
if(DEBUG){debug("Setting the timer for releasing the CPU wake lock");}
this._cbHandledWakeLockTimer.initWithCallback(()=>this._releaseCbHandledWakeLock(),CB_HANDLED_WAKELOCK_TIMEOUT,Ci.nsITimer.TYPE_ONE_SHOT);},_releaseCbHandledWakeLock(){if(DEBUG){debug("Releasing the CPU wake lock for handling CB");}
if(this._cbHandledWakeLockTimer){this._cbHandledWakeLockTimer.cancel();}
if(this._cbHandledWakeLock){this._cbHandledWakeLock.unlock();this._cbHandledWakeLock=null;}},broadcastGeometryMessage(aServiceId,aGeometryMessage){let callback=(aRv,aDeletedRecord,aCellBroadCastMessage)=>{if(DEBUG&&!Components.isSuccessCode(aRv)){debug("Failed to delete cellbroadcast message");}};gMobileMessageDBService.deleteCellBroadcastMessage(aGeometryMessage.serialNumber,aGeometryMessage.messageId,callback);this._broadcastCellBroadcastMessage(aServiceId,aGeometryMessage);},_performGeoFencing(aServiceId,aCellBroadcastMessage,aLatLng,aBroadcastArea){let thresholdInMeters=Services.prefs.getIntPref(kPrefCellBroadcastGeoFencingThreshold,0);let needNotify=false;for(let geo of aBroadcastArea){if(geo.contains(aLatLng,thresholdInMeters)){if(DEBUG){debug("Location "+
JSON.stringify(aLatLng)+" inside geometry "+
JSON.stringify(geo));}
needNotify=true;this.broadcastGeometryMessage(aServiceId,aCellBroadcastMessage);return;}}
if(!needNotify){this._broadcastTestCellBroadcastMessage(aServiceId,aCellBroadcastMessage);}
},async _handleGeoFencingTrigger(aServiceId,aGeoTriggerMessage){let cbIdentifiers=aGeoTriggerMessage.cellBroadcastIdentifiers;let allBroadcastMessages=[];let findCellbroadcastMessage=identity=>new Promise(resolve=>gMobileMessageDBService.getCellBroadcastMessage(identity.serialNumber,identity.messageIdentifier,function(aRv,aMessageRecord,aCellBroadCastMessage){if(Components.isSuccessCode(aRv)&&aMessageRecord){allBroadcastMessages.push(aMessageRecord);}
resolve();}));for(let i=0;i<cbIdentifiers.length;i++){await findCellbroadcastMessage(cbIdentifiers[i]);} 
let commonBroadcastArea=[];if(aGeoTriggerMessage.geoFencingTriggerType==TYPE_ACTIVE_ALERT_SHARE_WAC){allBroadcastMessages.forEach(msg=>{commonBroadcastArea.push(...msg.geometries);});}
allBroadcastMessages.forEach(msg=>{if(commonBroadcastArea.length>0){this._handleGeometryMessage(aServiceId,msg,commonBroadcastArea);}else{this._handleGeometryMessage(aServiceId,msg);}});},_handleGeometryMessage(aServiceId,aGeometryMessage,aBroadcastArea=aGeometryMessage.geometries){if(aGeometryMessage.maximumWaitingTimeSec>0){let timeout=aGeometryMessage.maximumWaitingTimeSec*1000;if(aGeometryMessage.maximumWaitingTimeSec==RIL.GEO_FENCING_MAXIMUM_WAIT_TIME_NOT_SET){timeout=Services.prefs.getIntPref(kPrefCellBroadcastMaxWaitTime,DEFAULT_MAXIMUM_WAIT_TIME)*1000;}
let options={enableHighAccuracy:false,timeout,maximumAge:0,};let success=pos=>{let latLng={lat:pos.coords.latitude,lng:pos.coords.longitude,accuracy:pos.accuracy,};if(DEBUG){debug("getCurrentPosition successfully with LatLng: "+
JSON.stringify(latLng));}
this._performGeoFencing(aServiceId,aGeometryMessage,latLng,aBroadcastArea);};let error=err=>{if(DEBUG){debug("getCurrentPosition error: "+err.message);}
this.broadcastGeometryMessage(aServiceId,aGeometryMessage);};gGeolocation.getCurrentPosition(success,error,options);}else{this.broadcastGeometryMessage(aServiceId,aGeometryMessage);}},_broadcastCellBroadcastMessage(aServiceId,aCellBroadcastMessage){this._acquireCbHandledWakeLock(); gCellbroadcastMessenger.notifyCbMessageReceived(aServiceId,aCellBroadcastMessage.gsmGeographicalScope,aCellBroadcastMessage.serialNumber,aCellBroadcastMessage.messageId,aCellBroadcastMessage.language,aCellBroadcastMessage.body,aCellBroadcastMessage.messageClass,aCellBroadcastMessage.timeStamp,aCellBroadcastMessage.cdmaServiceCategory,aCellBroadcastMessage.hasEtwsInfo,aCellBroadcastMessage.etwsWarningType,aCellBroadcastMessage.etwsEmergencyUserAlert,aCellBroadcastMessage.etwsPopup); for(let listener of this._listeners){try{listener.notifyMessageReceived(aServiceId,aCellBroadcastMessage.gsmGeographicalScope,aCellBroadcastMessage.serialNumber,aCellBroadcastMessage.messageId,aCellBroadcastMessage.language,aCellBroadcastMessage.body,aCellBroadcastMessage.messageClass,aCellBroadcastMessage.timeStamp,aCellBroadcastMessage.cdmaServiceCategory,aCellBroadcastMessage.hasEtwsInfo,aCellBroadcastMessage.etwsWarningType,aCellBroadcastMessage.etwsEmergencyUserAlert,aCellBroadcastMessage.etwsPopup);}catch(e){debug("listener threw an exception: "+e);}}},notifyMessageReceived(aServiceId,aCellBroadcastMessage){if(this.isInEmergencyCbMode){debug("notifyMessageReceived  New Cellbroadcast Message but in ECBM , don't display alert ");return;}
if(aCellBroadcastMessage.geoFencingTriggerType){this._handleGeoFencingTrigger(aServiceId,aCellBroadcastMessage);}else if(aCellBroadcastMessage.geometries){let callback=(aRv,aSaveedRecord)=>{if(Components.isSuccessCode(aRv)){if(DEBUG){debug("Cellbroadcast message saved successfully");}
this._handleGeometryMessage(aServiceId,aCellBroadcastMessage);}else{if(DEBUG){debug("Failed to save cellbroadcast message");}
this._broadcastCellBroadcastMessage(aServiceId,aCellBroadcastMessage);}};gMobileMessageDBService.saveCellBroadcastMessage(aCellBroadcastMessage,callback);}else{this._broadcastCellBroadcastMessage(aServiceId,aCellBroadcastMessage);}},observe(aSubject,aTopic,aData){switch(aTopic){case NS_XPCOM_SHUTDOWN_OBSERVER_ID:this._releaseCbHandledWakeLock();Services.obs.removeObserver(this,NS_XPCOM_SHUTDOWN_OBSERVER_ID);this.removeSettingObserver(kSettingsCellBroadcastDisabled);this.removeSettingObserver(kSettingsCellBroadcastSearchList);this._listeners=[];break;}},handleSettingChanged(aName,aResult){switch(aName){case kSettingsCellBroadcastSearchList:if(DEBUG){debug("'"+
kSettingsCellBroadcastSearchList+"' is now "+
JSON.stringify(aResult));}
let resultListObj=JSON.parse(aResult);this.setCellBroadcastSearchList(resultListObj);break;case kSettingsCellBroadcastDisabled:if(DEBUG){debug("'"+
kSettingsCellBroadcastDisabled+"' is now "+
JSON.stringify(aResult));}
let resultDisableObj=JSON.parse(aResult);this.setCellBroadcastDisabled(resultDisableObj);break;}},observeSetting(aSettingInfo){if(aSettingInfo){let name=aSettingInfo.name;let result=aSettingInfo.value;this.handleSettingChanged(name,result);}},getSettingValue(aKey){if(!aKey){return;}
if(gSettingsManager){if(DEBUG){debug("get "+aKey+" setting.");}
let self=this;gSettingsManager.get(aKey,{resolve:info=>{self.observeSetting(info);},reject:()=>{if(DEBUG){debug("get "+aKey+" failed.");}},});}},setSettingValue(aKey,aValue){if(!aKey||!aValue){return;}
if(gSettingsManager){if(DEBUG){debug("set "+aKey+" setting with value = "+JSON.stringify(aValue));}
gSettingsManager.set([{name:aKey,value:JSON.stringify(aValue)}],{resolve:()=>{if(DEBUG){debug(" Set "+aKey+" succedded. ");}},reject:()=>{if(DEBUG){debug("Set "+aKey+" failed.");}},});}},addSettingObserver(aKey){if(!aKey){return;}
if(gSettingsManager){if(DEBUG){debug("add "+aKey+" setting observer.");}
gSettingsManager.addObserver(aKey,this,{resolve:()=>{if(DEBUG){debug("observed "+aKey+" successed.");}},reject:()=>{if(DEBUG){debug("observed "+aKey+" failed.");}},});}},removeSettingObserver(aKey){if(!aKey){return;}
if(gSettingsManager){if(DEBUG){debug("remove "+aKey+" setting observer.");}
gSettingsManager.removeObserver(aKey,this,{resolve:()=>{if(DEBUG){debug("remove observer "+aKey+" successed.");}},reject:()=>{if(DEBUG){debug("remove observer "+aKey+" failed.");}},});}},_broadcastTestCellBroadcastMessage(aServiceId,aCellBroadcastMessage){this._acquireCbHandledWakeLock(); gCellbroadcastMessenger.notifyTestCbMessageReceived(aServiceId,aCellBroadcastMessage.gsmGeographicalScope,aCellBroadcastMessage.messageCode,aCellBroadcastMessage.messageId,aCellBroadcastMessage.language,aCellBroadcastMessage.body,aCellBroadcastMessage.messageClass,aCellBroadcastMessage.timeStamp,aCellBroadcastMessage.cdmaServiceCategory,aCellBroadcastMessage.hasEtwsInfo,aCellBroadcastMessage.etwsWarningType,aCellBroadcastMessage.etwsEmergencyUserAlert,aCellBroadcastMessage.etwsPopup); for(let listener of this._listeners){try{listener.notifyMessageReceived(aServiceId,aCellBroadcastMessage.gsmGeographicalScope,aCellBroadcastMessage.messageCode,aCellBroadcastMessage.messageId,aCellBroadcastMessage.language,aCellBroadcastMessage.body,aCellBroadcastMessage.messageClass,aCellBroadcastMessage.timeStamp,aCellBroadcastMessage.cdmaServiceCategory,aCellBroadcastMessage.hasEtwsInfo,aCellBroadcastMessage.etwsWarningType,aCellBroadcastMessage.etwsEmergencyUserAlert,aCellBroadcastMessage.etwsPopup);}catch(e){debug("listener threw an exception: "+e);}}},};var EXPORTED_SYMBOLS=["CellBroadcastService"];