//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";this.EXPORTED_SYMBOLS=["DeviceStateMonitor"];const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");var RIL_DEBUG=ChromeUtils.import("resource://gre/modules/ril_consts_debug.js");const GONK_DEVICESTATEMONITOR_CID=Components.ID("{6143e4bb-07a1-4917-ba91-f321b1e0a575}");const kNsPrefbranchPrefchangeTopic="nsPref:changed";const kXpcomShutdownChangedTopic="xpcom-shutdown";const kScreenStateChangedTopic="screen-state-changed";const kPowerSupplyChangeTopic="gonkhal-powersupply-notifier";const kTopics=[kScreenStateChangedTopic,kXpcomShutdownChangedTopic,kPowerSupplyChangeTopic,];const RadioIndicationFilterNone=0;const RadioIndicationFilterSignalStrength=1<<0;const RadioIndicationFilterFullNetworkState=1<<1;const RadioIndicationFilterDataCallDormancyChange=1<<2;const RadioIndicationFilterAll=RadioIndicationFilterSignalStrength|RadioIndicationFilterFullNetworkState|RadioIndicationFilterDataCallDormancyChange;XPCOMUtils.defineLazyGetter(this,"gRadioInterfaces",function(){let ril={numRadioInterfaces:0};try{ril=Cc["@mozilla.org/ril;1"].getService(Ci.nsIRadioInterfaceLayer);}catch(e){}
let interfaces=[];for(let i=0;i<ril.numRadioInterfaces;i++){interfaces.push(ril.getRadioInterface(i));}
return interfaces;});var DEBUG=RIL_DEBUG.DEBUG_RIL;function debug(s){dump("-*- DeviceStateMonitor: "+s+"\n");}
function updateDebugFlag(){ DEBUG=RIL_DEBUG.DEBUG_RIL||Services.prefs.getBoolPref(RIL_DEBUG.PREF_RIL_DEBUG_ENABLED,false);}
function DeviceStateMonitor(){updateDebugFlag();if(DEBUG){debug("Create DeviceStateMonitor");}
this._isScreenOn=true;this._isCharging=false;Services.prefs.addObserver(RIL_DEBUG.PREF_RIL_DEBUG_ENABLED,this);kTopics.forEach(topic=>{Services.obs.addObserver(this,topic);});}
DeviceStateMonitor.prototype={classID:GONK_DEVICESTATEMONITOR_CID,QueryInterface:ChromeUtils.generateQI([Ci.nsIObserver]),_isScreenOn:null,_isCharging:null,_setRadioIndicationFilter(aFilter){gRadioInterfaces.forEach(radioInterface=>{radioInterface.sendWorkerMessage("setUnsolResponseFilter",{filter:aFilter},null);});},_handleDeviceStateChange(){let filter=this._isScreenOn||this._isCharging?RadioIndicationFilterAll:RadioIndicationFilterNone;this._setRadioIndicationFilter(filter);},_handleScreenStateChange(aScreenState){if(DEBUG){debug("Observe "+kScreenStateChangedTopic+": "+aScreenState);}
let screenOn=aScreenState==="on";if(screenOn!=this._isScreenOn){this._isScreenOn=screenOn;this._handleDeviceStateChange();}},_handleChargingStateChange(aPropbag){let propbag=aPropbag.QueryInterface(Ci.nsIPropertyBag2);if(DEBUG){debug("Observe "+
kPowerSupplyChangeTopic+": "+
propbag.get("powerSupplyOnline"));}
let chargingState=propbag.get("powerSupplyOnline");if(chargingState!=this._isCharging){this._isCharging=chargingState;this._handleDeviceStateChange();}},_shutdown(){if(DEBUG){debug("shutdown DeviceStateMonitor");}
Services.prefs.removeObserver(RIL_DEBUG.PREF_RIL_DEBUG_ENABLED,this);kTopics.forEach(topic=>{Services.obs.removeObserver(this,topic);});},observe(aSubject,aTopic,aData){switch(aTopic){case kNsPrefbranchPrefchangeTopic:if(aData===RIL_DEBUG.PREF_RIL_DEBUG_ENABLED){updateDebugFlag();}
break;case kScreenStateChangedTopic:this._handleScreenStateChange(aData);break;case kXpcomShutdownChangedTopic:this._shutdown();break;case kPowerSupplyChangeTopic:this._handleChargingStateChange(aSubject);break;}},};