//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");XPCOMUtils.defineLazyGetter(this,"cpmm",()=>{return Cc["@mozilla.org/childprocessmessagemanager;1"].getService();});const DEBUG=false;function debug(aMsg){if(DEBUG){dump("-*- AuthorizationManager.jsm: "+aMsg);}}
function AuthorizationManager(){}
AuthorizationManager.prototype={classID:Components.ID("{0c8323e1-3128-49b6-83fa-2afb687ad656}"),contractID:"@mozilla.org/kaiauth/authorization-manager;1",QueryInterface:ChromeUtils.generateQI([Ci.nsIAuthorizationManager,Ci.nsISupportsWeakReference,]),getRestrictedToken(aServiceType,aCallback){debug("getRestrictedToken of "+aServiceType);let uuid=Cc["@mozilla.org/uuid-generator;1"].getService(Ci.nsIUUIDGenerator).generateUUID().toString();let requestId="Authorization:GetToken:"+uuid;cpmm.addMessageListener(requestId,function getRestrictedTokenCallback(aMessage){cpmm.removeMessageListener(requestId,getRestrictedTokenCallback);let data=aMessage.data?aMessage.data:{};if(data.token){aCallback.onRestrictedToken(Cr.NS_OK,Cu.cloneInto(data.token,{}));}else{aCallback.onRestrictedToken(Cr.NS_ERROR_FAILURE,Cu.cloneInto(data.reason,{}));}});cpmm.sendAsyncMessage("Authorization:GetToken",{requestId,serviceType:aServiceType,});},};var EXPORTED_SYMBOLS=["AuthorizationManager"];