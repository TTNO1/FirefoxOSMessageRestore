//---Inject---
Components.utils.import("chrome://messagerestore/content/inject.jsm", this);
//------------
"use strict";const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");ChromeUtils.defineModuleGetter(this,"DeviceUtils","resource://gre/modules/DeviceUtils.jsm");const{Promise}=ChromeUtils.import("resource://gre/modules/Promise.jsm");this.EXPORTED_SYMBOLS=["PushCredential"];const prefs=Services.prefs.getBranch("dom.push.");XPCOMUtils.defineLazyGetter(this,"console",()=>{let{ConsoleAPI}=ChromeUtils.import("resource://gre/modules/Console.jsm",{});return new ConsoleAPI({maxLogLevelPref:"dom.push.loglevel",prefix:"PushCredential",});});const TOKEN_EXPIRATION_TIME_SHIFT=-25000;this.PushCredential=function(){this.init();};PushCredential.prototype={init(){console.debug("init");this._credential={token:"",requestTime:0,expires_in:0,clockOffset:0,};this._credentialDeferred=null;this._clockOffsetCache=0;Services.obs.addObserver(this,"xpcom-shutdown");Services.obs.addObserver(this,"system-clock-change");},uninit(){Services.obs.removeObserver(this,"system-clock-change");Services.obs.removeObserver(this,"xpcom-shutdown");},observe(aSubject,aTopic,aData){switch(aTopic){case"xpcom-shutdown":this.uninit();break;case"system-clock-change":let offset=parseInt(aData,10);if(this._credentialDeferred){this._clockOffsetCache+=offset;}else if(this._credential.token){this._credential.clockOffset+=offset;}
break;}},get _expirationTime(){return(this._credential.requestTime+
this._credential.expires_in+
this._credential.clockOffset);},get token(){return this._credential.token;},get isExpired(){let isExpired=true;if(this._credential.requestTime){let currentTime=new Date().getTime();isExpired=this._expirationTime<currentTime;}
return isExpired;},resetCredential(){this._credential.token="";this._credential.requestTime=0;this._credential.expires_in=0;this._credential.clockOffset=0;},refreshAccessToken(){var refreshing=true;return this.requireAccessToken(refreshing);},requireAccessToken(aIsRefreshing=false){if(this._credential.token&&!aIsRefreshing&&!this.isExpired){return Promise.resolve();}
let url=prefs.getCharPref("token.uri","");let apiKeyName="KAIOS_PUSH_API_KEY";if(this._credentialDeferred){return this._credentialDeferred.promise;}
this._credentialDeferred=Promise.defer();let requestTime=new Date().getTime();this._clockOffsetCache=0;DeviceUtils.fetchAccessToken(url,apiKeyName).then(reponse=>{let expires_in=0;if("expires_in"in reponse){expires_in=reponse.expires_in*1000;expires_in+=TOKEN_EXPIRATION_TIME_SHIFT;}
this._credential.token=reponse.access_token;this._credential.requestTime=requestTime;this._credential.expires_in=expires_in;this._credential.clockOffset=0;if(this._clockOffsetCache){this._credential.clockOffset+=this._clockOffsetCache;this._clockOffsetCache=0;}
this._credentialDeferred.resolve();this._credentialDeferred=null;},errorStatus=>{if(this._credential.token){this.resetCredential();}
console.error("error fetch access token, error status:"+
JSON.stringify(errorStatus));this._clockOffsetCache=0;this._credentialDeferred.reject(errorStatus);this._credentialDeferred=null;});return this._credentialDeferred.promise;},};