const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");const{AppConstants}=ChromeUtils.import("resource://gre/modules/AppConstants.jsm");const{MarionetteController}=ChromeUtils.import("resource://gre/modules/MarionetteController.jsm");ChromeUtils.import("resource://gre/modules/ActivitiesService.jsm");ChromeUtils.import("resource://gre/modules/AlarmService.jsm");ChromeUtils.import("resource://gre/modules/DownloadService.jsm");ChromeUtils.import("resource://gre/modules/NotificationDB.jsm");ChromeUtils.import("resource://gre/modules/ErrorPage.jsm");if(AppConstants.ENABLE_OMADM_REDBEND){Cu.import('resource://gre/modules/OmaService.jsm');Cu.import('resource://gre/modules/MdmUtils.jsm');}
XPCOMUtils.defineLazyGetter(this,"MarionetteHelper",()=>{const{MarionetteHelper}=ChromeUtils.import("chrome://b2g/content/devtools/marionette.js");return new MarionetteHelper(shell.contentBrowser);});XPCOMUtils.defineLazyServiceGetter(Services,"virtualcursor","@mozilla.org/virtualcursor/service;1","nsIVirtualCursorService");const isGonk=AppConstants.platform==="gonk";if(isGonk){ChromeUtils.import("resource://gre/modules/CustomHeaderInjector.jsm");XPCOMUtils.defineLazyGetter(this,"libcutils",()=>{const{libcutils}=ChromeUtils.import("resource://gre/modules/systemlibs.js");return libcutils;});ChromeUtils.import("resource://gre/modules/NetworkStatsService.jsm");}
try{



if(isGonk&&Services.prefs.getBoolPref("b2g.multiscreen.enabled")){ChromeUtils.import("resource://gre/modules/MultiscreenHandler.jsm");}}catch(e){}
function debug(str){console.log(`-*- Shell.js: ${str}`);}
var shell={get startURL(){let url=Services.prefs.getCharPref("b2g.system_startup_url");if(!url){console.error(`Please set the b2g.system_startup_url preference properly`);}
return url;},_started:false,hasStarted(){return this._started;},createSystemAppFrame(){let systemAppFrame=document.createXULElement("browser");systemAppFrame.setAttribute("type","chrome");systemAppFrame.setAttribute("primary","true");systemAppFrame.setAttribute("id","systemapp");systemAppFrame.setAttribute("forcemessagemanager","true");systemAppFrame.setAttribute("nodefaultsrc","true");systemAppFrame.permanentKey=new(Cu.getGlobalForObject(Services).Object)();systemAppFrame.linkedBrowser=systemAppFrame;document.body.prepend(systemAppFrame);window.dispatchEvent(new CustomEvent("systemappframeprepended"));this.contentBrowser=systemAppFrame;},start(){if(this._started){return;}
this._started=true;let gaiaChrome=Cc["@mozilla.org/b2g/gaia-chrome;1"].getService();if(!gaiaChrome){debug("No gaia chrome!");}
 
let cookies=Cc["@mozilla.org/cookieService;1"].getService();if(!cookies){debug("No cookies service!");}
let startURL=this.startURL;window.addEventListener("MozAfterPaint",this);window.addEventListener("sizemodechange",this);window.addEventListener("unload",this);Services.virtualcursor.init(window);let stopUrl=null; let listener={onLocationChange:(webProgress,request,location,flags)=>{},onProgressChange:()=>{},onSecurityChange:()=>{},onStateChange:(webProgress,request,stateFlags,status)=>{if(stateFlags&Ci.nsIWebProgressListener.STATE_START){if(!stopUrl){stopUrl=request.name;}}
if(stateFlags&Ci.nsIWebProgressListener.STATE_STOP){if(stopUrl&&request.name==stopUrl){this.contentBrowser.removeProgressListener(listener);this.notifyContentWindowLoaded();}}},onStatusChange:()=>{},QueryInterface:ChromeUtils.generateQI([Ci.nsIWebProgressListener2,Ci.nsIWebProgressListener,Ci.nsISupportsWeakReference,]),};this.contentBrowser.addProgressListener(listener);Services.ppmm.addMessageListener("dial-handler",this);Services.ppmm.addMessageListener("sms-handler",this);Services.ppmm.addMessageListener("mail-handler",this);Services.ppmm.addMessageListener("file-picker",this);debug(`Setting system url to ${startURL}`);this.contentBrowser.src=startURL;},stop(){window.removeEventListener("unload",this);window.removeEventListener("sizemodechange",this);Services.ppmm.removeMessageListener("dial-handler",this);Services.ppmm.removeMessageListener("sms-handler",this);Services.ppmm.removeMessageListener("mail-handler",this);Services.ppmm.removeMessageListener("file-picker",this);},handleEvent(event){debug(`event: ${event.type}`);switch(event.type){case"sizemodechange":

if(window.windowState==window.STATE_MINIMIZED){this.contentBrowser.docShellIsActive=false;}else{this.contentBrowser.docShellIsActive=true;}
break;case"MozAfterPaint":window.removeEventListener("MozAfterPaint",this);break;case"unload":this.stop();break;}},receiveMessage(message){const activities={"dial-handler":{name:"dial"},"mail-handler":{name:"new"},"sms-handler":{name:"new"},"file-picker":{name:"pick",response:"file-picked"},};if(!(message.name in activities)){return;}
let data=message.data;let activity=activities[message.name];let a=new window.WebActivity(activity.name,data);let promise=a.start();if(activity.response){let sender=message.target;promise.then(result=>{sender.sendAsyncMessage(activity.response,{success:true,result,});},error=>{sender.sendAsyncMessage(activity.response,{success:false});});}},
notifyContentWindowLoaded(){debug("notifyContentWindowLoaded");if(isGonk){libcutils.property_set("shell.ready","1");}
if(this.contentBrowser.getAttribute("kind")=="touch"){this.contentBrowser.classList.add("fullscreen");this.contentBrowser.removeAttribute("style");}

Services.obs.notifyObservers(null,"browser-ui-startup-complete");},};function toggle_bool_pref(name){let current=Services.prefs.getBoolPref(name);Services.prefs.setBoolPref(name,!current);debug(`${name} is now ${!current}`);}
document.addEventListener("DOMContentLoaded",()=>{if(shell.hasStarted()){console.error("Shell has already started but didn't initialize!!!");return;} 
RemoteDebugger.init(window);Services.obs.addObserver(browserWindowImpl=>{debug("New web embedder created.");window.browserDOMWindow=browserWindowImpl;
window.setTimeout(()=>{Services.obs.notifyObservers(window,"shell-ready");},0);},"web-embedder-created"); if(!isGonk||libcutils.property_get("ro.build.type")=="userdebug"){Services.tm.idleDispatchToMainThread(()=>{Services.obs.notifyObservers(null,"marionette-startup-requested");});} 
if(isGonk&&libcutils.property_get("ro.build.type")=="user"){if(MarionetteController){MarionetteController.enableRunner();}else{console.warn("MarionetteController not exist");}}
const{GeckoBridge}=ChromeUtils.import("resource://gre/modules/GeckoBridge.jsm");GeckoBridge.start();shell.createSystemAppFrame();const{SettingsPrefsSync}=ChromeUtils.import("resource://gre/modules/SettingsPrefsSync.jsm");SettingsPrefsSync.start(window).then(()=>{
window.setTimeout(()=>{SettingsPrefsSync.delayedInit();},10000);Services.obs.addObserver(()=>{shell.start();},"on-boot-done");});window.setTimeout(()=>{shell.start();},3000);},{once:true});