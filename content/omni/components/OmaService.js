'use strict';const DEBUG=true;function debug(aStr){if(DEBUG)
dump('OmaServiceJS.js: '+aStr+'\n');}
const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");const{ComponentUtils}=ChromeUtils.import("resource://gre/modules/ComponentUtils.jsm");const{DOMRequestIpcHelper}=ChromeUtils.import("resource://gre/modules/DOMRequestHelper.jsm");const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");const{OmaService}=ChromeUtils.import("resource://gre/modules/OmaService.jsm");const{libcutils}=ChromeUtils.import("resource://gre/modules/systemlibs.js");const OMASERVICEJS_CONTRACTID='@kaiostech.com/omaservice/OmaServiceJS;1';const OMASERVICEJS_CID=Components.ID('{be6f546e-2429-4a5b-b0da-36438342077a}');XPCOMUtils.defineLazyServiceGetter(this,'cpmm','@mozilla.org/childprocessmessagemanager;1','nsISyncMessageSender');this.EXPORTED_SYMBOLS=["OmaServiceJS"];function OmaServiceJS(){debug('Constructor');this.inParent=Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).processType==Ci.nsIXULRuntime.PROCESS_TYPE_DEFAULT;debug("inParent: "+this.inParent);this.defineEventHandlerGetterSetter("onvdmevent");this.defineEventHandlerGetterSetter("onmdmevent");this.defineEventHandlerGetterSetter("onprogressupdated");this.defineEventHandlerGetterSetter("onprogresspaused");this.defineEventHandlerGetterSetter("onprogressstarted");this.defineEventHandlerGetterSetter("onprogressended");}
OmaServiceJS.prototype={__proto__:DOMRequestIpcHelper.prototype,classID:OMASERVICEJS_CID,contractID:OMASERVICEJS_CONTRACTID,QueryInterface:ChromeUtils.generateQI([Ci.nsIDOMOmaService,Ci.nsIDOMGlobalPropertyInitializer,Ci.nsISupportsWeakReference,Ci.nsIObserver,Ci.nsISupports]),init:function init(aWindow){debug('init()');const messages=["OmaService:command:Return:OK","OmaService:command:Return:NO","B2D_FUMO_DL_PROGRESS","B2D_SCOMO_FLOW_END_UI","B2D_SCOMO_DL_PAUSED_UI","B2D_DL_STARTED","VDM_EVENT","MDM_EVENT","OmaService:progress:Return:OK","OmaService:progress:Return:NO","OmaService:setOptToDM:Return:OK","OmaService:setOptToDM:Return:NO","OmaService:handleCpReq:Return:OK","OmaService:handleCpReq:Return:NO",];this.initDOMRequestHelper(aWindow,messages);this._window=aWindow;OmaService.init();},uninit:function uninit(){debug('uninit()');},_returnPromise:function(aMessage){if(aMessage.data){return this.takePromiseResolver(aMessage.data.rid);}
return null;},receiveMessage:function(aMessage){let evt;let resolver=this._returnPromise(aMessage);if(!resolver){debug('receiveMessage: Can not find resoler, '+aMessage.name);}
let detail={detail:aMessage.json};try{switch(aMessage.name){case'OmaService:command:Return:OK':if(resolver){let objCopy=JSON.stringify(aMessage.json);resolver.resolve(objCopy);}
break;case'OmaService:command:Return:NO':if(resolver){resolver.reject(aMessage.data);}
break;case'OmaService:setOptToDM:Return:OK':if(resolver){let objCopy=JSON.stringify(aMessage.json);resolver.resolve(objCopy );}
break;case'OmaService:setOptToDM:Return:NO':if(resolver){resolver.reject(aMessage.data.data.reason);}
break;case'OmaService:handleCpReq:Return:OK':debug('receiveMessage: handleCpReq OK');if(resolver){debug('receiveMessage: message data = '+JSON.stringify(aMessage.data));let objCopy=aMessage.data.data; debug('receiveMessage: resolve for objCopy = '+objCopy);debug('receiveMessage: resolve for objCopy type = '+(typeof objCopy));resolver.resolve(objCopy);}else{debug('receiveMessage: handleCpReq OK but no resolver can return');}
debug('receiveMessage: handleCpReq done');break;case'OmaService:handleCpReq:Return:NO':debug('receiveMessage: handleCpReq FAIL');if(resolver){debug('receiveMessage: message data = '+JSON.stringify(aMessage.data));let objCopy=aMessage.data.data; debug('receiveMessage: reject for objCopy = '+objCopy);debug('receiveMessage: reject for objCopy type = '+(typeof objCopy));resolver.reject(objCopy);}else{debug('receiveMessage: handleCpReq NOK and no resolver can return');}
debug('receiveMessage: handleCpReq done');break;case'OmaService:progress:Return:OK':case'B2D_SCOMO_DL_PROGRESS':if(aMessage){let critical=aMessage.json.DMA_VAR_SCOMO_CRITICAL==0?false:true;let silent=aMessage.json.DMA_VAR_SCOMO_ISSILENT==0?false:true;evt=new this._window.ProgressEvent("progressupdated",{lengthComputable:critical||silent,total:100,loaded:aMessage.json.DMA_VAR_DL_PROGRESS});}
this.__DOM_IMPL__.dispatchEvent(evt);break;case'OmaService:progress:Return:NO':evt=new this._window.ProgressEvent("progressupdated",{total:100,loaded:10001});this.__DOM_IMPL__.dispatchEvent(evt);break;case'B2D_SCOMO_DL_PAUSED_UI':evt=new this._window.ProgressEvent("progresspaused",{total:0,loaded:aMessage.json.DMA_VAR_DL_PROGRESS});this.__DOM_IMPL__.dispatchEvent(evt);break;case'B2D_SCOMO_FLOW_END_UI':evt=new this._window.ProgressEvent("progressended",{total:0,loaded:0});this.__DOM_IMPL__.dispatchEvent(evt);break;case'B2D_DL_STARTED':evt=new this._window.ProgressEvent("progressstarted",{total:0,loaded:0});this.__DOM_IMPL__.dispatchEvent(evt);break;case'VDM_EVENT':debug('[wjj] VDM_EVENT got command : '+JSON.stringify(detail));let vdmEvent=new this._window.CustomEvent("vdmevent",Cu.cloneInto(detail,this._window));this.__DOM_IMPL__.dispatchEvent(vdmEvent);break;case'MDM_EVENT':let mdmEvent=new this._window.CustomEvent("mdmevent",Cu.cloneInto(detail,this._window));this.__DOM_IMPL__.dispatchEvent(mdmEvent);break;default:break;}}catch(err){debug('receiveMessage err: ',err);}},command:function(ctype,cname,adata){debug('[wjj] command : '+ctype+' : '+cname);if(ctype=='config:ui'){return this.createPromiseWithId((aResolverId)=>{let resolver=this.takePromiseResolver(aResolverId);if(resolver){resolver.resolve('OK');}});}
if(ctype.startsWith('engine')){if(!this.inParent){debug('command : no rights to run.');return this.createPromiseWithId((aResolverId)=>{let resolver=this.takePromiseResolver(aResolverId);if(resolver){resolver.reject('Invalid command');}});}}
return this.createPromiseWithId((aResolverId)=>{if(adata){Services.cpmm.sendAsyncMessage("OmaService:command",{type:ctype,name:cname,rid:aResolverId,dlen:adata.length,data:adata});}
else{Services.cpmm.sendAsyncMessage("OmaService:command",{type:ctype,name:cname,rid:aResolverId,dlen:0});}});},startNI:function(array,length,offset,options){debug('startNI enter');},startCI:function(msg){debug('startCI: msg.senderType = '+msg.senderType+' msg.commType = '+JSON.stringify(msg.commType));},setOptToDM:function(msg){debug('setOptToDM: msg.senderType = '+msg.senderType+' msg.commType = '+JSON.stringify(msg.commType));return this.createPromiseWithId((aResolverId)=>{Services.cpmm.sendAsyncMessage('OmaService:setOptToDM',{type:msg.senderType,name:msg.commType,rid:aResolverId});});},servicestart:function(){debug('servicestart()');Services.cpmm.sendAsyncMessage('OmaService:servicestart',{});},serviceend:function(){debug('serviceend()');},handleCpReq:function(req){debug('handleCpReq: Type = '+req.Type+', Data = '+JSON.stringify(req.Data));if(!req.Type){debug('handleCpReq: No type defined, abort.');return;}
return this.createPromiseWithId((aResolverId)=>{ Services.cpmm.sendAsyncMessage('OmaService:handleCpReq',{reqType:req.Type,reqData:req.Data,rid:aResolverId});});},defineEventHandlerGetterSetter:function(event){Object.defineProperty(this,event,{get:function(){try{return this.__DOM_IMPL__.getEventHandler(event);}catch(err){debug('defineEventHandlerGetterSetter get err: ',err);return null;}},set:function(handler){try{this.__DOM_IMPL__.setEventHandler(event,handler);}catch(err){debug('defineEventHandlerGetterSetter set err: ',err);}}});},getPropertyValue:function _GetPropertyValue(propertyName){return this.createPromiseWithId(aResolverId=>{var value=libcutils.property_get(propertyName);this.takePromiseResolver(aResolverId).resolve(value);});},notifyExtLcd:function _NotifyExtLcd(){return this.createPromiseWithId(aResolverId=>{var value=libcutils.ext_lcd_notify();this.takePromiseResolver(aResolverId).resolve(value);});},dropCache:function _DropCache(level){return this.createPromiseWithId(aResolverId=>{var value=libcutils.property_set('sys.sysctl.drop_caches',level);this.takePromiseResolver(aResolverId).resolve(value);});},};this.NSGetFactory=ComponentUtils.generateNSGetFactory([OmaServiceJS]);