const{XPCOMUtils}=ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");const{Services}=ChromeUtils.import("resource://gre/modules/Services.jsm");const{Promise}=ChromeUtils.import("resource://gre/modules/Promise.jsm");XPCOMUtils.defineLazyGetter(this,"ppmm",()=>{return Cc["@mozilla.org/parentprocessmessagemanager;1"].getService();});XPCOMUtils.defineLazyServiceGetter(this,"networkTimeService","@b2g/time/networktimeservice;1","nsINetworkTimeService");ChromeUtils.defineModuleGetter(this,"DeviceUtils","resource://gre/modules/DeviceUtils.jsm");const HTTP_CODE_BAD_REQUEST=400;const DEBUG=false;function debug(aMsg){if(DEBUG){dump("-*- AuthorizationService.js: "+aMsg+"\n");}}
async function getNetworkTime(){let deferred=Promise.defer();networkTimeService.getSuggestedNetworkTime({onSuggestedNetworkTimeResponse(networkTime){deferred.resolve(networkTime);},});return deferred.promise;}
function AuthorizationService(){this._cacheTokens=[];}
AuthorizationService.prototype={classID:Components.ID("{f3edd2c9-b2cc-4494-a92d-399e3b02f6b9}"),QueryInterface:ChromeUtils.generateQI([Ci.nsIObserver]),observe(aSubject,aTopic,aData){debug("init");switch(aTopic){case"profile-after-change":Services.obs.addObserver(this,"xpcom-shutdown");ppmm.addMessageListener("Authorization:GetToken",this);break;case"xpcom-shutdown":Services.obs.removeObserver(this,"xpcom-shutdown");ppmm.removeMessageListener("Authorization:GetToken",this);break;}},receiveMessage(aMessage){debug("receiveMessage: name: "+aMessage.name);switch(aMessage.name){case"Authorization:GetToken":this.getRestrictedToken(aMessage.target,aMessage.data);break;}},getRestrictedToken(aTarget,aData){debug("getRestrictedToken of "+aData.serviceType);getNetworkTime().then(networkTime=>{let cacheToken=this._cacheTokens[aData.serviceType];if(cacheToken&&cacheToken.expires_at>networkTime){aTarget.sendAsyncMessage(aData.requestId,{token:cacheToken.token,});return;}
let uri,apiKeyName;try{switch(aData.serviceType){case"service":uri=Services.prefs.getCharPref("service.token.uri");apiKeyName="KAIOS_SERVICE_API_KEY";break;default:throw Components.Exception("",Cr.NS_ERROR_NOT_IMPLEMENTED);}}catch(e){debug("KaiServiceType '"+aData.serviceType+"' hasn't been supported");aTarget.sendAsyncMessage(aData.requestId,{reason:HTTP_CODE_BAD_REQUEST,});return;}
DeviceUtils.fetchAccessToken(uri,apiKeyName).then(reponse=>{debug("fetched restricted token successfully");let token={accessToken:reponse.access_token,tokenType:reponse.token_type,scope:reponse.scope,kid:reponse.kid,macKey:reponse.mac_key,macAlgorithm:reponse.mac_algorithm,expiresInSeconds:reponse.expires_in,};aTarget.sendAsyncMessage(aData.requestId,{token,});getNetworkTime().then(networkTime=>{let expires_at=networkTime+token.expiresInSeconds*1000;this._cacheTokens[aData.serviceType]={token,expires_at,};});},error=>{debug("failed to fetch restricted token");aTarget.sendAsyncMessage(aData.requestId,{reason:error,});}).catch(err=>{debug("Catch exception: "+err);});});},};var EXPORTED_SYMBOLS=["AuthorizationService"];